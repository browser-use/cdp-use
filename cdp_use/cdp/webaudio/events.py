# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP WebAudio Domain Events"""

from pydantic import BaseModel
from typing import Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import AudioListener
    from .types import AudioNode
    from .types import AudioParam
    from .types import BaseAudioContext
    from .types import GraphObjectId

class ContextCreatedEvent(BaseModel):
    """Notifies that a new BaseAudioContext has been created."""
    context: "BaseAudioContext"



class ContextWillBeDestroyedEvent(BaseModel):
    """Notifies that an existing BaseAudioContext will be destroyed."""
    contextId: "GraphObjectId"



class ContextChangedEvent(BaseModel):
    """Notifies that existing BaseAudioContext has changed some properties (id stays the same).."""
    context: "BaseAudioContext"



class AudioListenerCreatedEvent(BaseModel):
    """Notifies that the construction of an AudioListener has finished."""
    listener: "AudioListener"



class AudioListenerWillBeDestroyedEvent(BaseModel):
    """Notifies that a new AudioListener has been created."""
    contextId: "GraphObjectId"
    listenerId: "GraphObjectId"



class AudioNodeCreatedEvent(BaseModel):
    """Notifies that a new AudioNode has been created."""
    node: "AudioNode"



class AudioNodeWillBeDestroyedEvent(BaseModel):
    """Notifies that an existing AudioNode has been destroyed."""
    contextId: "GraphObjectId"
    nodeId: "GraphObjectId"



class AudioParamCreatedEvent(BaseModel):
    """Notifies that a new AudioParam has been created."""
    param: "AudioParam"



class AudioParamWillBeDestroyedEvent(BaseModel):
    """Notifies that an existing AudioParam has been destroyed."""
    contextId: "GraphObjectId"
    nodeId: "GraphObjectId"
    paramId: "GraphObjectId"



class NodesConnectedEvent(BaseModel):
    """Notifies that two AudioNodes are connected."""
    contextId: "GraphObjectId"
    sourceId: "GraphObjectId"
    destinationId: "GraphObjectId"
    sourceOutputIndex: "Optional[float]" = None
    destinationInputIndex: "Optional[float]" = None



class NodesDisconnectedEvent(BaseModel):
    """Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected."""
    contextId: "GraphObjectId"
    sourceId: "GraphObjectId"
    destinationId: "GraphObjectId"
    sourceOutputIndex: "Optional[float]" = None
    destinationInputIndex: "Optional[float]" = None



class NodeParamConnectedEvent(BaseModel):
    """Notifies that an AudioNode is connected to an AudioParam."""
    contextId: "GraphObjectId"
    sourceId: "GraphObjectId"
    destinationId: "GraphObjectId"
    sourceOutputIndex: "Optional[float]" = None



class NodeParamDisconnectedEvent(BaseModel):
    """Notifies that an AudioNode is disconnected to an AudioParam."""
    contextId: "GraphObjectId"
    sourceId: "GraphObjectId"
    destinationId: "GraphObjectId"
    sourceOutputIndex: "Optional[float]" = None


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import AudioListener
        from .types import AudioNode
        from .types import AudioParam
        from .types import BaseAudioContext
        from .types import GraphObjectId
        # Rebuild models now that imports are available
        ContextCreatedEvent.model_rebuild()
        ContextWillBeDestroyedEvent.model_rebuild()
        ContextChangedEvent.model_rebuild()
        AudioListenerCreatedEvent.model_rebuild()
        AudioListenerWillBeDestroyedEvent.model_rebuild()
        AudioNodeCreatedEvent.model_rebuild()
        AudioNodeWillBeDestroyedEvent.model_rebuild()
        AudioParamCreatedEvent.model_rebuild()
        AudioParamWillBeDestroyedEvent.model_rebuild()
        NodesConnectedEvent.model_rebuild()
        NodesDisconnectedEvent.model_rebuild()
        NodeParamConnectedEvent.model_rebuild()
        NodeParamDisconnectedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
