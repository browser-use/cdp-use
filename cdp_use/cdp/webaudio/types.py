# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP WebAudio Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Optional

"""An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API"""
GraphObjectId = str



class ContextType(Enum):
    """Enum of BaseAudioContext types"""
    REALTIME = "realtime"
    OFFLINE = "offline"



class ContextState(Enum):
    """Enum of AudioContextState from the spec"""
    SUSPENDED = "suspended"
    RUNNING = "running"
    CLOSED = "closed"
    INTERRUPTED = "interrupted"



"""Enum of AudioNode types"""
NodeType = str



class ChannelCountMode(Enum):
    """Enum of AudioNode::ChannelCountMode from the spec"""
    CLAMPED_MAX = "clamped-max"
    EXPLICIT = "explicit"
    MAX = "max"



class ChannelInterpretation(Enum):
    """Enum of AudioNode::ChannelInterpretation from the spec"""
    DISCRETE = "discrete"
    SPEAKERS = "speakers"



"""Enum of AudioParam types"""
ParamType = str



class AutomationRate(Enum):
    """Enum of AudioParam::AutomationRate from the spec"""
    A_RATE = "a-rate"
    K_RATE = "k-rate"



class ContextRealtimeData(BaseModel):
    """Fields in AudioContext that change in real-time."""
    currentTime: "float"
    renderCapacity: "float"
    callbackIntervalMean: "float"
    callbackIntervalVariance: "float"



class BaseAudioContext(BaseModel):
    """Protocol object for BaseAudioContext"""
    contextId: "GraphObjectId"
    contextType: "ContextType"
    contextState: "ContextState"
    callbackBufferSize: "float"
    maxOutputChannelCount: "float"
    sampleRate: "float"
    realtimeData: "Optional[ContextRealtimeData]" = None



class AudioListener(BaseModel):
    """Protocol object for AudioListener"""
    listenerId: "GraphObjectId"
    contextId: "GraphObjectId"



class AudioNode(BaseModel):
    """Protocol object for AudioNode"""
    nodeId: "GraphObjectId"
    contextId: "GraphObjectId"
    nodeType: "NodeType"
    numberOfInputs: "float"
    numberOfOutputs: "float"
    channelCount: "float"
    channelCountMode: "ChannelCountMode"
    channelInterpretation: "ChannelInterpretation"



class AudioParam(BaseModel):
    """Protocol object for AudioParam"""
    paramId: "GraphObjectId"
    nodeId: "GraphObjectId"
    contextId: "GraphObjectId"
    paramType: "ParamType"
    rate: "AutomationRate"
    defaultValue: "float"
    minValue: "float"
    maxValue: "float"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        ContextRealtimeData.model_rebuild()
        BaseAudioContext.model_rebuild()
        AudioListener.model_rebuild()
        AudioNode.model_rebuild()
        AudioParam.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
