# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Browser Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional, Union

BrowserContextID = str



WindowID = int



class WindowState(Enum):
    """The state of the browser window."""
    NORMAL = "normal"
    MINIMIZED = "minimized"
    MAXIMIZED = "maximized"
    FULLSCREEN = "fullscreen"



class Bounds(BaseModel):
    """Browser window bounds information"""
    left: "Optional[int]" = None
    top: "Optional[int]" = None
    width: "Optional[int]" = None
    height: "Optional[int]" = None
    windowState: "Optional[Union[WindowState, str]]" = None



class PermissionType(Enum):
    AR = "ar"
    AUDIOCAPTURE = "audioCapture"
    AUTOMATICFULLSCREEN = "automaticFullscreen"
    BACKGROUNDFETCH = "backgroundFetch"
    BACKGROUNDSYNC = "backgroundSync"
    CAMERAPANTILTZOOM = "cameraPanTiltZoom"
    CAPTUREDSURFACECONTROL = "capturedSurfaceControl"
    CLIPBOARDREADWRITE = "clipboardReadWrite"
    CLIPBOARDSANITIZEDWRITE = "clipboardSanitizedWrite"
    DISPLAYCAPTURE = "displayCapture"
    DURABLESTORAGE = "durableStorage"
    GEOLOCATION = "geolocation"
    HANDTRACKING = "handTracking"
    IDLEDETECTION = "idleDetection"
    KEYBOARDLOCK = "keyboardLock"
    LOCALFONTS = "localFonts"
    LOCALNETWORKACCESS = "localNetworkAccess"
    MIDI = "midi"
    MIDISYSEX = "midiSysex"
    NFC = "nfc"
    NOTIFICATIONS = "notifications"
    PAYMENTHANDLER = "paymentHandler"
    PERIODICBACKGROUNDSYNC = "periodicBackgroundSync"
    POINTERLOCK = "pointerLock"
    PROTECTEDMEDIAIDENTIFIER = "protectedMediaIdentifier"
    SENSORS = "sensors"
    SMARTCARD = "smartCard"
    SPEAKERSELECTION = "speakerSelection"
    STORAGEACCESS = "storageAccess"
    TOPLEVELSTORAGEACCESS = "topLevelStorageAccess"
    VIDEOCAPTURE = "videoCapture"
    VR = "vr"
    WAKELOCKSCREEN = "wakeLockScreen"
    WAKELOCKSYSTEM = "wakeLockSystem"
    WEBAPPINSTALLATION = "webAppInstallation"
    WEBPRINTING = "webPrinting"
    WINDOWMANAGEMENT = "windowManagement"



class PermissionSetting(Enum):
    GRANTED = "granted"
    DENIED = "denied"
    PROMPT = "prompt"



class PermissionDescriptor(BaseModel):
    """Definition of PermissionDescriptor defined in the Permissions API:
https://w3c.github.io/permissions/#dom-permissiondescriptor."""
    name: "str"
    sysex: "Optional[bool]" = None
    userVisibleOnly: "Optional[bool]" = None
    allowWithoutSanitization: "Optional[bool]" = None
    allowWithoutGesture: "Optional[bool]" = None
    panTiltZoom: "Optional[bool]" = None



class BrowserCommandId(Enum):
    """Browser command ids used by executeBrowserCommand."""
    OPENTABSEARCH = "openTabSearch"
    CLOSETABSEARCH = "closeTabSearch"
    OPENGLIC = "openGlic"



class Bucket(BaseModel):
    """Chrome histogram bucket."""
    low: "int"
    high: "int"
    count: "int"



class Histogram(BaseModel):
    """Chrome histogram."""
    name: "str"
    sum: "int"
    count: "int"
    buckets: "List[Bucket]"



class PrivacySandboxAPI(Enum):
    BIDDINGANDAUCTIONSERVICES = "BiddingAndAuctionServices"
    TRUSTEDKEYVALUE = "TrustedKeyValue"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        Bounds.model_rebuild()
        PermissionDescriptor.model_rebuild()
        Bucket.model_rebuild()
        Histogram.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
