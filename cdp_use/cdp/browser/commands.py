# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Browser Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..target.types import TargetID
    from .types import Bounds
    from .types import BrowserCommandId
    from .types import BrowserContextID
    from .types import Histogram
    from .types import PermissionDescriptor
    from .types import PermissionSetting
    from .types import PermissionType
    from .types import PrivacySandboxAPI
    from .types import WindowID

class SetPermissionParameters(TypedDict):
    permission: "PermissionDescriptor"
    """Descriptor of permission to override."""
    setting: "PermissionSetting"
    """Setting of the permission."""
    origin: "Optional[str]"
    """Origin the permission applies to, all origins if not specified."""
    browserContextId: "Optional[BrowserContextID]"
    """Context to override. When omitted, default browser context is used."""





class GrantPermissionsParameters(TypedDict):
    permissions: "List[PermissionType]"
    origin: "Optional[str]"
    """Origin the permission applies to, all origins if not specified."""
    browserContextId: "Optional[BrowserContextID]"
    """BrowserContext to override permissions. When omitted, default browser context is used."""





class ResetPermissionsParameters(TypedDict, total=False):
    browserContextId: "BrowserContextID"
    """BrowserContext to reset permissions. When omitted, default browser context is used."""





class SetDownloadBehaviorParameters(TypedDict):
    behavior: "str"
    """Whether to allow all or deny all download requests, or use default Chrome behavior if
available (otherwise deny). |allowAndName| allows download and names files according to
their download guids."""
    browserContextId: "Optional[BrowserContextID]"
    """BrowserContext to set download behavior. When omitted, default browser context is used."""
    downloadPath: "Optional[str]"
    """The default path to save downloaded files to. This is required if behavior is set to 'allow'
or 'allowAndName'."""
    eventsEnabled: "Optional[bool]"
    """Whether to emit download events (defaults to false)."""





class CancelDownloadParameters(TypedDict):
    guid: "str"
    """Global unique identifier of the download."""
    browserContextId: "Optional[BrowserContextID]"
    """BrowserContext to perform the action in. When omitted, default browser context is used."""





class GetVersionReturns(BaseModel):
    protocolVersion: "str"
    product: "str"
    revision: "str"
    userAgent: "str"
    jsVersion: "str"



class GetBrowserCommandLineReturns(BaseModel):
    arguments: "List[str]"



class GetHistogramsParameters(TypedDict, total=False):
    query: "str"
    """Requested substring in name. Only histograms which have query as a
substring in their name are extracted. An empty or absent query returns
all histograms."""
    delta: "bool"
    """If true, retrieve delta since last delta call."""


class GetHistogramsReturns(BaseModel):
    histograms: "List[Histogram]"



class GetHistogramParameters(TypedDict):
    name: "str"
    """Requested histogram name."""
    delta: "Optional[bool]"
    """If true, retrieve delta since last delta call."""


class GetHistogramReturns(BaseModel):
    histogram: "Histogram"



class GetWindowBoundsParameters(TypedDict):
    windowId: "WindowID"
    """Browser window id."""


class GetWindowBoundsReturns(BaseModel):
    bounds: "Bounds"



class GetWindowForTargetParameters(TypedDict, total=False):
    targetId: "TargetID"
    """Devtools agent host id. If called as a part of the session, associated targetId is used."""


class GetWindowForTargetReturns(BaseModel):
    windowId: "WindowID"
    bounds: "Bounds"



class SetWindowBoundsParameters(TypedDict):
    windowId: "WindowID"
    """Browser window id."""
    bounds: "Bounds"
    """New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined
with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged."""





class SetDockTileParameters(TypedDict, total=False):
    badgeLabel: "str"
    image: "str"
    """Png encoded image. (Encoded as a base64 string when passed over JSON)"""





class ExecuteBrowserCommandParameters(TypedDict):
    commandId: "BrowserCommandId"





class AddPrivacySandboxEnrollmentOverrideParameters(TypedDict):
    url: "str"





class AddPrivacySandboxCoordinatorKeyConfigParameters(TypedDict):
    api: "PrivacySandboxAPI"
    coordinatorOrigin: "str"
    keyConfig: "str"
    browserContextId: "Optional[BrowserContextID]"
    """BrowserContext to perform the action in. When omitted, default browser
context is used."""




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..target.types import TargetID
        from .types import Bounds
        from .types import BrowserCommandId
        from .types import BrowserContextID
        from .types import Histogram
        from .types import PermissionDescriptor
        from .types import PermissionSetting
        from .types import PermissionType
        from .types import PrivacySandboxAPI
        from .types import WindowID
        # Rebuild models now that imports are available
        GetVersionReturns.model_rebuild()
        GetBrowserCommandLineReturns.model_rebuild()
        GetHistogramsReturns.model_rebuild()
        GetHistogramReturns.model_rebuild()
        GetWindowBoundsReturns.model_rebuild()
        GetWindowForTargetReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
