# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Browser Domain Commands"""

from pydantic import BaseModel
from typing import List, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..target.types import TargetID
    from .types import Bounds
    from .types import BrowserCommandId
    from .types import BrowserContextID
    from .types import Histogram
    from .types import PermissionDescriptor
    from .types import PermissionSetting
    from .types import PermissionType
    from .types import PrivacySandboxAPI
    from .types import WindowID

class SetPermissionParameters(TypedDict):
    permission: "PermissionDescriptor"
    setting: "Union[PermissionSetting, str]"
    origin: "NotRequired[str]"
    browserContextId: "NotRequired[BrowserContextID]"





class GrantPermissionsParameters(TypedDict):
    permissions: "List[Union[PermissionType, str]]"
    origin: "NotRequired[str]"
    browserContextId: "NotRequired[BrowserContextID]"





class ResetPermissionsParameters(TypedDict, total=False):
    browserContextId: "BrowserContextID"





class SetDownloadBehaviorParameters(TypedDict):
    behavior: "str"
    browserContextId: "NotRequired[BrowserContextID]"
    downloadPath: "NotRequired[str]"
    eventsEnabled: "NotRequired[bool]"





class CancelDownloadParameters(TypedDict):
    guid: "str"
    browserContextId: "NotRequired[BrowserContextID]"





class GetVersionReturns(BaseModel):
    protocolVersion: "str"
    product: "str"
    revision: "str"
    userAgent: "str"
    jsVersion: "str"



class GetBrowserCommandLineReturns(BaseModel):
    arguments: "List[str]"



class GetHistogramsParameters(TypedDict, total=False):
    query: "str"
    delta: "bool"


class GetHistogramsReturns(BaseModel):
    histograms: "List[Histogram]"



class GetHistogramParameters(TypedDict):
    name: "str"
    delta: "NotRequired[bool]"


class GetHistogramReturns(BaseModel):
    histogram: "Histogram"



class GetWindowBoundsParameters(TypedDict):
    windowId: "WindowID"


class GetWindowBoundsReturns(BaseModel):
    bounds: "Bounds"



class GetWindowForTargetParameters(TypedDict, total=False):
    targetId: "TargetID"


class GetWindowForTargetReturns(BaseModel):
    windowId: "WindowID"
    bounds: "Bounds"



class SetWindowBoundsParameters(TypedDict):
    windowId: "WindowID"
    bounds: "Bounds"





class SetDockTileParameters(TypedDict, total=False):
    badgeLabel: "str"
    image: "str"





class ExecuteBrowserCommandParameters(TypedDict):
    commandId: "Union[BrowserCommandId, str]"





class AddPrivacySandboxEnrollmentOverrideParameters(TypedDict):
    url: "str"





class AddPrivacySandboxCoordinatorKeyConfigParameters(TypedDict):
    api: "Union[PrivacySandboxAPI, str]"
    coordinatorOrigin: "str"
    keyConfig: "str"
    browserContextId: "NotRequired[BrowserContextID]"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..target.types import TargetID
        from .types import Bounds
        from .types import BrowserCommandId
        from .types import BrowserContextID
        from .types import Histogram
        from .types import PermissionDescriptor
        from .types import PermissionSetting
        from .types import PermissionType
        from .types import PrivacySandboxAPI
        from .types import WindowID
        # Rebuild models now that imports are available
        GetVersionReturns.model_rebuild()
        GetBrowserCommandLineReturns.model_rebuild()
        GetHistogramsReturns.model_rebuild()
        GetHistogramReturns.model_rebuild()
        GetWindowBoundsReturns.model_rebuild()
        GetWindowForTargetReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
