# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Browser Domain Library"""

from typing import Any, Dict, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ...client import CDPClient
    from .commands import AddPrivacySandboxCoordinatorKeyConfigParameters
    from .commands import AddPrivacySandboxEnrollmentOverrideParameters
    from .commands import CancelDownloadParameters
    from .commands import ExecuteBrowserCommandParameters
    from .commands import GetBrowserCommandLineReturns
    from .commands import GetHistogramParameters
    from .commands import GetHistogramReturns
    from .commands import GetHistogramsParameters
    from .commands import GetHistogramsReturns
    from .commands import GetVersionReturns
    from .commands import GetWindowBoundsParameters
    from .commands import GetWindowBoundsReturns
    from .commands import GetWindowForTargetParameters
    from .commands import GetWindowForTargetReturns
    from .commands import GrantPermissionsParameters
    from .commands import ResetPermissionsParameters
    from .commands import SetDockTileParameters
    from .commands import SetDownloadBehaviorParameters
    from .commands import SetPermissionParameters
    from .commands import SetWindowBoundsParameters

class BrowserClient:
    """Client for Browser domain commands."""

    def __init__(self, client: 'CDPClient'):
        self._client = client

    async def setPermission(
        self,
        params: "SetPermissionParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Set permission settings for given origin."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.setPermission",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def grantPermissions(
        self,
        params: "GrantPermissionsParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Grant specific permissions to the given origin and reject all others."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.grantPermissions",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def resetPermissions(
        self,
        params: Optional["ResetPermissionsParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Reset all permission management for all origins."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.resetPermissions",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setDownloadBehavior(
        self,
        params: "SetDownloadBehaviorParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Set the behavior when downloading a file."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.setDownloadBehavior",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def cancelDownload(
        self,
        params: "CancelDownloadParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Cancel a download if in progress"""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.cancelDownload",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def close(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Close browser gracefully."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.close",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def crash(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Crashes browser on the main thread."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.crash",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def crashGpuProcess(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Crashes GPU process."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.crashGpuProcess",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def getVersion(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "GetVersionReturns":
        """Returns version information."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getVersion",
            params=params,
            session_id=session_id,
        )
        from .commands import GetVersionReturns as _GetVersionReturns
        return _GetVersionReturns.model_validate(raw_result)

    async def getBrowserCommandLine(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "GetBrowserCommandLineReturns":
        """Returns the command line switches for the browser process if, and only if
--enable-automation is on the commandline."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getBrowserCommandLine",
            params=params,
            session_id=session_id,
        )
        from .commands import GetBrowserCommandLineReturns as _GetBrowserCommandLineReturns
        return _GetBrowserCommandLineReturns.model_validate(raw_result)

    async def getHistograms(
        self,
        params: Optional["GetHistogramsParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "GetHistogramsReturns":
        """Get Chrome histograms."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getHistograms",
            params=params,
            session_id=session_id,
        )
        from .commands import GetHistogramsReturns as _GetHistogramsReturns
        return _GetHistogramsReturns.model_validate(raw_result)

    async def getHistogram(
        self,
        params: "GetHistogramParameters",
        session_id: Optional[str] = None,
    ) -> "GetHistogramReturns":
        """Get a Chrome histogram by name."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getHistogram",
            params=params,
            session_id=session_id,
        )
        from .commands import GetHistogramReturns as _GetHistogramReturns
        return _GetHistogramReturns.model_validate(raw_result)

    async def getWindowBounds(
        self,
        params: "GetWindowBoundsParameters",
        session_id: Optional[str] = None,
    ) -> "GetWindowBoundsReturns":
        """Get position and size of the browser window."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getWindowBounds",
            params=params,
            session_id=session_id,
        )
        from .commands import GetWindowBoundsReturns as _GetWindowBoundsReturns
        return _GetWindowBoundsReturns.model_validate(raw_result)

    async def getWindowForTarget(
        self,
        params: Optional["GetWindowForTargetParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "GetWindowForTargetReturns":
        """Get the browser window that contains the devtools target."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.getWindowForTarget",
            params=params,
            session_id=session_id,
        )
        from .commands import GetWindowForTargetReturns as _GetWindowForTargetReturns
        return _GetWindowForTargetReturns.model_validate(raw_result)

    async def setWindowBounds(
        self,
        params: "SetWindowBoundsParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Set position and/or size of the browser window."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.setWindowBounds",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setDockTile(
        self,
        params: Optional["SetDockTileParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Set dock tile details, platform-specific."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.setDockTile",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def executeBrowserCommand(
        self,
        params: "ExecuteBrowserCommandParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Invoke custom browser commands used by telemetry."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.executeBrowserCommand",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def addPrivacySandboxEnrollmentOverride(
        self,
        params: "AddPrivacySandboxEnrollmentOverrideParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Allows a site to use privacy sandbox features that require enrollment
without the site actually being enrolled. Only supported on page targets."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.addPrivacySandboxEnrollmentOverride",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def addPrivacySandboxCoordinatorKeyConfig(
        self,
        params: "AddPrivacySandboxCoordinatorKeyConfigParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Configures encryption keys used with a given privacy sandbox API to talk
to a trusted coordinator.  Since this is intended for test automation only,
coordinatorOrigin must be a .test domain. No existing coordinator
configuration for the origin may exist."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Browser.addPrivacySandboxCoordinatorKeyConfig",
            params=params,
            session_id=session_id,
        )
        return raw_result


