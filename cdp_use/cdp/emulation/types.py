# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Emulation Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

class SafeAreaInsets(BaseModel):
    top: "Optional[int]" = None
    topMax: "Optional[int]" = None
    left: "Optional[int]" = None
    leftMax: "Optional[int]" = None
    bottom: "Optional[int]" = None
    bottomMax: "Optional[int]" = None
    right: "Optional[int]" = None
    rightMax: "Optional[int]" = None



class ScreenOrientation(BaseModel):
    """Screen orientation."""
    type: "str"
    angle: "int"



class DisplayFeature(BaseModel):
    orientation: "str"
    offset: "int"
    maskLength: "int"



class DevicePosture(BaseModel):
    type: "str"



class MediaFeature(BaseModel):
    name: "str"
    value: "str"



class VirtualTimePolicy(Enum):
    """advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
resource fetches."""
    ADVANCE = "advance"
    PAUSE = "pause"
    PAUSEIFNETWORKFETCHESPENDING = "pauseIfNetworkFetchesPending"



class UserAgentBrandVersion(BaseModel):
    """Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints"""
    brand: "str"
    version: "str"



class UserAgentMetadata(BaseModel):
    """Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
Missing optional values will be filled in by the target with what it would normally use."""
    platform: "str"
    platformVersion: "str"
    architecture: "str"
    model: "str"
    mobile: "bool"
    brands: "Optional[List[UserAgentBrandVersion]]" = None
    fullVersionList: "Optional[List[UserAgentBrandVersion]]" = None
    fullVersion: "Optional[str]" = None
    bitness: "Optional[str]" = None
    wow64: "Optional[bool]" = None
    formFactors: "Optional[List[str]]" = None



class SensorType(Enum):
    """Used to specify sensor types to emulate.
See https://w3c.github.io/sensors/#automation for more information."""
    ABSOLUTE_ORIENTATION = "absolute-orientation"
    ACCELEROMETER = "accelerometer"
    AMBIENT_LIGHT = "ambient-light"
    GRAVITY = "gravity"
    GYROSCOPE = "gyroscope"
    LINEAR_ACCELERATION = "linear-acceleration"
    MAGNETOMETER = "magnetometer"
    RELATIVE_ORIENTATION = "relative-orientation"



class SensorMetadata(BaseModel):
    available: "Optional[bool]" = None
    minimumFrequency: "Optional[float]" = None
    maximumFrequency: "Optional[float]" = None



class SensorReadingSingle(BaseModel):
    value: "float"



class SensorReadingXYZ(BaseModel):
    x: "float"
    y: "float"
    z: "float"



class SensorReadingQuaternion(BaseModel):
    x: "float"
    y: "float"
    z: "float"
    w: "float"



class SensorReading(BaseModel):
    single: "Optional[SensorReadingSingle]" = None
    xyz: "Optional[SensorReadingXYZ]" = None
    quaternion: "Optional[SensorReadingQuaternion]" = None



class PressureSource(Enum):
    CPU = "cpu"



class PressureState(Enum):
    NOMINAL = "nominal"
    FAIR = "fair"
    SERIOUS = "serious"
    CRITICAL = "critical"



class PressureMetadata(BaseModel):
    available: "Optional[bool]" = None



class DisabledImageType(Enum):
    """Enum of image types that can be disabled."""
    AVIF = "avif"
    WEBP = "webp"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        SafeAreaInsets.model_rebuild()
        ScreenOrientation.model_rebuild()
        DisplayFeature.model_rebuild()
        DevicePosture.model_rebuild()
        MediaFeature.model_rebuild()
        UserAgentBrandVersion.model_rebuild()
        UserAgentMetadata.model_rebuild()
        SensorMetadata.model_rebuild()
        SensorReadingSingle.model_rebuild()
        SensorReadingXYZ.model_rebuild()
        SensorReadingQuaternion.model_rebuild()
        SensorReading.model_rebuild()
        PressureMetadata.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
