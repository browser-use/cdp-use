# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Emulation Domain Commands"""

from pydantic import BaseModel
from typing import List, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import RGBA
    from ..network.types import TimeSinceEpoch
    from ..page.types import Viewport
    from .types import DevicePosture
    from .types import DisabledImageType
    from .types import DisplayFeature
    from .types import MediaFeature
    from .types import PressureMetadata
    from .types import PressureSource
    from .types import PressureState
    from .types import SafeAreaInsets
    from .types import ScreenOrientation
    from .types import SensorMetadata
    from .types import SensorReading
    from .types import SensorType
    from .types import UserAgentMetadata
    from .types import VirtualTimePolicy

class CanEmulateReturns(BaseModel):
    result: "bool"



class SetFocusEmulationEnabledParameters(TypedDict):
    enabled: "bool"





class SetAutoDarkModeOverrideParameters(TypedDict, total=False):
    enabled: "bool"





class SetCPUThrottlingRateParameters(TypedDict):
    rate: "float"





class SetDefaultBackgroundColorOverrideParameters(TypedDict, total=False):
    color: "RGBA"





class SetSafeAreaInsetsOverrideParameters(TypedDict):
    insets: "SafeAreaInsets"





class SetDeviceMetricsOverrideParameters(TypedDict):
    width: "int"
    height: "int"
    deviceScaleFactor: "float"
    mobile: "bool"
    scale: "NotRequired[float]"
    screenWidth: "NotRequired[int]"
    screenHeight: "NotRequired[int]"
    positionX: "NotRequired[int]"
    positionY: "NotRequired[int]"
    dontSetVisibleSize: "NotRequired[bool]"
    screenOrientation: "NotRequired[ScreenOrientation]"
    viewport: "NotRequired[Viewport]"
    displayFeature: "NotRequired[DisplayFeature]"
    devicePosture: "NotRequired[DevicePosture]"





class SetDevicePostureOverrideParameters(TypedDict):
    posture: "DevicePosture"





class SetDisplayFeaturesOverrideParameters(TypedDict):
    features: "List[DisplayFeature]"





class SetScrollbarsHiddenParameters(TypedDict):
    hidden: "bool"





class SetDocumentCookieDisabledParameters(TypedDict):
    disabled: "bool"





class SetEmitTouchEventsForMouseParameters(TypedDict):
    enabled: "bool"
    configuration: "NotRequired[str]"





class SetEmulatedMediaParameters(TypedDict, total=False):
    media: "str"
    features: "List[MediaFeature]"





class SetEmulatedVisionDeficiencyParameters(TypedDict):
    type: "str"





class SetEmulatedOSTextScaleParameters(TypedDict, total=False):
    scale: "float"





class SetGeolocationOverrideParameters(TypedDict, total=False):
    latitude: "float"
    longitude: "float"
    accuracy: "float"
    altitude: "float"
    altitudeAccuracy: "float"
    heading: "float"
    speed: "float"





class GetOverriddenSensorInformationParameters(TypedDict):
    type: "Union[SensorType, str]"


class GetOverriddenSensorInformationReturns(BaseModel):
    requestedSamplingFrequency: "float"



class SetSensorOverrideEnabledParameters(TypedDict):
    enabled: "bool"
    type: "Union[SensorType, str]"
    metadata: "NotRequired[SensorMetadata]"





class SetSensorOverrideReadingsParameters(TypedDict):
    type: "Union[SensorType, str]"
    reading: "SensorReading"





class SetPressureSourceOverrideEnabledParameters(TypedDict):
    enabled: "bool"
    source: "Union[PressureSource, str]"
    metadata: "NotRequired[PressureMetadata]"





class SetPressureStateOverrideParameters(TypedDict):
    source: "Union[PressureSource, str]"
    state: "Union[PressureState, str]"





class SetPressureDataOverrideParameters(TypedDict):
    source: "Union[PressureSource, str]"
    state: "Union[PressureState, str]"
    ownContributionEstimate: "NotRequired[float]"





class SetIdleOverrideParameters(TypedDict):
    isUserActive: "bool"
    isScreenUnlocked: "bool"





class SetNavigatorOverridesParameters(TypedDict):
    platform: "str"





class SetPageScaleFactorParameters(TypedDict):
    pageScaleFactor: "float"





class SetScriptExecutionDisabledParameters(TypedDict):
    value: "bool"





class SetTouchEmulationEnabledParameters(TypedDict):
    enabled: "bool"
    maxTouchPoints: "NotRequired[int]"





class SetVirtualTimePolicyParameters(TypedDict):
    policy: "Union[VirtualTimePolicy, str]"
    budget: "NotRequired[float]"
    maxVirtualTimeTaskStarvationCount: "NotRequired[int]"
    initialVirtualTime: "NotRequired[TimeSinceEpoch]"


class SetVirtualTimePolicyReturns(BaseModel):
    virtualTimeTicksBase: "float"



class SetLocaleOverrideParameters(TypedDict, total=False):
    locale: "str"





class SetTimezoneOverrideParameters(TypedDict):
    timezoneId: "str"





class SetVisibleSizeParameters(TypedDict):
    width: "int"
    height: "int"





class SetDisabledImageTypesParameters(TypedDict):
    imageTypes: "List[Union[DisabledImageType, str]]"





class SetDataSaverOverrideParameters(TypedDict, total=False):
    dataSaverEnabled: "bool"





class SetHardwareConcurrencyOverrideParameters(TypedDict):
    hardwareConcurrency: "int"





class SetUserAgentOverrideParameters(TypedDict):
    userAgent: "str"
    acceptLanguage: "NotRequired[str]"
    platform: "NotRequired[str]"
    userAgentMetadata: "NotRequired[UserAgentMetadata]"





class SetAutomationOverrideParameters(TypedDict):
    enabled: "bool"





class SetSmallViewportHeightDifferenceOverrideParameters(TypedDict):
    difference: "int"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import RGBA
        from ..network.types import TimeSinceEpoch
        from ..page.types import Viewport
        from .types import DevicePosture
        from .types import DisabledImageType
        from .types import DisplayFeature
        from .types import MediaFeature
        from .types import PressureMetadata
        from .types import PressureSource
        from .types import PressureState
        from .types import SafeAreaInsets
        from .types import ScreenOrientation
        from .types import SensorMetadata
        from .types import SensorReading
        from .types import SensorType
        from .types import UserAgentMetadata
        from .types import VirtualTimePolicy
        # Rebuild models now that imports are available
        CanEmulateReturns.model_rebuild()
        GetOverriddenSensorInformationReturns.model_rebuild()
        SetVirtualTimePolicyReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
