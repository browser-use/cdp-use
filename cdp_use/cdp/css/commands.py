# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CSS Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import NodeId
    from ..dom.types import PseudoType
    from ..page.types import FrameId
    from .types import CSSAnimationStyle
    from .types import CSSComputedStyleProperty
    from .types import CSSContainerQuery
    from .types import CSSFontPaletteValuesRule
    from .types import CSSFunctionRule
    from .types import CSSKeyframesRule
    from .types import CSSLayerData
    from .types import CSSMedia
    from .types import CSSPositionTryRule
    from .types import CSSProperty
    from .types import CSSPropertyRegistration
    from .types import CSSPropertyRule
    from .types import CSSRule
    from .types import CSSScope
    from .types import CSSStyle
    from .types import CSSSupports
    from .types import InheritedAnimatedStyleEntry
    from .types import InheritedPseudoElementMatches
    from .types import InheritedStyleEntry
    from .types import PlatformFontUsage
    from .types import PseudoElementMatches
    from .types import RuleMatch
    from .types import RuleUsage
    from .types import SelectorList
    from .types import SourceRange
    from .types import StyleDeclarationEdit
    from .types import StyleSheetId
    from .types import Value

class AddRuleParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    ruleText: "str"
    location: "SourceRange"
    nodeForPropertySyntaxValidation: "NotRequired[NodeId]"


class AddRuleReturns(BaseModel):
    rule: "CSSRule"



class CollectClassNamesParameters(TypedDict):
    styleSheetId: "StyleSheetId"


class CollectClassNamesReturns(BaseModel):
    classNames: "List[str]"



class CreateStyleSheetParameters(TypedDict):
    frameId: "FrameId"
    force: "NotRequired[bool]"


class CreateStyleSheetReturns(BaseModel):
    styleSheetId: "StyleSheetId"



class ForcePseudoStateParameters(TypedDict):
    nodeId: "NodeId"
    forcedPseudoClasses: "List[str]"





class ForceStartingStyleParameters(TypedDict):
    nodeId: "NodeId"
    forced: "bool"





class GetBackgroundColorsParameters(TypedDict):
    nodeId: "NodeId"


class GetBackgroundColorsReturns(BaseModel):
    backgroundColors: "Optional[List[str]]" = None
    computedFontSize: "Optional[str]" = None
    computedFontWeight: "Optional[str]" = None



class GetComputedStyleForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetComputedStyleForNodeReturns(BaseModel):
    computedStyle: "List[CSSComputedStyleProperty]"



class ResolveValuesParameters(TypedDict):
    values: "List[str]"
    nodeId: "NodeId"
    propertyName: "NotRequired[str]"
    pseudoType: "NotRequired[Union[PseudoType, str]]"
    pseudoIdentifier: "NotRequired[str]"


class ResolveValuesReturns(BaseModel):
    results: "List[str]"



class GetLonghandPropertiesParameters(TypedDict):
    shorthandName: "str"
    value: "str"


class GetLonghandPropertiesReturns(BaseModel):
    longhandProperties: "List[CSSProperty]"



class GetInlineStylesForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetInlineStylesForNodeReturns(BaseModel):
    inlineStyle: "Optional[CSSStyle]" = None
    attributesStyle: "Optional[CSSStyle]" = None



class GetAnimatedStylesForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetAnimatedStylesForNodeReturns(BaseModel):
    animationStyles: "Optional[List[CSSAnimationStyle]]" = None
    transitionsStyle: "Optional[CSSStyle]" = None
    inherited: "Optional[List[InheritedAnimatedStyleEntry]]" = None



class GetMatchedStylesForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetMatchedStylesForNodeReturns(BaseModel):
    inlineStyle: "Optional[CSSStyle]" = None
    attributesStyle: "Optional[CSSStyle]" = None
    matchedCSSRules: "Optional[List[RuleMatch]]" = None
    pseudoElements: "Optional[List[PseudoElementMatches]]" = None
    inherited: "Optional[List[InheritedStyleEntry]]" = None
    inheritedPseudoElements: "Optional[List[InheritedPseudoElementMatches]]" = None
    cssKeyframesRules: "Optional[List[CSSKeyframesRule]]" = None
    cssPositionTryRules: "Optional[List[CSSPositionTryRule]]" = None
    activePositionFallbackIndex: "Optional[int]" = None
    cssPropertyRules: "Optional[List[CSSPropertyRule]]" = None
    cssPropertyRegistrations: "Optional[List[CSSPropertyRegistration]]" = None
    cssFontPaletteValuesRule: "Optional[CSSFontPaletteValuesRule]" = None
    parentLayoutNodeId: "Optional[NodeId]" = None
    cssFunctionRules: "Optional[List[CSSFunctionRule]]" = None



class GetMediaQueriesReturns(BaseModel):
    medias: "List[CSSMedia]"



class GetPlatformFontsForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetPlatformFontsForNodeReturns(BaseModel):
    fonts: "List[PlatformFontUsage]"



class GetStyleSheetTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"


class GetStyleSheetTextReturns(BaseModel):
    text: "str"



class GetLayersForNodeParameters(TypedDict):
    nodeId: "NodeId"


class GetLayersForNodeReturns(BaseModel):
    rootLayer: "CSSLayerData"



class GetLocationForSelectorParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    selectorText: "str"


class GetLocationForSelectorReturns(BaseModel):
    ranges: "List[SourceRange]"



class TrackComputedStyleUpdatesForNodeParameters(TypedDict, total=False):
    nodeId: "NodeId"





class TrackComputedStyleUpdatesParameters(TypedDict):
    propertiesToTrack: "List[CSSComputedStyleProperty]"





class TakeComputedStyleUpdatesReturns(BaseModel):
    nodeIds: "List[NodeId]"



class SetEffectivePropertyValueForNodeParameters(TypedDict):
    nodeId: "NodeId"
    propertyName: "str"
    value: "str"





class SetPropertyRulePropertyNameParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    propertyName: "str"


class SetPropertyRulePropertyNameReturns(BaseModel):
    propertyName: "Value"



class SetKeyframeKeyParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    keyText: "str"


class SetKeyframeKeyReturns(BaseModel):
    keyText: "Value"



class SetMediaTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: "str"


class SetMediaTextReturns(BaseModel):
    media: "CSSMedia"



class SetContainerQueryTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: "str"


class SetContainerQueryTextReturns(BaseModel):
    containerQuery: "CSSContainerQuery"



class SetSupportsTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: "str"


class SetSupportsTextReturns(BaseModel):
    supports: "CSSSupports"



class SetScopeTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: "str"


class SetScopeTextReturns(BaseModel):
    scope: "CSSScope"



class SetRuleSelectorParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    selector: "str"


class SetRuleSelectorReturns(BaseModel):
    selectorList: "SelectorList"



class SetStyleSheetTextParameters(TypedDict):
    styleSheetId: "StyleSheetId"
    text: "str"


class SetStyleSheetTextReturns(BaseModel):
    sourceMapURL: "Optional[str]" = None



class SetStyleTextsParameters(TypedDict):
    edits: "List[StyleDeclarationEdit]"
    nodeForPropertySyntaxValidation: "NotRequired[NodeId]"


class SetStyleTextsReturns(BaseModel):
    styles: "List[CSSStyle]"



class StopRuleUsageTrackingReturns(BaseModel):
    ruleUsage: "List[RuleUsage]"



class TakeCoverageDeltaReturns(BaseModel):
    coverage: "List[RuleUsage]"
    timestamp: "float"



class SetLocalFontsEnabledParameters(TypedDict):
    enabled: "bool"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import NodeId
        from ..dom.types import PseudoType
        from ..page.types import FrameId
        from .types import CSSAnimationStyle
        from .types import CSSComputedStyleProperty
        from .types import CSSContainerQuery
        from .types import CSSFontPaletteValuesRule
        from .types import CSSFunctionRule
        from .types import CSSKeyframesRule
        from .types import CSSLayerData
        from .types import CSSMedia
        from .types import CSSPositionTryRule
        from .types import CSSProperty
        from .types import CSSPropertyRegistration
        from .types import CSSPropertyRule
        from .types import CSSRule
        from .types import CSSScope
        from .types import CSSStyle
        from .types import CSSSupports
        from .types import InheritedAnimatedStyleEntry
        from .types import InheritedPseudoElementMatches
        from .types import InheritedStyleEntry
        from .types import PlatformFontUsage
        from .types import PseudoElementMatches
        from .types import RuleMatch
        from .types import RuleUsage
        from .types import SelectorList
        from .types import SourceRange
        from .types import StyleDeclarationEdit
        from .types import StyleSheetId
        from .types import Value
        # Rebuild models now that imports are available
        AddRuleReturns.model_rebuild()
        CollectClassNamesReturns.model_rebuild()
        CreateStyleSheetReturns.model_rebuild()
        GetBackgroundColorsReturns.model_rebuild()
        GetComputedStyleForNodeReturns.model_rebuild()
        ResolveValuesReturns.model_rebuild()
        GetLonghandPropertiesReturns.model_rebuild()
        GetInlineStylesForNodeReturns.model_rebuild()
        GetAnimatedStylesForNodeReturns.model_rebuild()
        GetMatchedStylesForNodeReturns.model_rebuild()
        GetMediaQueriesReturns.model_rebuild()
        GetPlatformFontsForNodeReturns.model_rebuild()
        GetStyleSheetTextReturns.model_rebuild()
        GetLayersForNodeReturns.model_rebuild()
        GetLocationForSelectorReturns.model_rebuild()
        TakeComputedStyleUpdatesReturns.model_rebuild()
        SetPropertyRulePropertyNameReturns.model_rebuild()
        SetKeyframeKeyReturns.model_rebuild()
        SetMediaTextReturns.model_rebuild()
        SetContainerQueryTextReturns.model_rebuild()
        SetSupportsTextReturns.model_rebuild()
        SetScopeTextReturns.model_rebuild()
        SetRuleSelectorReturns.model_rebuild()
        SetStyleSheetTextReturns.model_rebuild()
        SetStyleTextsReturns.model_rebuild()
        StopRuleUsageTrackingReturns.model_rebuild()
        TakeCoverageDeltaReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
