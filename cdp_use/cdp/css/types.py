# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CSS Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..dom.types import LogicalAxes
    from ..dom.types import PhysicalAxes
    from ..dom.types import PseudoType
    from ..page.types import FrameId

StyleSheetId = str



class StyleSheetOrigin(Enum):
    """Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent
stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via
inspector\" rules), \"regular\" for regular stylesheets."""
    INJECTED = "injected"
    USER_AGENT = "user-agent"
    INSPECTOR = "inspector"
    REGULAR = "regular"



class PseudoElementMatches(BaseModel):
    """CSS rule collection for a single pseudo style."""
    pseudoType: "PseudoType"
    matches: "List[RuleMatch]"
    pseudoIdentifier: "Optional[str]" = None



class CSSAnimationStyle(BaseModel):
    """CSS style coming from animations with the name of the animation."""
    style: "CSSStyle"
    name: "Optional[str]" = None



class InheritedStyleEntry(BaseModel):
    """Inherited CSS rule collection from ancestor node."""
    matchedCSSRules: "List[RuleMatch]"
    inlineStyle: "Optional[CSSStyle]" = None



class InheritedAnimatedStyleEntry(BaseModel):
    """Inherited CSS style collection for animated styles from ancestor node."""
    animationStyles: "Optional[List[CSSAnimationStyle]]" = None
    transitionsStyle: "Optional[CSSStyle]" = None



class InheritedPseudoElementMatches(BaseModel):
    """Inherited pseudo element matches from pseudos of an ancestor node."""
    pseudoElements: "List[PseudoElementMatches]"



class RuleMatch(BaseModel):
    """Match data for a CSS rule."""
    rule: "CSSRule"
    matchingSelectors: "List[int]"



class Value(BaseModel):
    """Data for a simple selector (these are delimited by commas in a selector list)."""
    text: "str"
    range: "Optional[SourceRange]" = None
    specificity: "Optional[Specificity]" = None



class Specificity(BaseModel):
    """Specificity:
https://drafts.csswg.org/selectors/#specificity-rules"""
    a: "int"
    b: "int"
    c: "int"



class SelectorList(BaseModel):
    """Selector list data."""
    selectors: "List[Value]"
    text: "str"



class CSSStyleSheetHeader(BaseModel):
    """CSS stylesheet metainformation."""
    styleSheetId: "StyleSheetId"
    frameId: "FrameId"
    sourceURL: "str"
    origin: "StyleSheetOrigin"
    title: "str"
    disabled: "bool"
    isInline: "bool"
    isMutable: "bool"
    isConstructed: "bool"
    startLine: "float"
    startColumn: "float"
    length: "float"
    endLine: "float"
    endColumn: "float"
    sourceMapURL: "Optional[str]" = None
    ownerNode: "Optional[BackendNodeId]" = None
    hasSourceURL: "Optional[bool]" = None
    loadingFailed: "Optional[bool]" = None



class CSSRule(BaseModel):
    """CSS rule representation."""
    selectorList: "SelectorList"
    origin: "StyleSheetOrigin"
    style: "CSSStyle"
    styleSheetId: "Optional[StyleSheetId]" = None
    nestingSelectors: "Optional[List[str]]" = None
    media: "Optional[List[CSSMedia]]" = None
    containerQueries: "Optional[List[CSSContainerQuery]]" = None
    supports: "Optional[List[CSSSupports]]" = None
    layers: "Optional[List[CSSLayer]]" = None
    scopes: "Optional[List[CSSScope]]" = None
    ruleTypes: "Optional[List[CSSRuleType]]" = None
    startingStyles: "Optional[List[CSSStartingStyle]]" = None



class CSSRuleType(Enum):
    """Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.
This list only contains rule types that are collected during the ancestor rule collection."""
    MEDIARULE = "MediaRule"
    SUPPORTSRULE = "SupportsRule"
    CONTAINERRULE = "ContainerRule"
    LAYERRULE = "LayerRule"
    SCOPERULE = "ScopeRule"
    STYLERULE = "StyleRule"
    STARTINGSTYLERULE = "StartingStyleRule"



class RuleUsage(BaseModel):
    """CSS coverage information."""
    styleSheetId: "StyleSheetId"
    startOffset: "float"
    endOffset: "float"
    used: "bool"



class SourceRange(BaseModel):
    """Text range within a resource. All numbers are zero-based."""
    startLine: "int"
    startColumn: "int"
    endLine: "int"
    endColumn: "int"



class ShorthandEntry(BaseModel):
    name: "str"
    value: "str"
    important: "Optional[bool]" = None



class CSSComputedStyleProperty(BaseModel):
    name: "str"
    value: "str"



class CSSStyle(BaseModel):
    """CSS style representation."""
    cssProperties: "List[CSSProperty]"
    shorthandEntries: "List[ShorthandEntry]"
    styleSheetId: "Optional[StyleSheetId]" = None
    cssText: "Optional[str]" = None
    range: "Optional[SourceRange]" = None



class CSSProperty(BaseModel):
    """CSS property declaration data."""
    name: "str"
    value: "str"
    important: "Optional[bool]" = None
    implicit: "Optional[bool]" = None
    text: "Optional[str]" = None
    parsedOk: "Optional[bool]" = None
    disabled: "Optional[bool]" = None
    range: "Optional[SourceRange]" = None
    longhandProperties: "Optional[List[CSSProperty]]" = None



class CSSMedia(BaseModel):
    """CSS media rule descriptor."""
    text: "str"
    source: "str"
    sourceURL: "Optional[str]" = None
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None
    mediaList: "Optional[List[MediaQuery]]" = None



class MediaQuery(BaseModel):
    """Media query descriptor."""
    expressions: "List[MediaQueryExpression]"
    active: "bool"



class MediaQueryExpression(BaseModel):
    """Media query expression descriptor."""
    value: "float"
    unit: "str"
    feature: "str"
    valueRange: "Optional[SourceRange]" = None
    computedLength: "Optional[float]" = None



class CSSContainerQuery(BaseModel):
    """CSS container query rule descriptor."""
    text: "str"
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None
    name: "Optional[str]" = None
    physicalAxes: "Optional[PhysicalAxes]" = None
    logicalAxes: "Optional[LogicalAxes]" = None
    queriesScrollState: "Optional[bool]" = None



class CSSSupports(BaseModel):
    """CSS Supports at-rule descriptor."""
    text: "str"
    active: "bool"
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSScope(BaseModel):
    """CSS Scope at-rule descriptor."""
    text: "str"
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSLayer(BaseModel):
    """CSS Layer at-rule descriptor."""
    text: "str"
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSStartingStyle(BaseModel):
    """CSS Starting Style at-rule descriptor."""
    range: "Optional[SourceRange]" = None
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSLayerData(BaseModel):
    """CSS Layer data."""
    name: "str"
    order: "float"
    subLayers: "Optional[List[CSSLayerData]]" = None



class PlatformFontUsage(BaseModel):
    """Information about amount of glyphs that were rendered with given font."""
    familyName: "str"
    postScriptName: "str"
    isCustomFont: "bool"
    glyphCount: "float"



class FontVariationAxis(BaseModel):
    """Information about font variation axes for variable fonts"""
    tag: "str"
    name: "str"
    minValue: "float"
    maxValue: "float"
    defaultValue: "float"



class FontFace(BaseModel):
    """Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
and additional information such as platformFontFamily and fontVariationAxes."""
    fontFamily: "str"
    fontStyle: "str"
    fontVariant: "str"
    fontWeight: "str"
    fontStretch: "str"
    fontDisplay: "str"
    unicodeRange: "str"
    src: "str"
    platformFontFamily: "str"
    fontVariationAxes: "Optional[List[FontVariationAxis]]" = None



class CSSTryRule(BaseModel):
    """CSS try rule representation."""
    origin: "StyleSheetOrigin"
    style: "CSSStyle"
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSPositionTryRule(BaseModel):
    """CSS @position-try rule representation."""
    name: "Value"
    origin: "StyleSheetOrigin"
    style: "CSSStyle"
    active: "bool"
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSKeyframesRule(BaseModel):
    """CSS keyframes rule representation."""
    animationName: "Value"
    keyframes: "List[CSSKeyframeRule]"



class CSSPropertyRegistration(BaseModel):
    """Representation of a custom property registration through CSS.registerProperty"""
    propertyName: "str"
    inherits: "bool"
    syntax: "str"
    initialValue: "Optional[Value]" = None



class CSSFontPaletteValuesRule(BaseModel):
    """CSS font-palette-values rule representation."""
    origin: "StyleSheetOrigin"
    fontPaletteName: "Value"
    style: "CSSStyle"
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSPropertyRule(BaseModel):
    """CSS property at-rule representation."""
    origin: "StyleSheetOrigin"
    propertyName: "Value"
    style: "CSSStyle"
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSFunctionParameter(BaseModel):
    """CSS function argument representation."""
    name: "str"
    type: "str"



class CSSFunctionConditionNode(BaseModel):
    """CSS function conditional block representation."""
    children: "List[CSSFunctionNode]"
    conditionText: "str"
    media: "Optional[CSSMedia]" = None
    containerQueries: "Optional[CSSContainerQuery]" = None
    supports: "Optional[CSSSupports]" = None



class CSSFunctionNode(BaseModel):
    """Section of the body of a CSS function rule."""
    condition: "Optional[CSSFunctionConditionNode]" = None
    style: "Optional[CSSStyle]" = None



class CSSFunctionRule(BaseModel):
    """CSS function at-rule representation."""
    name: "Value"
    origin: "StyleSheetOrigin"
    parameters: "List[CSSFunctionParameter]"
    children: "List[CSSFunctionNode]"
    styleSheetId: "Optional[StyleSheetId]" = None



class CSSKeyframeRule(BaseModel):
    """CSS keyframe rule representation."""
    origin: "StyleSheetOrigin"
    keyText: "Value"
    style: "CSSStyle"
    styleSheetId: "Optional[StyleSheetId]" = None



class StyleDeclarationEdit(BaseModel):
    """A descriptor of operation to mutate style declaration text."""
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: "str"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..dom.types import LogicalAxes
        from ..dom.types import PhysicalAxes
        from ..dom.types import PseudoType
        from ..page.types import FrameId
        # Rebuild models now that imports are available
        PseudoElementMatches.model_rebuild()
        CSSAnimationStyle.model_rebuild()
        InheritedStyleEntry.model_rebuild()
        InheritedAnimatedStyleEntry.model_rebuild()
        InheritedPseudoElementMatches.model_rebuild()
        RuleMatch.model_rebuild()
        Value.model_rebuild()
        Specificity.model_rebuild()
        SelectorList.model_rebuild()
        CSSStyleSheetHeader.model_rebuild()
        CSSRule.model_rebuild()
        RuleUsage.model_rebuild()
        SourceRange.model_rebuild()
        ShorthandEntry.model_rebuild()
        CSSComputedStyleProperty.model_rebuild()
        CSSStyle.model_rebuild()
        CSSProperty.model_rebuild()
        CSSMedia.model_rebuild()
        MediaQuery.model_rebuild()
        MediaQueryExpression.model_rebuild()
        CSSContainerQuery.model_rebuild()
        CSSSupports.model_rebuild()
        CSSScope.model_rebuild()
        CSSLayer.model_rebuild()
        CSSStartingStyle.model_rebuild()
        CSSLayerData.model_rebuild()
        PlatformFontUsage.model_rebuild()
        FontVariationAxis.model_rebuild()
        FontFace.model_rebuild()
        CSSTryRule.model_rebuild()
        CSSPositionTryRule.model_rebuild()
        CSSKeyframesRule.model_rebuild()
        CSSPropertyRegistration.model_rebuild()
        CSSFontPaletteValuesRule.model_rebuild()
        CSSPropertyRule.model_rebuild()
        CSSFunctionParameter.model_rebuild()
        CSSFunctionConditionNode.model_rebuild()
        CSSFunctionNode.model_rebuild()
        CSSFunctionRule.model_rebuild()
        CSSKeyframeRule.model_rebuild()
        StyleDeclarationEdit.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
