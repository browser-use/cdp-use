# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CSS Domain Library"""

from typing import Any, Dict, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ...client import CDPClient
    from .commands import AddRuleParameters
    from .commands import AddRuleReturns
    from .commands import CollectClassNamesParameters
    from .commands import CollectClassNamesReturns
    from .commands import CreateStyleSheetParameters
    from .commands import CreateStyleSheetReturns
    from .commands import ForcePseudoStateParameters
    from .commands import ForceStartingStyleParameters
    from .commands import GetAnimatedStylesForNodeParameters
    from .commands import GetAnimatedStylesForNodeReturns
    from .commands import GetBackgroundColorsParameters
    from .commands import GetBackgroundColorsReturns
    from .commands import GetComputedStyleForNodeParameters
    from .commands import GetComputedStyleForNodeReturns
    from .commands import GetInlineStylesForNodeParameters
    from .commands import GetInlineStylesForNodeReturns
    from .commands import GetLayersForNodeParameters
    from .commands import GetLayersForNodeReturns
    from .commands import GetLocationForSelectorParameters
    from .commands import GetLocationForSelectorReturns
    from .commands import GetLonghandPropertiesParameters
    from .commands import GetLonghandPropertiesReturns
    from .commands import GetMatchedStylesForNodeParameters
    from .commands import GetMatchedStylesForNodeReturns
    from .commands import GetMediaQueriesReturns
    from .commands import GetPlatformFontsForNodeParameters
    from .commands import GetPlatformFontsForNodeReturns
    from .commands import GetStyleSheetTextParameters
    from .commands import GetStyleSheetTextReturns
    from .commands import ResolveValuesParameters
    from .commands import ResolveValuesReturns
    from .commands import SetContainerQueryTextParameters
    from .commands import SetContainerQueryTextReturns
    from .commands import SetEffectivePropertyValueForNodeParameters
    from .commands import SetKeyframeKeyParameters
    from .commands import SetKeyframeKeyReturns
    from .commands import SetLocalFontsEnabledParameters
    from .commands import SetMediaTextParameters
    from .commands import SetMediaTextReturns
    from .commands import SetPropertyRulePropertyNameParameters
    from .commands import SetPropertyRulePropertyNameReturns
    from .commands import SetRuleSelectorParameters
    from .commands import SetRuleSelectorReturns
    from .commands import SetScopeTextParameters
    from .commands import SetScopeTextReturns
    from .commands import SetStyleSheetTextParameters
    from .commands import SetStyleSheetTextReturns
    from .commands import SetStyleTextsParameters
    from .commands import SetStyleTextsReturns
    from .commands import SetSupportsTextParameters
    from .commands import SetSupportsTextReturns
    from .commands import StopRuleUsageTrackingReturns
    from .commands import TakeComputedStyleUpdatesReturns
    from .commands import TakeCoverageDeltaReturns
    from .commands import TrackComputedStyleUpdatesForNodeParameters
    from .commands import TrackComputedStyleUpdatesParameters

class CSSClient:
    """Client for CSS domain commands."""

    def __init__(self, client: 'CDPClient'):
        self._client = client

    async def addRule(
        self,
        params: "AddRuleParameters",
        session_id: Optional[str] = None,
    ) -> "AddRuleReturns":
        """Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the
position specified by `location`."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.addRule",
            params=params,
            session_id=session_id,
        )
        from .commands import AddRuleReturns as _AddRuleReturns
        return _AddRuleReturns.model_validate(raw_result)

    async def collectClassNames(
        self,
        params: "CollectClassNamesParameters",
        session_id: Optional[str] = None,
    ) -> "CollectClassNamesReturns":
        """Returns all class names from specified stylesheet."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.collectClassNames",
            params=params,
            session_id=session_id,
        )
        from .commands import CollectClassNamesReturns as _CollectClassNamesReturns
        return _CollectClassNamesReturns.model_validate(raw_result)

    async def createStyleSheet(
        self,
        params: "CreateStyleSheetParameters",
        session_id: Optional[str] = None,
    ) -> "CreateStyleSheetReturns":
        """Creates a new special \"via-inspector\" stylesheet in the frame with given `frameId`."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.createStyleSheet",
            params=params,
            session_id=session_id,
        )
        from .commands import CreateStyleSheetReturns as _CreateStyleSheetReturns
        return _CreateStyleSheetReturns.model_validate(raw_result)

    async def disable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Disables the CSS agent for the given page."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.disable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def enable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been
enabled until the result of this command is received."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.enable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def forcePseudoState(
        self,
        params: "ForcePseudoStateParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Ensures that the given node will have specified pseudo-classes whenever its style is computed by
the browser."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.forcePseudoState",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def forceStartingStyle(
        self,
        params: "ForceStartingStyleParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Ensures that the given node is in its starting-style state."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.forceStartingStyle",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def getBackgroundColors(
        self,
        params: "GetBackgroundColorsParameters",
        session_id: Optional[str] = None,
    ) -> "GetBackgroundColorsReturns":
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getBackgroundColors",
            params=params,
            session_id=session_id,
        )
        from .commands import GetBackgroundColorsReturns as _GetBackgroundColorsReturns
        return _GetBackgroundColorsReturns.model_validate(raw_result)

    async def getComputedStyleForNode(
        self,
        params: "GetComputedStyleForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetComputedStyleForNodeReturns":
        """Returns the computed style for a DOM node identified by `nodeId`."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getComputedStyleForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetComputedStyleForNodeReturns as _GetComputedStyleForNodeReturns
        return _GetComputedStyleForNodeReturns.model_validate(raw_result)

    async def resolveValues(
        self,
        params: "ResolveValuesParameters",
        session_id: Optional[str] = None,
    ) -> "ResolveValuesReturns":
        """Resolve the specified values in the context of the provided element.
For example, a value of '1em' is evaluated according to the computed
'font-size' of the element and a value 'calc(1px + 2px)' will be
resolved to '3px'.
If the `propertyName` was specified the `values` are resolved as if
they were property's declaration. If a value cannot be parsed according
to the provided property syntax, the value is parsed using combined
syntax as if null `propertyName` was provided. If the value cannot be
resolved even then, return the provided value without any changes."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.resolveValues",
            params=params,
            session_id=session_id,
        )
        from .commands import ResolveValuesReturns as _ResolveValuesReturns
        return _ResolveValuesReturns.model_validate(raw_result)

    async def getLonghandProperties(
        self,
        params: "GetLonghandPropertiesParameters",
        session_id: Optional[str] = None,
    ) -> "GetLonghandPropertiesReturns":
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getLonghandProperties",
            params=params,
            session_id=session_id,
        )
        from .commands import GetLonghandPropertiesReturns as _GetLonghandPropertiesReturns
        return _GetLonghandPropertiesReturns.model_validate(raw_result)

    async def getInlineStylesForNode(
        self,
        params: "GetInlineStylesForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetInlineStylesForNodeReturns":
        """Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM
attributes) for a DOM node identified by `nodeId`."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getInlineStylesForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetInlineStylesForNodeReturns as _GetInlineStylesForNodeReturns
        return _GetInlineStylesForNodeReturns.model_validate(raw_result)

    async def getAnimatedStylesForNode(
        self,
        params: "GetAnimatedStylesForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetAnimatedStylesForNodeReturns":
        """Returns the styles coming from animations & transitions
including the animation & transition styles coming from inheritance chain."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getAnimatedStylesForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetAnimatedStylesForNodeReturns as _GetAnimatedStylesForNodeReturns
        return _GetAnimatedStylesForNodeReturns.model_validate(raw_result)

    async def getMatchedStylesForNode(
        self,
        params: "GetMatchedStylesForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetMatchedStylesForNodeReturns":
        """Returns requested styles for a DOM node identified by `nodeId`."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getMatchedStylesForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetMatchedStylesForNodeReturns as _GetMatchedStylesForNodeReturns
        return _GetMatchedStylesForNodeReturns.model_validate(raw_result)

    async def getMediaQueries(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "GetMediaQueriesReturns":
        """Returns all media queries parsed by the rendering engine."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getMediaQueries",
            params=params,
            session_id=session_id,
        )
        from .commands import GetMediaQueriesReturns as _GetMediaQueriesReturns
        return _GetMediaQueriesReturns.model_validate(raw_result)

    async def getPlatformFontsForNode(
        self,
        params: "GetPlatformFontsForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetPlatformFontsForNodeReturns":
        """Requests information about platform fonts which we used to render child TextNodes in the given
node."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getPlatformFontsForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetPlatformFontsForNodeReturns as _GetPlatformFontsForNodeReturns
        return _GetPlatformFontsForNodeReturns.model_validate(raw_result)

    async def getStyleSheetText(
        self,
        params: "GetStyleSheetTextParameters",
        session_id: Optional[str] = None,
    ) -> "GetStyleSheetTextReturns":
        """Returns the current textual content for a stylesheet."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getStyleSheetText",
            params=params,
            session_id=session_id,
        )
        from .commands import GetStyleSheetTextReturns as _GetStyleSheetTextReturns
        return _GetStyleSheetTextReturns.model_validate(raw_result)

    async def getLayersForNode(
        self,
        params: "GetLayersForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "GetLayersForNodeReturns":
        """Returns all layers parsed by the rendering engine for the tree scope of a node.
Given a DOM element identified by nodeId, getLayersForNode returns the root
layer for the nearest ancestor document or shadow root. The layer root contains
the full layer tree for the tree scope and their ordering."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getLayersForNode",
            params=params,
            session_id=session_id,
        )
        from .commands import GetLayersForNodeReturns as _GetLayersForNodeReturns
        return _GetLayersForNodeReturns.model_validate(raw_result)

    async def getLocationForSelector(
        self,
        params: "GetLocationForSelectorParameters",
        session_id: Optional[str] = None,
    ) -> "GetLocationForSelectorReturns":
        """Given a CSS selector text and a style sheet ID, getLocationForSelector
returns an array of locations of the CSS selector in the style sheet."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.getLocationForSelector",
            params=params,
            session_id=session_id,
        )
        from .commands import GetLocationForSelectorReturns as _GetLocationForSelectorReturns
        return _GetLocationForSelectorReturns.model_validate(raw_result)

    async def trackComputedStyleUpdatesForNode(
        self,
        params: Optional["TrackComputedStyleUpdatesForNodeParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Starts tracking the given node for the computed style updates
and whenever the computed style is updated for node, it queues
a `computedStyleUpdated` event with throttling.
There can only be 1 node tracked for computed style updates
so passing a new node id removes tracking from the previous node.
Pass `undefined` to disable tracking."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.trackComputedStyleUpdatesForNode",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def trackComputedStyleUpdates(
        self,
        params: "TrackComputedStyleUpdatesParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Starts tracking the given computed styles for updates. The specified array of properties
replaces the one previously specified. Pass empty array to disable tracking.
Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.
The changes to computed style properties are only tracked for nodes pushed to the front-end
by the DOM agent. If no changes to the tracked properties occur after the node has been pushed
to the front-end, no updates will be issued for the node."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.trackComputedStyleUpdates",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def takeComputedStyleUpdates(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "TakeComputedStyleUpdatesReturns":
        """Polls the next batch of computed style updates."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.takeComputedStyleUpdates",
            params=params,
            session_id=session_id,
        )
        from .commands import TakeComputedStyleUpdatesReturns as _TakeComputedStyleUpdatesReturns
        return _TakeComputedStyleUpdatesReturns.model_validate(raw_result)

    async def setEffectivePropertyValueForNode(
        self,
        params: "SetEffectivePropertyValueForNodeParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Find a rule with the given active property for the given node and set the new value for this
property"""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setEffectivePropertyValueForNode",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setPropertyRulePropertyName(
        self,
        params: "SetPropertyRulePropertyNameParameters",
        session_id: Optional[str] = None,
    ) -> "SetPropertyRulePropertyNameReturns":
        """Modifies the property rule property name."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setPropertyRulePropertyName",
            params=params,
            session_id=session_id,
        )
        from .commands import SetPropertyRulePropertyNameReturns as _SetPropertyRulePropertyNameReturns
        return _SetPropertyRulePropertyNameReturns.model_validate(raw_result)

    async def setKeyframeKey(
        self,
        params: "SetKeyframeKeyParameters",
        session_id: Optional[str] = None,
    ) -> "SetKeyframeKeyReturns":
        """Modifies the keyframe rule key text."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setKeyframeKey",
            params=params,
            session_id=session_id,
        )
        from .commands import SetKeyframeKeyReturns as _SetKeyframeKeyReturns
        return _SetKeyframeKeyReturns.model_validate(raw_result)

    async def setMediaText(
        self,
        params: "SetMediaTextParameters",
        session_id: Optional[str] = None,
    ) -> "SetMediaTextReturns":
        """Modifies the rule selector."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setMediaText",
            params=params,
            session_id=session_id,
        )
        from .commands import SetMediaTextReturns as _SetMediaTextReturns
        return _SetMediaTextReturns.model_validate(raw_result)

    async def setContainerQueryText(
        self,
        params: "SetContainerQueryTextParameters",
        session_id: Optional[str] = None,
    ) -> "SetContainerQueryTextReturns":
        """Modifies the expression of a container query."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setContainerQueryText",
            params=params,
            session_id=session_id,
        )
        from .commands import SetContainerQueryTextReturns as _SetContainerQueryTextReturns
        return _SetContainerQueryTextReturns.model_validate(raw_result)

    async def setSupportsText(
        self,
        params: "SetSupportsTextParameters",
        session_id: Optional[str] = None,
    ) -> "SetSupportsTextReturns":
        """Modifies the expression of a supports at-rule."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setSupportsText",
            params=params,
            session_id=session_id,
        )
        from .commands import SetSupportsTextReturns as _SetSupportsTextReturns
        return _SetSupportsTextReturns.model_validate(raw_result)

    async def setScopeText(
        self,
        params: "SetScopeTextParameters",
        session_id: Optional[str] = None,
    ) -> "SetScopeTextReturns":
        """Modifies the expression of a scope at-rule."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setScopeText",
            params=params,
            session_id=session_id,
        )
        from .commands import SetScopeTextReturns as _SetScopeTextReturns
        return _SetScopeTextReturns.model_validate(raw_result)

    async def setRuleSelector(
        self,
        params: "SetRuleSelectorParameters",
        session_id: Optional[str] = None,
    ) -> "SetRuleSelectorReturns":
        """Modifies the rule selector."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setRuleSelector",
            params=params,
            session_id=session_id,
        )
        from .commands import SetRuleSelectorReturns as _SetRuleSelectorReturns
        return _SetRuleSelectorReturns.model_validate(raw_result)

    async def setStyleSheetText(
        self,
        params: "SetStyleSheetTextParameters",
        session_id: Optional[str] = None,
    ) -> "SetStyleSheetTextReturns":
        """Sets the new stylesheet text."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setStyleSheetText",
            params=params,
            session_id=session_id,
        )
        from .commands import SetStyleSheetTextReturns as _SetStyleSheetTextReturns
        return _SetStyleSheetTextReturns.model_validate(raw_result)

    async def setStyleTexts(
        self,
        params: "SetStyleTextsParameters",
        session_id: Optional[str] = None,
    ) -> "SetStyleTextsReturns":
        """Applies specified style edits one after another in the given order."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setStyleTexts",
            params=params,
            session_id=session_id,
        )
        from .commands import SetStyleTextsReturns as _SetStyleTextsReturns
        return _SetStyleTextsReturns.model_validate(raw_result)

    async def startRuleUsageTracking(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Enables the selector recording."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.startRuleUsageTracking",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def stopRuleUsageTracking(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "StopRuleUsageTrackingReturns":
        """Stop tracking rule usage and return the list of rules that were used since last call to
`takeCoverageDelta` (or since start of coverage instrumentation)."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.stopRuleUsageTracking",
            params=params,
            session_id=session_id,
        )
        from .commands import StopRuleUsageTrackingReturns as _StopRuleUsageTrackingReturns
        return _StopRuleUsageTrackingReturns.model_validate(raw_result)

    async def takeCoverageDelta(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "TakeCoverageDeltaReturns":
        """Obtain list of rules that became used since last call to this method (or since start of coverage
instrumentation)."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.takeCoverageDelta",
            params=params,
            session_id=session_id,
        )
        from .commands import TakeCoverageDeltaReturns as _TakeCoverageDeltaReturns
        return _TakeCoverageDeltaReturns.model_validate(raw_result)

    async def setLocalFontsEnabled(
        self,
        params: "SetLocalFontsEnabledParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Enables/disables rendering of local CSS fonts (enabled by default)."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CSS.setLocalFontsEnabled",
            params=params,
            session_id=session_id,
        )
        return raw_result


