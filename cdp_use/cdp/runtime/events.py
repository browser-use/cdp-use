# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Runtime Domain Events"""

from pydantic import BaseModel
from typing import Any, Dict, List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import ExceptionDetails
    from .types import ExecutionContextDescription
    from .types import ExecutionContextId
    from .types import RemoteObject
    from .types import StackTrace
    from .types import Timestamp

class BindingCalledEvent(BaseModel):
    """Notification is issued every time when binding is called."""
    name: "str"
    payload: "str"
    executionContextId: "ExecutionContextId"



class ConsoleAPICalledEvent(BaseModel):
    """Issued when console API was called."""
    type: "str"
    args: "List[RemoteObject]"
    executionContextId: "ExecutionContextId"
    timestamp: "Timestamp"
    stackTrace: "Optional[StackTrace]" = None
    context: "Optional[str]" = None



class ExceptionRevokedEvent(BaseModel):
    """Issued when unhandled exception was revoked."""
    reason: "str"
    exceptionId: "int"



class ExceptionThrownEvent(BaseModel):
    """Issued when exception was thrown and unhandled."""
    timestamp: "Timestamp"
    exceptionDetails: "ExceptionDetails"



class ExecutionContextCreatedEvent(BaseModel):
    """Issued when new execution context is created."""
    context: "ExecutionContextDescription"



class ExecutionContextDestroyedEvent(BaseModel):
    """Issued when execution context is destroyed."""
    executionContextId: "ExecutionContextId"
    executionContextUniqueId: "str"



class ExecutionContextsClearedEvent(BaseModel):
    """Issued when all executionContexts were cleared in browser"""
    pass



class InspectRequestedEvent(BaseModel):
    """Issued when object should be inspected (for example, as a result of inspect() command line API
call)."""
    object: "RemoteObject"
    hints: "Dict[str, Any]"
    executionContextId: "Optional[ExecutionContextId]" = None


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import ExceptionDetails
        from .types import ExecutionContextDescription
        from .types import ExecutionContextId
        from .types import RemoteObject
        from .types import StackTrace
        from .types import Timestamp
        # Rebuild models now that imports are available
        BindingCalledEvent.model_rebuild()
        ConsoleAPICalledEvent.model_rebuild()
        ExceptionRevokedEvent.model_rebuild()
        ExceptionThrownEvent.model_rebuild()
        ExecutionContextCreatedEvent.model_rebuild()
        ExecutionContextDestroyedEvent.model_rebuild()
        ExecutionContextsClearedEvent.model_rebuild()
        InspectRequestedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
