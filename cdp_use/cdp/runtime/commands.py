# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Runtime Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import CallArgument
    from .types import ExceptionDetails
    from .types import ExecutionContextId
    from .types import InternalPropertyDescriptor
    from .types import PrivatePropertyDescriptor
    from .types import PropertyDescriptor
    from .types import RemoteObject
    from .types import RemoteObjectId
    from .types import ScriptId
    from .types import SerializationOptions
    from .types import TimeDelta

class AwaitPromiseParameters(TypedDict):
    promiseObjectId: "RemoteObjectId"
    returnByValue: "NotRequired[bool]"
    generatePreview: "NotRequired[bool]"


class AwaitPromiseReturns(BaseModel):
    result: "RemoteObject"
    exceptionDetails: "Optional[ExceptionDetails]" = None



class CallFunctionOnParameters(TypedDict):
    functionDeclaration: "str"
    objectId: "NotRequired[RemoteObjectId]"
    arguments: "NotRequired[List[CallArgument]]"
    silent: "NotRequired[bool]"
    returnByValue: "NotRequired[bool]"
    generatePreview: "NotRequired[bool]"
    userGesture: "NotRequired[bool]"
    awaitPromise: "NotRequired[bool]"
    executionContextId: "NotRequired[ExecutionContextId]"
    objectGroup: "NotRequired[str]"
    throwOnSideEffect: "NotRequired[bool]"
    uniqueContextId: "NotRequired[str]"
    serializationOptions: "NotRequired[SerializationOptions]"


class CallFunctionOnReturns(BaseModel):
    result: "RemoteObject"
    exceptionDetails: "Optional[ExceptionDetails]" = None



class CompileScriptParameters(TypedDict):
    expression: "str"
    sourceURL: "str"
    persistScript: "bool"
    executionContextId: "NotRequired[ExecutionContextId]"


class CompileScriptReturns(BaseModel):
    scriptId: "Optional[ScriptId]" = None
    exceptionDetails: "Optional[ExceptionDetails]" = None



class EvaluateParameters(TypedDict):
    expression: "str"
    objectGroup: "NotRequired[str]"
    includeCommandLineAPI: "NotRequired[bool]"
    silent: "NotRequired[bool]"
    contextId: "NotRequired[ExecutionContextId]"
    returnByValue: "NotRequired[bool]"
    generatePreview: "NotRequired[bool]"
    userGesture: "NotRequired[bool]"
    awaitPromise: "NotRequired[bool]"
    throwOnSideEffect: "NotRequired[bool]"
    timeout: "NotRequired[TimeDelta]"
    disableBreaks: "NotRequired[bool]"
    replMode: "NotRequired[bool]"
    allowUnsafeEvalBlockedByCSP: "NotRequired[bool]"
    uniqueContextId: "NotRequired[str]"
    serializationOptions: "NotRequired[SerializationOptions]"


class EvaluateReturns(BaseModel):
    result: "RemoteObject"
    exceptionDetails: "Optional[ExceptionDetails]" = None



class GetIsolateIdReturns(BaseModel):
    id: "str"



class GetHeapUsageReturns(BaseModel):
    usedSize: "float"
    totalSize: "float"
    embedderHeapUsedSize: "float"
    backingStorageSize: "float"



class GetPropertiesParameters(TypedDict):
    objectId: "RemoteObjectId"
    ownProperties: "NotRequired[bool]"
    accessorPropertiesOnly: "NotRequired[bool]"
    generatePreview: "NotRequired[bool]"
    nonIndexedPropertiesOnly: "NotRequired[bool]"


class GetPropertiesReturns(BaseModel):
    result: "List[PropertyDescriptor]"
    internalProperties: "Optional[List[InternalPropertyDescriptor]]" = None
    privateProperties: "Optional[List[PrivatePropertyDescriptor]]" = None
    exceptionDetails: "Optional[ExceptionDetails]" = None



class GlobalLexicalScopeNamesParameters(TypedDict, total=False):
    executionContextId: "ExecutionContextId"


class GlobalLexicalScopeNamesReturns(BaseModel):
    names: "List[str]"



class QueryObjectsParameters(TypedDict):
    prototypeObjectId: "RemoteObjectId"
    objectGroup: "NotRequired[str]"


class QueryObjectsReturns(BaseModel):
    objects: "RemoteObject"



class ReleaseObjectParameters(TypedDict):
    objectId: "RemoteObjectId"





class ReleaseObjectGroupParameters(TypedDict):
    objectGroup: "str"





class RunScriptParameters(TypedDict):
    scriptId: "ScriptId"
    executionContextId: "NotRequired[ExecutionContextId]"
    objectGroup: "NotRequired[str]"
    silent: "NotRequired[bool]"
    includeCommandLineAPI: "NotRequired[bool]"
    returnByValue: "NotRequired[bool]"
    generatePreview: "NotRequired[bool]"
    awaitPromise: "NotRequired[bool]"


class RunScriptReturns(BaseModel):
    result: "RemoteObject"
    exceptionDetails: "Optional[ExceptionDetails]" = None



class SetAsyncCallStackDepthParameters(TypedDict):
    maxDepth: "int"





class SetCustomObjectFormatterEnabledParameters(TypedDict):
    enabled: "bool"





class SetMaxCallStackSizeToCaptureParameters(TypedDict):
    size: "int"





class AddBindingParameters(TypedDict):
    name: "str"
    executionContextId: "NotRequired[ExecutionContextId]"
    executionContextName: "NotRequired[str]"





class RemoveBindingParameters(TypedDict):
    name: "str"





class GetExceptionDetailsParameters(TypedDict):
    errorObjectId: "RemoteObjectId"


class GetExceptionDetailsReturns(BaseModel):
    exceptionDetails: "Optional[ExceptionDetails]" = None


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import CallArgument
        from .types import ExceptionDetails
        from .types import ExecutionContextId
        from .types import InternalPropertyDescriptor
        from .types import PrivatePropertyDescriptor
        from .types import PropertyDescriptor
        from .types import RemoteObject
        from .types import RemoteObjectId
        from .types import ScriptId
        from .types import SerializationOptions
        from .types import TimeDelta
        # Rebuild models now that imports are available
        AwaitPromiseReturns.model_rebuild()
        CallFunctionOnReturns.model_rebuild()
        CompileScriptReturns.model_rebuild()
        EvaluateReturns.model_rebuild()
        GetIsolateIdReturns.model_rebuild()
        GetHeapUsageReturns.model_rebuild()
        GetPropertiesReturns.model_rebuild()
        GlobalLexicalScopeNamesReturns.model_rebuild()
        QueryObjectsReturns.model_rebuild()
        RunScriptReturns.model_rebuild()
        GetExceptionDetailsReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
