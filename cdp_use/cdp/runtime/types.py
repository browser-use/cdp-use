# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Runtime Domain Types"""

from pydantic import BaseModel
from typing import Any, Dict, List, Optional

"""Unique script identifier."""
ScriptId = str



class SerializationOptions(BaseModel):
    """Represents options for serialization. Overrides `generatePreview` and `returnByValue`."""
    serialization: "str"
    maxDepth: "Optional[int]" = None
    additionalParameters: "Optional[Dict[str, Any]]" = None



class DeepSerializedValue(BaseModel):
    """Represents deep serialized value."""
    type: "str"
    value: "Optional[Any]" = None
    objectId: "Optional[str]" = None
    weakLocalObjectReference: "Optional[int]" = None



"""Unique object identifier."""
RemoteObjectId = str



"""Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,
`-Infinity`, and bigint literals."""
UnserializableValue = str



class RemoteObject(BaseModel):
    """Mirror object referencing original JavaScript object."""
    type: "str"
    subtype: "Optional[str]" = None
    className: "Optional[str]" = None
    value: "Optional[Any]" = None
    unserializableValue: "Optional[UnserializableValue]" = None
    description: "Optional[str]" = None
    deepSerializedValue: "Optional[DeepSerializedValue]" = None
    objectId: "Optional[RemoteObjectId]" = None
    preview: "Optional[ObjectPreview]" = None
    customPreview: "Optional[CustomPreview]" = None



class CustomPreview(BaseModel):
    header: "str"
    bodyGetterId: "Optional[RemoteObjectId]" = None



class ObjectPreview(BaseModel):
    """Object containing abbreviated remote object value."""
    type: "str"
    overflow: "bool"
    properties: "List[PropertyPreview]"
    subtype: "Optional[str]" = None
    description: "Optional[str]" = None
    entries: "Optional[List[EntryPreview]]" = None



class PropertyPreview(BaseModel):
    name: "str"
    type: "str"
    value: "Optional[str]" = None
    valuePreview: "Optional[ObjectPreview]" = None
    subtype: "Optional[str]" = None



class EntryPreview(BaseModel):
    value: "ObjectPreview"
    key: "Optional[ObjectPreview]" = None



class PropertyDescriptor(BaseModel):
    """Object property descriptor."""
    name: "str"
    configurable: "bool"
    enumerable: "bool"
    value: "Optional[RemoteObject]" = None
    writable: "Optional[bool]" = None
    get: "Optional[RemoteObject]" = None
    set: "Optional[RemoteObject]" = None
    wasThrown: "Optional[bool]" = None
    isOwn: "Optional[bool]" = None
    symbol: "Optional[RemoteObject]" = None



class InternalPropertyDescriptor(BaseModel):
    """Object internal property descriptor. This property isn't normally visible in JavaScript code."""
    name: "str"
    value: "Optional[RemoteObject]" = None



class PrivatePropertyDescriptor(BaseModel):
    """Object private field descriptor."""
    name: "str"
    value: "Optional[RemoteObject]" = None
    get: "Optional[RemoteObject]" = None
    set: "Optional[RemoteObject]" = None



class CallArgument(BaseModel):
    """Represents function call argument. Either remote object id `objectId`, primitive `value`,
unserializable primitive value or neither of (for undefined) them should be specified."""
    value: "Optional[Any]" = None
    unserializableValue: "Optional[UnserializableValue]" = None
    objectId: "Optional[RemoteObjectId]" = None



"""Id of an execution context."""
ExecutionContextId = int



class ExecutionContextDescription(BaseModel):
    """Description of an isolated world."""
    id: "ExecutionContextId"
    origin: "str"
    name: "str"
    uniqueId: "str"
    auxData: "Optional[Dict[str, Any]]" = None



class ExceptionDetails(BaseModel):
    """Detailed information about exception (or error) that was thrown during script compilation or
execution."""
    exceptionId: "int"
    text: "str"
    lineNumber: "int"
    columnNumber: "int"
    scriptId: "Optional[ScriptId]" = None
    url: "Optional[str]" = None
    stackTrace: "Optional[StackTrace]" = None
    exception: "Optional[RemoteObject]" = None
    executionContextId: "Optional[ExecutionContextId]" = None
    exceptionMetaData: "Optional[Dict[str, Any]]" = None



"""Number of milliseconds since epoch."""
Timestamp = float



"""Number of milliseconds."""
TimeDelta = float



class CallFrame(BaseModel):
    """Stack entry for runtime errors and assertions."""
    functionName: "str"
    scriptId: "ScriptId"
    url: "str"
    lineNumber: "int"
    columnNumber: "int"



class StackTrace(BaseModel):
    """Call frames for assertions or error messages."""
    callFrames: "List[CallFrame]"
    description: "Optional[str]" = None
    parent: "Optional[StackTrace]" = None
    parentId: "Optional[StackTraceId]" = None



"""Unique identifier of current debugger."""
UniqueDebuggerId = str



class StackTraceId(BaseModel):
    """If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages."""
    id: "str"
    debuggerId: "Optional[UniqueDebuggerId]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        SerializationOptions.model_rebuild()
        DeepSerializedValue.model_rebuild()
        RemoteObject.model_rebuild()
        CustomPreview.model_rebuild()
        ObjectPreview.model_rebuild()
        PropertyPreview.model_rebuild()
        EntryPreview.model_rebuild()
        PropertyDescriptor.model_rebuild()
        InternalPropertyDescriptor.model_rebuild()
        PrivatePropertyDescriptor.model_rebuild()
        CallArgument.model_rebuild()
        ExecutionContextDescription.model_rebuild()
        ExceptionDetails.model_rebuild()
        CallFrame.model_rebuild()
        StackTrace.model_rebuild()
        StackTraceId.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
