# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Overlay Domain Commands"""

from pydantic import BaseModel
from typing import Any, Dict, List, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..dom.types import NodeId
    from ..dom.types import Quad
    from ..dom.types import RGBA
    from ..page.types import FrameId
    from ..runtime.types import RemoteObjectId
    from .types import ColorFormat
    from .types import ContainerQueryHighlightConfig
    from .types import FlexNodeHighlightConfig
    from .types import GridNodeHighlightConfig
    from .types import HighlightConfig
    from .types import HingeConfig
    from .types import InspectMode
    from .types import IsolatedElementHighlightConfig
    from .types import ScrollSnapHighlightConfig
    from .types import SourceOrderConfig
    from .types import WindowControlsOverlayConfig

class GetHighlightObjectForTestParameters(TypedDict):
    nodeId: "NodeId"
    includeDistance: "NotRequired[bool]"
    includeStyle: "NotRequired[bool]"
    colorFormat: "NotRequired[Union[ColorFormat, str]]"
    showAccessibilityInfo: "NotRequired[bool]"


class GetHighlightObjectForTestReturns(BaseModel):
    highlight: "Dict[str, Any]"



class GetGridHighlightObjectsForTestParameters(TypedDict):
    nodeIds: "List[NodeId]"


class GetGridHighlightObjectsForTestReturns(BaseModel):
    highlights: "Dict[str, Any]"



class GetSourceOrderHighlightObjectForTestParameters(TypedDict):
    nodeId: "NodeId"


class GetSourceOrderHighlightObjectForTestReturns(BaseModel):
    highlight: "Dict[str, Any]"



class HighlightFrameParameters(TypedDict):
    frameId: "FrameId"
    contentColor: "NotRequired[RGBA]"
    contentOutlineColor: "NotRequired[RGBA]"





class HighlightNodeParameters(TypedDict):
    highlightConfig: "HighlightConfig"
    nodeId: "NotRequired[NodeId]"
    backendNodeId: "NotRequired[BackendNodeId]"
    objectId: "NotRequired[RemoteObjectId]"
    selector: "NotRequired[str]"





class HighlightQuadParameters(TypedDict):
    quad: "Quad"
    color: "NotRequired[RGBA]"
    outlineColor: "NotRequired[RGBA]"





class HighlightRectParameters(TypedDict):
    x: "int"
    y: "int"
    width: "int"
    height: "int"
    color: "NotRequired[RGBA]"
    outlineColor: "NotRequired[RGBA]"





class HighlightSourceOrderParameters(TypedDict):
    sourceOrderConfig: "SourceOrderConfig"
    nodeId: "NotRequired[NodeId]"
    backendNodeId: "NotRequired[BackendNodeId]"
    objectId: "NotRequired[RemoteObjectId]"





class SetInspectModeParameters(TypedDict):
    mode: "Union[InspectMode, str]"
    highlightConfig: "NotRequired[HighlightConfig]"





class SetShowAdHighlightsParameters(TypedDict):
    show: "bool"





class SetPausedInDebuggerMessageParameters(TypedDict, total=False):
    message: "str"





class SetShowDebugBordersParameters(TypedDict):
    show: "bool"





class SetShowFPSCounterParameters(TypedDict):
    show: "bool"





class SetShowGridOverlaysParameters(TypedDict):
    gridNodeHighlightConfigs: "List[GridNodeHighlightConfig]"





class SetShowFlexOverlaysParameters(TypedDict):
    flexNodeHighlightConfigs: "List[FlexNodeHighlightConfig]"





class SetShowScrollSnapOverlaysParameters(TypedDict):
    scrollSnapHighlightConfigs: "List[ScrollSnapHighlightConfig]"





class SetShowContainerQueryOverlaysParameters(TypedDict):
    containerQueryHighlightConfigs: "List[ContainerQueryHighlightConfig]"





class SetShowPaintRectsParameters(TypedDict):
    result: "bool"





class SetShowLayoutShiftRegionsParameters(TypedDict):
    result: "bool"





class SetShowScrollBottleneckRectsParameters(TypedDict):
    show: "bool"





class SetShowHitTestBordersParameters(TypedDict):
    show: "bool"





class SetShowWebVitalsParameters(TypedDict):
    show: "bool"





class SetShowViewportSizeOnResizeParameters(TypedDict):
    show: "bool"





class SetShowHingeParameters(TypedDict, total=False):
    hingeConfig: "HingeConfig"





class SetShowIsolatedElementsParameters(TypedDict):
    isolatedElementHighlightConfigs: "List[IsolatedElementHighlightConfig]"





class SetShowWindowControlsOverlayParameters(TypedDict, total=False):
    windowControlsOverlayConfig: "WindowControlsOverlayConfig"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..dom.types import NodeId
        from ..dom.types import Quad
        from ..dom.types import RGBA
        from ..page.types import FrameId
        from ..runtime.types import RemoteObjectId
        from .types import ColorFormat
        from .types import ContainerQueryHighlightConfig
        from .types import FlexNodeHighlightConfig
        from .types import GridNodeHighlightConfig
        from .types import HighlightConfig
        from .types import HingeConfig
        from .types import InspectMode
        from .types import IsolatedElementHighlightConfig
        from .types import ScrollSnapHighlightConfig
        from .types import SourceOrderConfig
        from .types import WindowControlsOverlayConfig
        # Rebuild models now that imports are available
        GetHighlightObjectForTestReturns.model_rebuild()
        GetGridHighlightObjectsForTestReturns.model_rebuild()
        GetSourceOrderHighlightObjectForTestReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
