# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Overlay Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import NodeId
    from ..dom.types import RGBA
    from ..dom.types import Rect

class SourceOrderConfig(BaseModel):
    """Configuration data for drawing the source order of an elements children."""
    parentOutlineColor: "RGBA"
    childOutlineColor: "RGBA"



class GridHighlightConfig(BaseModel):
    """Configuration data for the highlighting of Grid elements."""
    showGridExtensionLines: "Optional[bool]" = None
    showPositiveLineNumbers: "Optional[bool]" = None
    showNegativeLineNumbers: "Optional[bool]" = None
    showAreaNames: "Optional[bool]" = None
    showLineNames: "Optional[bool]" = None
    showTrackSizes: "Optional[bool]" = None
    gridBorderColor: "Optional[RGBA]" = None
    cellBorderColor: "Optional[RGBA]" = None
    rowLineColor: "Optional[RGBA]" = None
    columnLineColor: "Optional[RGBA]" = None
    gridBorderDash: "Optional[bool]" = None
    cellBorderDash: "Optional[bool]" = None
    rowLineDash: "Optional[bool]" = None
    columnLineDash: "Optional[bool]" = None
    rowGapColor: "Optional[RGBA]" = None
    rowHatchColor: "Optional[RGBA]" = None
    columnGapColor: "Optional[RGBA]" = None
    columnHatchColor: "Optional[RGBA]" = None
    areaBorderColor: "Optional[RGBA]" = None
    gridBackgroundColor: "Optional[RGBA]" = None



class FlexContainerHighlightConfig(BaseModel):
    """Configuration data for the highlighting of Flex container elements."""
    containerBorder: "Optional[LineStyle]" = None
    lineSeparator: "Optional[LineStyle]" = None
    itemSeparator: "Optional[LineStyle]" = None
    mainDistributedSpace: "Optional[BoxStyle]" = None
    crossDistributedSpace: "Optional[BoxStyle]" = None
    rowGapSpace: "Optional[BoxStyle]" = None
    columnGapSpace: "Optional[BoxStyle]" = None
    crossAlignment: "Optional[LineStyle]" = None



class FlexItemHighlightConfig(BaseModel):
    """Configuration data for the highlighting of Flex item elements."""
    baseSizeBox: "Optional[BoxStyle]" = None
    baseSizeBorder: "Optional[LineStyle]" = None
    flexibilityArrow: "Optional[LineStyle]" = None



class LineStyle(BaseModel):
    """Style information for drawing a line."""
    color: "Optional[RGBA]" = None
    pattern: "Optional[str]" = None



class BoxStyle(BaseModel):
    """Style information for drawing a box."""
    fillColor: "Optional[RGBA]" = None
    hatchColor: "Optional[RGBA]" = None



class ContrastAlgorithm(Enum):
    AA = "aa"
    AAA = "aaa"
    APCA = "apca"



class HighlightConfig(BaseModel):
    """Configuration data for the highlighting of page elements."""
    showInfo: "Optional[bool]" = None
    showStyles: "Optional[bool]" = None
    showRulers: "Optional[bool]" = None
    showAccessibilityInfo: "Optional[bool]" = None
    showExtensionLines: "Optional[bool]" = None
    contentColor: "Optional[RGBA]" = None
    paddingColor: "Optional[RGBA]" = None
    borderColor: "Optional[RGBA]" = None
    marginColor: "Optional[RGBA]" = None
    eventTargetColor: "Optional[RGBA]" = None
    shapeColor: "Optional[RGBA]" = None
    shapeMarginColor: "Optional[RGBA]" = None
    cssGridColor: "Optional[RGBA]" = None
    colorFormat: "Optional[Union[ColorFormat, str]]" = None
    gridHighlightConfig: "Optional[GridHighlightConfig]" = None
    flexContainerHighlightConfig: "Optional[FlexContainerHighlightConfig]" = None
    flexItemHighlightConfig: "Optional[FlexItemHighlightConfig]" = None
    contrastAlgorithm: "Optional[Union[ContrastAlgorithm, str]]" = None
    containerQueryContainerHighlightConfig: "Optional[ContainerQueryContainerHighlightConfig]" = None



class ColorFormat(Enum):
    RGB = "rgb"
    HSL = "hsl"
    HWB = "hwb"
    HEX = "hex"



class GridNodeHighlightConfig(BaseModel):
    """Configurations for Persistent Grid Highlight"""
    gridHighlightConfig: "GridHighlightConfig"
    nodeId: "NodeId"



class FlexNodeHighlightConfig(BaseModel):
    flexContainerHighlightConfig: "FlexContainerHighlightConfig"
    nodeId: "NodeId"



class ScrollSnapContainerHighlightConfig(BaseModel):
    snapportBorder: "Optional[LineStyle]" = None
    snapAreaBorder: "Optional[LineStyle]" = None
    scrollMarginColor: "Optional[RGBA]" = None
    scrollPaddingColor: "Optional[RGBA]" = None



class ScrollSnapHighlightConfig(BaseModel):
    scrollSnapContainerHighlightConfig: "ScrollSnapContainerHighlightConfig"
    nodeId: "NodeId"



class HingeConfig(BaseModel):
    """Configuration for dual screen hinge"""
    rect: "Rect"
    contentColor: "Optional[RGBA]" = None
    outlineColor: "Optional[RGBA]" = None



class WindowControlsOverlayConfig(BaseModel):
    """Configuration for Window Controls Overlay"""
    showCSS: "bool"
    selectedPlatform: "str"
    themeColor: "str"



class ContainerQueryHighlightConfig(BaseModel):
    containerQueryContainerHighlightConfig: "ContainerQueryContainerHighlightConfig"
    nodeId: "NodeId"



class ContainerQueryContainerHighlightConfig(BaseModel):
    containerBorder: "Optional[LineStyle]" = None
    descendantBorder: "Optional[LineStyle]" = None



class IsolatedElementHighlightConfig(BaseModel):
    isolationModeHighlightConfig: "IsolationModeHighlightConfig"
    nodeId: "NodeId"



class IsolationModeHighlightConfig(BaseModel):
    resizerColor: "Optional[RGBA]" = None
    resizerHandleColor: "Optional[RGBA]" = None
    maskColor: "Optional[RGBA]" = None



class InspectMode(Enum):
    SEARCHFORNODE = "searchForNode"
    SEARCHFORUASHADOWDOM = "searchForUAShadowDOM"
    CAPTUREAREASCREENSHOT = "captureAreaScreenshot"
    NONE = "none"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import NodeId
        from ..dom.types import RGBA
        from ..dom.types import Rect
        # Rebuild models now that imports are available
        SourceOrderConfig.model_rebuild()
        GridHighlightConfig.model_rebuild()
        FlexContainerHighlightConfig.model_rebuild()
        FlexItemHighlightConfig.model_rebuild()
        LineStyle.model_rebuild()
        BoxStyle.model_rebuild()
        HighlightConfig.model_rebuild()
        GridNodeHighlightConfig.model_rebuild()
        FlexNodeHighlightConfig.model_rebuild()
        ScrollSnapContainerHighlightConfig.model_rebuild()
        ScrollSnapHighlightConfig.model_rebuild()
        HingeConfig.model_rebuild()
        WindowControlsOverlayConfig.model_rebuild()
        ContainerQueryHighlightConfig.model_rebuild()
        ContainerQueryContainerHighlightConfig.model_rebuild()
        IsolatedElementHighlightConfig.model_rebuild()
        IsolationModeHighlightConfig.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
