# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Preload Domain Events"""

from pydantic import BaseModel
from typing import List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import LoaderId
    from ..network.types import RequestId
    from ..page.types import FrameId
    from .types import PrefetchStatus
    from .types import PreloadPipelineId
    from .types import PreloadingAttemptKey
    from .types import PreloadingAttemptSource
    from .types import PreloadingStatus
    from .types import PrerenderFinalStatus
    from .types import PrerenderMismatchedHeaders
    from .types import RuleSet
    from .types import RuleSetId

class RuleSetUpdatedEvent(BaseModel):
    """Upsert. Currently, it is only emitted when a rule set added."""
    ruleSet: "RuleSet"



class RuleSetRemovedEvent(BaseModel):
    id: "RuleSetId"



class PreloadEnabledStateUpdatedEvent(BaseModel):
    """Fired when a preload enabled state is updated."""
    disabledByPreference: "bool"
    disabledByDataSaver: "bool"
    disabledByBatterySaver: "bool"
    disabledByHoldbackPrefetchSpeculationRules: "bool"
    disabledByHoldbackPrerenderSpeculationRules: "bool"



class PrefetchStatusUpdatedEvent(BaseModel):
    """Fired when a prefetch attempt is updated."""
    key: "PreloadingAttemptKey"
    pipelineId: "PreloadPipelineId"
    initiatingFrameId: "FrameId"
    prefetchUrl: "str"
    status: "Union[PreloadingStatus, str]"
    prefetchStatus: "Union[PrefetchStatus, str]"
    requestId: "RequestId"



class PrerenderStatusUpdatedEvent(BaseModel):
    """Fired when a prerender attempt is updated."""
    key: "PreloadingAttemptKey"
    pipelineId: "PreloadPipelineId"
    status: "Union[PreloadingStatus, str]"
    prerenderStatus: "Optional[Union[PrerenderFinalStatus, str]]" = None
    disallowedMojoInterface: "Optional[str]" = None
    mismatchedHeaders: "Optional[List[PrerenderMismatchedHeaders]]" = None



class PreloadingAttemptSourcesUpdatedEvent(BaseModel):
    """Send a list of sources for all preloading attempts in a document."""
    loaderId: "LoaderId"
    preloadingAttemptSources: "List[PreloadingAttemptSource]"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..network.types import LoaderId
        from ..network.types import RequestId
        from ..page.types import FrameId
        from .types import PrefetchStatus
        from .types import PreloadPipelineId
        from .types import PreloadingAttemptKey
        from .types import PreloadingAttemptSource
        from .types import PreloadingStatus
        from .types import PrerenderFinalStatus
        from .types import PrerenderMismatchedHeaders
        from .types import RuleSet
        from .types import RuleSetId
        # Rebuild models now that imports are available
        RuleSetUpdatedEvent.model_rebuild()
        RuleSetRemovedEvent.model_rebuild()
        PreloadEnabledStateUpdatedEvent.model_rebuild()
        PrefetchStatusUpdatedEvent.model_rebuild()
        PrerenderStatusUpdatedEvent.model_rebuild()
        PreloadingAttemptSourcesUpdatedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
