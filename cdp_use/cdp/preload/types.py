# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Preload Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..network.types import LoaderId
    from ..network.types import RequestId

"""Unique id"""
RuleSetId = str



class RuleSet(BaseModel):
    """Corresponds to SpeculationRuleSet"""
    id: "RuleSetId"
    loaderId: "LoaderId"
    sourceText: "str"
    backendNodeId: "Optional[BackendNodeId]" = None
    url: "Optional[str]" = None
    requestId: "Optional[RequestId]" = None
    errorType: "Optional[RuleSetErrorType]" = None
    errorMessage: "Optional[str]" = None



class RuleSetErrorType(Enum):
    SOURCEISNOTJSONOBJECT = "SourceIsNotJsonObject"
    INVALIDRULESSKIPPED = "InvalidRulesSkipped"



class SpeculationAction(Enum):
    """The type of preloading attempted. It corresponds to
mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it
isn't being used by clients)."""
    PREFETCH = "Prefetch"
    PRERENDER = "Prerender"



class SpeculationTargetHint(Enum):
    """Corresponds to mojom::SpeculationTargetHint.
See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints"""
    BLANK = "Blank"
    SELF = "Self"



class PreloadingAttemptKey(BaseModel):
    """A key that identifies a preloading attempt.

The url used is the url specified by the trigger (i.e. the initial URL), and
not the final url that is navigated to. For example, prerendering allows
same-origin main frame navigations during the attempt, but the attempt is
still keyed with the initial URL."""
    loaderId: "LoaderId"
    action: "SpeculationAction"
    url: "str"
    targetHint: "Optional[SpeculationTargetHint]" = None



class PreloadingAttemptSource(BaseModel):
    """Lists sources for a preloading attempt, specifically the ids of rule sets
that had a speculation rule that triggered the attempt, and the
BackendNodeIds of <a href> or <area href> elements that triggered the
attempt (in the case of attempts triggered by a document rule). It is
possible for multiple rule sets and links to trigger a single attempt."""
    key: "PreloadingAttemptKey"
    ruleSetIds: "List[RuleSetId]"
    nodeIds: "List[BackendNodeId]"



"""Chrome manages different types of preloads together using a
concept of preloading pipeline. For example, if a site uses a
SpeculationRules for prerender, Chrome first starts a prefetch and
then upgrades it to prerender.

CDP events for them are emitted separately but they share
`PreloadPipelineId`."""
PreloadPipelineId = str



class PrerenderFinalStatus(Enum):
    """List of FinalStatus reasons for Prerender2."""
    ACTIVATED = "Activated"
    DESTROYED = "Destroyed"
    LOWENDDEVICE = "LowEndDevice"
    INVALIDSCHEMEREDIRECT = "InvalidSchemeRedirect"
    INVALIDSCHEMENAVIGATION = "InvalidSchemeNavigation"
    NAVIGATIONREQUESTBLOCKEDBYCSP = "NavigationRequestBlockedByCsp"
    MOJOBINDERPOLICY = "MojoBinderPolicy"
    RENDERERPROCESSCRASHED = "RendererProcessCrashed"
    RENDERERPROCESSKILLED = "RendererProcessKilled"
    DOWNLOAD = "Download"
    TRIGGERDESTROYED = "TriggerDestroyed"
    NAVIGATIONNOTCOMMITTED = "NavigationNotCommitted"
    NAVIGATIONBADHTTPSTATUS = "NavigationBadHttpStatus"
    CLIENTCERTREQUESTED = "ClientCertRequested"
    NAVIGATIONREQUESTNETWORKERROR = "NavigationRequestNetworkError"
    CANCELALLHOSTSFORTESTING = "CancelAllHostsForTesting"
    DIDFAILLOAD = "DidFailLoad"
    STOP = "Stop"
    SSLCERTIFICATEERROR = "SslCertificateError"
    LOGINAUTHREQUESTED = "LoginAuthRequested"
    UACHANGEREQUIRESRELOAD = "UaChangeRequiresReload"
    BLOCKEDBYCLIENT = "BlockedByClient"
    AUDIOOUTPUTDEVICEREQUESTED = "AudioOutputDeviceRequested"
    MIXEDCONTENT = "MixedContent"
    TRIGGERBACKGROUNDED = "TriggerBackgrounded"
    MEMORYLIMITEXCEEDED = "MemoryLimitExceeded"
    DATASAVERENABLED = "DataSaverEnabled"
    TRIGGERURLHASEFFECTIVEURL = "TriggerUrlHasEffectiveUrl"
    ACTIVATEDBEFORESTARTED = "ActivatedBeforeStarted"
    INACTIVEPAGERESTRICTION = "InactivePageRestriction"
    STARTFAILED = "StartFailed"
    TIMEOUTBACKGROUNDED = "TimeoutBackgrounded"
    CROSSSITEREDIRECTININITIALNAVIGATION = "CrossSiteRedirectInInitialNavigation"
    CROSSSITENAVIGATIONININITIALNAVIGATION = "CrossSiteNavigationInInitialNavigation"
    SAMESITECROSSORIGINREDIRECTNOTOPTINININITIALNAVIGATION = "SameSiteCrossOriginRedirectNotOptInInInitialNavigation"
    SAMESITECROSSORIGINNAVIGATIONNOTOPTINININITIALNAVIGATION = "SameSiteCrossOriginNavigationNotOptInInInitialNavigation"
    ACTIVATIONNAVIGATIONPARAMETERMISMATCH = "ActivationNavigationParameterMismatch"
    ACTIVATEDINBACKGROUND = "ActivatedInBackground"
    EMBEDDERHOSTDISALLOWED = "EmbedderHostDisallowed"
    ACTIVATIONNAVIGATIONDESTROYEDBEFORESUCCESS = "ActivationNavigationDestroyedBeforeSuccess"
    TABCLOSEDBYUSERGESTURE = "TabClosedByUserGesture"
    TABCLOSEDWITHOUTUSERGESTURE = "TabClosedWithoutUserGesture"
    PRIMARYMAINFRAMERENDERERPROCESSCRASHED = "PrimaryMainFrameRendererProcessCrashed"
    PRIMARYMAINFRAMERENDERERPROCESSKILLED = "PrimaryMainFrameRendererProcessKilled"
    ACTIVATIONFRAMEPOLICYNOTCOMPATIBLE = "ActivationFramePolicyNotCompatible"
    PRELOADINGDISABLED = "PreloadingDisabled"
    BATTERYSAVERENABLED = "BatterySaverEnabled"
    ACTIVATEDDURINGMAINFRAMENAVIGATION = "ActivatedDuringMainFrameNavigation"
    PRELOADINGUNSUPPORTEDBYWEBCONTENTS = "PreloadingUnsupportedByWebContents"
    CROSSSITEREDIRECTINMAINFRAMENAVIGATION = "CrossSiteRedirectInMainFrameNavigation"
    CROSSSITENAVIGATIONINMAINFRAMENAVIGATION = "CrossSiteNavigationInMainFrameNavigation"
    SAMESITECROSSORIGINREDIRECTNOTOPTININMAINFRAMENAVIGATION = "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation"
    SAMESITECROSSORIGINNAVIGATIONNOTOPTININMAINFRAMENAVIGATION = "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation"
    MEMORYPRESSUREONTRIGGER = "MemoryPressureOnTrigger"
    MEMORYPRESSUREAFTERTRIGGERED = "MemoryPressureAfterTriggered"
    PRERENDERINGDISABLEDBYDEVTOOLS = "PrerenderingDisabledByDevTools"
    SPECULATIONRULEREMOVED = "SpeculationRuleRemoved"
    ACTIVATEDWITHAUXILIARYBROWSINGCONTEXTS = "ActivatedWithAuxiliaryBrowsingContexts"
    MAXNUMOFRUNNINGEAGERPRERENDERSEXCEEDED = "MaxNumOfRunningEagerPrerendersExceeded"
    MAXNUMOFRUNNINGNONEAGERPRERENDERSEXCEEDED = "MaxNumOfRunningNonEagerPrerendersExceeded"
    MAXNUMOFRUNNINGEMBEDDERPRERENDERSEXCEEDED = "MaxNumOfRunningEmbedderPrerendersExceeded"
    PRERENDERINGURLHASEFFECTIVEURL = "PrerenderingUrlHasEffectiveUrl"
    REDIRECTEDPRERENDERINGURLHASEFFECTIVEURL = "RedirectedPrerenderingUrlHasEffectiveUrl"
    ACTIVATIONURLHASEFFECTIVEURL = "ActivationUrlHasEffectiveUrl"
    JAVASCRIPTINTERFACEADDED = "JavaScriptInterfaceAdded"
    JAVASCRIPTINTERFACEREMOVED = "JavaScriptInterfaceRemoved"
    ALLPRERENDERINGCANCELED = "AllPrerenderingCanceled"
    WINDOWCLOSED = "WindowClosed"
    SLOWNETWORK = "SlowNetwork"
    OTHERPRERENDEREDPAGEACTIVATED = "OtherPrerenderedPageActivated"
    V8OPTIMIZERDISABLED = "V8OptimizerDisabled"
    PRERENDERFAILEDDURINGPREFETCH = "PrerenderFailedDuringPrefetch"
    BROWSINGDATAREMOVED = "BrowsingDataRemoved"



class PreloadingStatus(Enum):
    """Preloading status values, see also PreloadingTriggeringOutcome. This
status is shared by prefetchStatusUpdated and prerenderStatusUpdated."""
    PENDING = "Pending"
    RUNNING = "Running"
    READY = "Ready"
    SUCCESS = "Success"
    FAILURE = "Failure"
    NOTSUPPORTED = "NotSupported"



class PrefetchStatus(Enum):
    """TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and
filter out the ones that aren't necessary to the developers."""
    PREFETCHALLOWED = "PrefetchAllowed"
    PREFETCHFAILEDINELIGIBLEREDIRECT = "PrefetchFailedIneligibleRedirect"
    PREFETCHFAILEDINVALIDREDIRECT = "PrefetchFailedInvalidRedirect"
    PREFETCHFAILEDMIMENOTSUPPORTED = "PrefetchFailedMIMENotSupported"
    PREFETCHFAILEDNETERROR = "PrefetchFailedNetError"
    PREFETCHFAILEDNON2XX = "PrefetchFailedNon2XX"
    PREFETCHEVICTEDAFTERBROWSINGDATAREMOVED = "PrefetchEvictedAfterBrowsingDataRemoved"
    PREFETCHEVICTEDAFTERCANDIDATEREMOVED = "PrefetchEvictedAfterCandidateRemoved"
    PREFETCHEVICTEDFORNEWERPREFETCH = "PrefetchEvictedForNewerPrefetch"
    PREFETCHHELDBACK = "PrefetchHeldback"
    PREFETCHINELIGIBLERETRYAFTER = "PrefetchIneligibleRetryAfter"
    PREFETCHISPRIVACYDECOY = "PrefetchIsPrivacyDecoy"
    PREFETCHISSTALE = "PrefetchIsStale"
    PREFETCHNOTELIGIBLEBROWSERCONTEXTOFFTHERECORD = "PrefetchNotEligibleBrowserContextOffTheRecord"
    PREFETCHNOTELIGIBLEDATASAVERENABLED = "PrefetchNotEligibleDataSaverEnabled"
    PREFETCHNOTELIGIBLEEXISTINGPROXY = "PrefetchNotEligibleExistingProxy"
    PREFETCHNOTELIGIBLEHOSTISNONUNIQUE = "PrefetchNotEligibleHostIsNonUnique"
    PREFETCHNOTELIGIBLENONDEFAULTSTORAGEPARTITION = "PrefetchNotEligibleNonDefaultStoragePartition"
    PREFETCHNOTELIGIBLESAMESITECROSSORIGINPREFETCHREQUIREDPROXY = "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy"
    PREFETCHNOTELIGIBLESCHEMEISNOTHTTPS = "PrefetchNotEligibleSchemeIsNotHttps"
    PREFETCHNOTELIGIBLEUSERHASCOOKIES = "PrefetchNotEligibleUserHasCookies"
    PREFETCHNOTELIGIBLEUSERHASSERVICEWORKER = "PrefetchNotEligibleUserHasServiceWorker"
    PREFETCHNOTELIGIBLEUSERHASSERVICEWORKERNOFETCHHANDLER = "PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler"
    PREFETCHNOTELIGIBLEREDIRECTFROMSERVICEWORKER = "PrefetchNotEligibleRedirectFromServiceWorker"
    PREFETCHNOTELIGIBLEREDIRECTTOSERVICEWORKER = "PrefetchNotEligibleRedirectToServiceWorker"
    PREFETCHNOTELIGIBLEBATTERYSAVERENABLED = "PrefetchNotEligibleBatterySaverEnabled"
    PREFETCHNOTELIGIBLEPRELOADINGDISABLED = "PrefetchNotEligiblePreloadingDisabled"
    PREFETCHNOTFINISHEDINTIME = "PrefetchNotFinishedInTime"
    PREFETCHNOTSTARTED = "PrefetchNotStarted"
    PREFETCHNOTUSEDCOOKIESCHANGED = "PrefetchNotUsedCookiesChanged"
    PREFETCHPROXYNOTAVAILABLE = "PrefetchProxyNotAvailable"
    PREFETCHRESPONSEUSED = "PrefetchResponseUsed"
    PREFETCHSUCCESSFULBUTNOTUSED = "PrefetchSuccessfulButNotUsed"
    PREFETCHNOTUSEDPROBEFAILED = "PrefetchNotUsedProbeFailed"



class PrerenderMismatchedHeaders(BaseModel):
    """Information of headers to be displayed when the header mismatch occurred."""
    headerName: "str"
    initialValue: "Optional[str]" = None
    activationValue: "Optional[str]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..network.types import LoaderId
        from ..network.types import RequestId
        # Rebuild models now that imports are available
        RuleSet.model_rebuild()
        PreloadingAttemptKey.model_rebuild()
        PreloadingAttemptSource.model_rebuild()
        PrerenderMismatchedHeaders.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
