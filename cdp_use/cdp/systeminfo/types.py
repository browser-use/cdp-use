# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP SystemInfo Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Any, Dict, List, Optional, Union

class GPUDevice(BaseModel):
    """Describes a single graphics processor (GPU)."""
    vendorId: "float"
    deviceId: "float"
    vendorString: "str"
    deviceString: "str"
    driverVendor: "str"
    driverVersion: "str"
    subSysId: "Optional[float]" = None
    revision: "Optional[float]" = None



class Size(BaseModel):
    """Describes the width and height dimensions of an entity."""
    width: "int"
    height: "int"



class VideoDecodeAcceleratorCapability(BaseModel):
    """Describes a supported video decoding profile with its associated minimum and
maximum resolutions."""
    profile: "str"
    maxResolution: "Size"
    minResolution: "Size"



class VideoEncodeAcceleratorCapability(BaseModel):
    """Describes a supported video encoding profile with its associated maximum
resolution and maximum framerate."""
    profile: "str"
    maxResolution: "Size"
    maxFramerateNumerator: "int"
    maxFramerateDenominator: "int"



class SubsamplingFormat(Enum):
    """YUV subsampling type of the pixels of a given image."""
    YUV420 = "yuv420"
    YUV422 = "yuv422"
    YUV444 = "yuv444"



class ImageType(Enum):
    """Image format of a given image."""
    JPEG = "jpeg"
    WEBP = "webp"
    UNKNOWN = "unknown"



class ImageDecodeAcceleratorCapability(BaseModel):
    """Describes a supported image decoding profile with its associated minimum and
maximum resolutions and subsampling."""
    imageType: "Union[ImageType, str]"
    maxDimensions: "Size"
    minDimensions: "Size"
    subsamplings: "List[Union[SubsamplingFormat, str]]"



class GPUInfo(BaseModel):
    """Provides information about the GPU(s) on the system."""
    devices: "List[GPUDevice]"
    driverBugWorkarounds: "List[str]"
    videoDecoding: "List[VideoDecodeAcceleratorCapability]"
    videoEncoding: "List[VideoEncodeAcceleratorCapability]"
    imageDecoding: "List[ImageDecodeAcceleratorCapability]"
    auxAttributes: "Optional[Dict[str, Any]]" = None
    featureStatus: "Optional[Dict[str, Any]]" = None



class ProcessInfo(BaseModel):
    """Represents process info."""
    type: "str"
    id: "int"
    cpuTime: "float"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        GPUDevice.model_rebuild()
        Size.model_rebuild()
        VideoDecodeAcceleratorCapability.model_rebuild()
        VideoEncodeAcceleratorCapability.model_rebuild()
        ImageDecodeAcceleratorCapability.model_rebuild()
        GPUInfo.model_rebuild()
        ProcessInfo.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
