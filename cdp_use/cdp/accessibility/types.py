# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Accessibility Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Any, List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..page.types import FrameId

"""Unique accessibility node identifier."""
AXNodeId = str



class AXValueType(Enum):
    """Enum of possible property types."""
    BOOLEAN = "boolean"
    TRISTATE = "tristate"
    BOOLEANORUNDEFINED = "booleanOrUndefined"
    IDREF = "idref"
    IDREFLIST = "idrefList"
    INTEGER = "integer"
    NODE = "node"
    NODELIST = "nodeList"
    NUMBER = "number"
    STRING = "string"
    COMPUTEDSTRING = "computedString"
    TOKEN = "token"
    TOKENLIST = "tokenList"
    DOMRELATION = "domRelation"
    ROLE = "role"
    INTERNALROLE = "internalRole"
    VALUEUNDEFINED = "valueUndefined"



class AXValueSourceType(Enum):
    """Enum of possible property sources."""
    ATTRIBUTE = "attribute"
    IMPLICIT = "implicit"
    STYLE = "style"
    CONTENTS = "contents"
    PLACEHOLDER = "placeholder"
    RELATEDELEMENT = "relatedElement"



class AXValueNativeSourceType(Enum):
    """Enum of possible native property sources (as a subtype of a particular AXValueSourceType)."""
    DESCRIPTION = "description"
    FIGCAPTION = "figcaption"
    LABEL = "label"
    LABELFOR = "labelfor"
    LABELWRAPPED = "labelwrapped"
    LEGEND = "legend"
    RUBYANNOTATION = "rubyannotation"
    TABLECAPTION = "tablecaption"
    TITLE = "title"
    OTHER = "other"



class AXValueSource(BaseModel):
    """A single source for a computed AX property."""
    type: "AXValueSourceType"
    value: "Optional[AXValue]" = None
    attribute: "Optional[str]" = None
    attributeValue: "Optional[AXValue]" = None
    superseded: "Optional[bool]" = None
    nativeSource: "Optional[AXValueNativeSourceType]" = None
    nativeSourceValue: "Optional[AXValue]" = None
    invalid: "Optional[bool]" = None
    invalidReason: "Optional[str]" = None



class AXRelatedNode(BaseModel):
    backendDOMNodeId: "BackendNodeId"
    idref: "Optional[str]" = None
    text: "Optional[str]" = None



class AXProperty(BaseModel):
    name: "AXPropertyName"
    value: "AXValue"



class AXValue(BaseModel):
    """A single computed AX property."""
    type: "AXValueType"
    value: "Optional[Any]" = None
    relatedNodes: "Optional[List[AXRelatedNode]]" = None
    sources: "Optional[List[AXValueSource]]" = None



class AXPropertyName(Enum):
    """Values of AXProperty name:
- from 'busy' to 'roledescription': states which apply to every AX node
- from 'live' to 'root': attributes which apply to nodes in live regions
- from 'autocomplete' to 'valuetext': attributes which apply to widgets
- from 'checked' to 'selected': states which apply to widgets
- from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling."""
    ACTIONS = "actions"
    BUSY = "busy"
    DISABLED = "disabled"
    EDITABLE = "editable"
    FOCUSABLE = "focusable"
    FOCUSED = "focused"
    HIDDEN = "hidden"
    HIDDENROOT = "hiddenRoot"
    INVALID = "invalid"
    KEYSHORTCUTS = "keyshortcuts"
    SETTABLE = "settable"
    ROLEDESCRIPTION = "roledescription"
    LIVE = "live"
    ATOMIC = "atomic"
    RELEVANT = "relevant"
    ROOT = "root"
    AUTOCOMPLETE = "autocomplete"
    HASPOPUP = "hasPopup"
    LEVEL = "level"
    MULTISELECTABLE = "multiselectable"
    ORIENTATION = "orientation"
    MULTILINE = "multiline"
    READONLY = "readonly"
    REQUIRED = "required"
    VALUEMIN = "valuemin"
    VALUEMAX = "valuemax"
    VALUETEXT = "valuetext"
    CHECKED = "checked"
    EXPANDED = "expanded"
    MODAL = "modal"
    PRESSED = "pressed"
    SELECTED = "selected"
    ACTIVEDESCENDANT = "activedescendant"
    CONTROLS = "controls"
    DESCRIBEDBY = "describedby"
    DETAILS = "details"
    ERRORMESSAGE = "errormessage"
    FLOWTO = "flowto"
    LABELLEDBY = "labelledby"
    OWNS = "owns"
    URL = "url"



class AXNode(BaseModel):
    """A node in the accessibility tree."""
    nodeId: "AXNodeId"
    ignored: "bool"
    ignoredReasons: "Optional[List[AXProperty]]" = None
    role: "Optional[AXValue]" = None
    chromeRole: "Optional[AXValue]" = None
    name: "Optional[AXValue]" = None
    description: "Optional[AXValue]" = None
    value: "Optional[AXValue]" = None
    properties: "Optional[List[AXProperty]]" = None
    parentId: "Optional[AXNodeId]" = None
    childIds: "Optional[List[AXNodeId]]" = None
    backendDOMNodeId: "Optional[BackendNodeId]" = None
    frameId: "Optional[FrameId]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..page.types import FrameId
        # Rebuild models now that imports are available
        AXValueSource.model_rebuild()
        AXRelatedNode.model_rebuild()
        AXProperty.model_rebuild()
        AXValue.model_rebuild()
        AXNode.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
