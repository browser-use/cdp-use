# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Accessibility Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..dom.types import NodeId
    from ..page.types import FrameId
    from ..runtime.types import RemoteObjectId
    from .types import AXNode
    from .types import AXNodeId

class GetPartialAXTreeParameters(TypedDict, total=False):
    nodeId: "NodeId"
    """Identifier of the node to get the partial accessibility tree for."""
    backendNodeId: "BackendNodeId"
    """Identifier of the backend node to get the partial accessibility tree for."""
    objectId: "RemoteObjectId"
    """JavaScript object id of the node wrapper to get the partial accessibility tree for."""
    fetchRelatives: "bool"
    """Whether to fetch this node's ancestors, siblings and children. Defaults to true."""


class GetPartialAXTreeReturns(BaseModel):
    nodes: "List[AXNode]"



class GetFullAXTreeParameters(TypedDict, total=False):
    depth: "int"
    """The maximum depth at which descendants of the root node should be retrieved.
If omitted, the full tree is returned."""
    frameId: "FrameId"
    """The frame for whose document the AX tree should be retrieved.
If omitted, the root frame is used."""


class GetFullAXTreeReturns(BaseModel):
    nodes: "List[AXNode]"



class GetRootAXNodeParameters(TypedDict, total=False):
    frameId: "FrameId"
    """The frame in whose document the node resides.
If omitted, the root frame is used."""


class GetRootAXNodeReturns(BaseModel):
    node: "AXNode"



class GetAXNodeAndAncestorsParameters(TypedDict, total=False):
    nodeId: "NodeId"
    """Identifier of the node to get."""
    backendNodeId: "BackendNodeId"
    """Identifier of the backend node to get."""
    objectId: "RemoteObjectId"
    """JavaScript object id of the node wrapper to get."""


class GetAXNodeAndAncestorsReturns(BaseModel):
    nodes: "List[AXNode]"



class GetChildAXNodesParameters(TypedDict):
    id: "AXNodeId"
    frameId: "Optional[FrameId]"
    """The frame in whose document the node resides.
If omitted, the root frame is used."""


class GetChildAXNodesReturns(BaseModel):
    nodes: "List[AXNode]"



class QueryAXTreeParameters(TypedDict, total=False):
    nodeId: "NodeId"
    """Identifier of the node for the root to query."""
    backendNodeId: "BackendNodeId"
    """Identifier of the backend node for the root to query."""
    objectId: "RemoteObjectId"
    """JavaScript object id of the node wrapper for the root to query."""
    accessibleName: "str"
    """Find nodes with this computed name."""
    role: "str"
    """Find nodes with this computed role."""


class QueryAXTreeReturns(BaseModel):
    nodes: "List[AXNode]"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..dom.types import NodeId
        from ..page.types import FrameId
        from ..runtime.types import RemoteObjectId
        from .types import AXNode
        from .types import AXNodeId
        # Rebuild models now that imports are available
        GetPartialAXTreeReturns.model_rebuild()
        GetFullAXTreeReturns.model_rebuild()
        GetRootAXNodeReturns.model_rebuild()
        GetAXNodeAndAncestorsReturns.model_rebuild()
        GetChildAXNodesReturns.model_rebuild()
        QueryAXTreeReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
