# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Animation Domain Library"""

from typing import Any, Dict, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ...client import CDPClient
    from .commands import GetCurrentTimeParameters
    from .commands import GetCurrentTimeReturns
    from .commands import GetPlaybackRateReturns
    from .commands import ReleaseAnimationsParameters
    from .commands import ResolveAnimationParameters
    from .commands import ResolveAnimationReturns
    from .commands import SeekAnimationsParameters
    from .commands import SetPausedParameters
    from .commands import SetPlaybackRateParameters
    from .commands import SetTimingParameters

class AnimationClient:
    """Client for Animation domain commands."""

    def __init__(self, client: 'CDPClient'):
        self._client = client

    async def disable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Disables animation domain notifications."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.disable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def enable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Enables animation domain notifications."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.enable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def getCurrentTime(
        self,
        params: "GetCurrentTimeParameters",
        session_id: Optional[str] = None,
    ) -> "GetCurrentTimeReturns":
        """Returns the current time of the an animation."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.getCurrentTime",
            params=params,
            session_id=session_id,
        )
        from .commands import GetCurrentTimeReturns as _GetCurrentTimeReturns
        return _GetCurrentTimeReturns.model_validate(raw_result)

    async def getPlaybackRate(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "GetPlaybackRateReturns":
        """Gets the playback rate of the document timeline."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.getPlaybackRate",
            params=params,
            session_id=session_id,
        )
        from .commands import GetPlaybackRateReturns as _GetPlaybackRateReturns
        return _GetPlaybackRateReturns.model_validate(raw_result)

    async def releaseAnimations(
        self,
        params: "ReleaseAnimationsParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Releases a set of animations to no longer be manipulated."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.releaseAnimations",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def resolveAnimation(
        self,
        params: "ResolveAnimationParameters",
        session_id: Optional[str] = None,
    ) -> "ResolveAnimationReturns":
        """Gets the remote object of the Animation."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.resolveAnimation",
            params=params,
            session_id=session_id,
        )
        from .commands import ResolveAnimationReturns as _ResolveAnimationReturns
        return _ResolveAnimationReturns.model_validate(raw_result)

    async def seekAnimations(
        self,
        params: "SeekAnimationsParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Seek a set of animations to a particular time within each animation."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.seekAnimations",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setPaused(
        self,
        params: "SetPausedParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Sets the paused state of a set of animations."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.setPaused",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setPlaybackRate(
        self,
        params: "SetPlaybackRateParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Sets the playback rate of the document timeline."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.setPlaybackRate",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def setTiming(
        self,
        params: "SetTimingParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Sets the timing of an animation node."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="Animation.setTiming",
            params=params,
            session_id=session_id,
        )
        return raw_result


