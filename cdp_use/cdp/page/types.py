# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Page Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import LoaderId
    from ..network.types import ResourceType
    from ..network.types import TimeSinceEpoch
    from ..runtime.types import ScriptId
    from ..runtime.types import UniqueDebuggerId

"""Unique frame identifier."""
FrameId = str



class AdFrameType(Enum):
    """Indicates whether a frame has been identified as an ad."""
    NONE = "none"
    CHILD = "child"
    ROOT = "root"



class AdFrameExplanation(Enum):
    PARENTISAD = "ParentIsAd"
    CREATEDBYADSCRIPT = "CreatedByAdScript"
    MATCHEDBLOCKINGRULE = "MatchedBlockingRule"



class AdFrameStatus(BaseModel):
    """Indicates whether a frame has been identified as an ad and why."""
    adFrameType: "Union[AdFrameType, str]"
    explanations: "Optional[List[Union[AdFrameExplanation, str]]]" = None



class AdScriptId(BaseModel):
    """Identifies the script which caused a script or frame to be labelled as an
ad."""
    scriptId: "ScriptId"
    debuggerId: "UniqueDebuggerId"



class AdScriptAncestry(BaseModel):
    """Encapsulates the script ancestry and the root script filterlist rule that
caused the frame to be labelled as an ad. Only created when `ancestryChain`
is not empty."""
    ancestryChain: "List[AdScriptId]"
    rootScriptFilterlistRule: "Optional[str]" = None



class SecureContextType(Enum):
    """Indicates whether the frame is a secure context and why it is the case."""
    SECURE = "Secure"
    SECURELOCALHOST = "SecureLocalhost"
    INSECURESCHEME = "InsecureScheme"
    INSECUREANCESTOR = "InsecureAncestor"



class CrossOriginIsolatedContextType(Enum):
    """Indicates whether the frame is cross-origin isolated and why it is the case."""
    ISOLATED = "Isolated"
    NOTISOLATED = "NotIsolated"
    NOTISOLATEDFEATUREDISABLED = "NotIsolatedFeatureDisabled"



class GatedAPIFeatures(Enum):
    SHAREDARRAYBUFFERS = "SharedArrayBuffers"
    SHAREDARRAYBUFFERSTRANSFERALLOWED = "SharedArrayBuffersTransferAllowed"
    PERFORMANCEMEASUREMEMORY = "PerformanceMeasureMemory"
    PERFORMANCEPROFILE = "PerformanceProfile"



class PermissionsPolicyFeature(Enum):
    """All Permissions Policy features. This enum should match the one defined
in services/network/public/cpp/permissions_policy/permissions_policy_features.json5.
LINT.IfChange(PermissionsPolicyFeature)"""
    ACCELEROMETER = "accelerometer"
    ALL_SCREENS_CAPTURE = "all-screens-capture"
    AMBIENT_LIGHT_SENSOR = "ambient-light-sensor"
    ATTRIBUTION_REPORTING = "attribution-reporting"
    AUTOPLAY = "autoplay"
    BLUETOOTH = "bluetooth"
    BROWSING_TOPICS = "browsing-topics"
    CAMERA = "camera"
    CAPTURED_SURFACE_CONTROL = "captured-surface-control"
    CH_DPR = "ch-dpr"
    CH_DEVICE_MEMORY = "ch-device-memory"
    CH_DOWNLINK = "ch-downlink"
    CH_ECT = "ch-ect"
    CH_PREFERS_COLOR_SCHEME = "ch-prefers-color-scheme"
    CH_PREFERS_REDUCED_MOTION = "ch-prefers-reduced-motion"
    CH_PREFERS_REDUCED_TRANSPARENCY = "ch-prefers-reduced-transparency"
    CH_RTT = "ch-rtt"
    CH_SAVE_DATA = "ch-save-data"
    CH_UA = "ch-ua"
    CH_UA_ARCH = "ch-ua-arch"
    CH_UA_BITNESS = "ch-ua-bitness"
    CH_UA_HIGH_ENTROPY_VALUES = "ch-ua-high-entropy-values"
    CH_UA_PLATFORM = "ch-ua-platform"
    CH_UA_MODEL = "ch-ua-model"
    CH_UA_MOBILE = "ch-ua-mobile"
    CH_UA_FORM_FACTORS = "ch-ua-form-factors"
    CH_UA_FULL_VERSION = "ch-ua-full-version"
    CH_UA_FULL_VERSION_LIST = "ch-ua-full-version-list"
    CH_UA_PLATFORM_VERSION = "ch-ua-platform-version"
    CH_UA_WOW64 = "ch-ua-wow64"
    CH_VIEWPORT_HEIGHT = "ch-viewport-height"
    CH_VIEWPORT_WIDTH = "ch-viewport-width"
    CH_WIDTH = "ch-width"
    CLIPBOARD_READ = "clipboard-read"
    CLIPBOARD_WRITE = "clipboard-write"
    COMPUTE_PRESSURE = "compute-pressure"
    CONTROLLED_FRAME = "controlled-frame"
    CROSS_ORIGIN_ISOLATED = "cross-origin-isolated"
    DEFERRED_FETCH = "deferred-fetch"
    DEFERRED_FETCH_MINIMAL = "deferred-fetch-minimal"
    DEVICE_ATTRIBUTES = "device-attributes"
    DIGITAL_CREDENTIALS_GET = "digital-credentials-get"
    DIRECT_SOCKETS = "direct-sockets"
    DIRECT_SOCKETS_PRIVATE = "direct-sockets-private"
    DISPLAY_CAPTURE = "display-capture"
    DOCUMENT_DOMAIN = "document-domain"
    ENCRYPTED_MEDIA = "encrypted-media"
    EXECUTION_WHILE_OUT_OF_VIEWPORT = "execution-while-out-of-viewport"
    EXECUTION_WHILE_NOT_RENDERED = "execution-while-not-rendered"
    FENCED_UNPARTITIONED_STORAGE_READ = "fenced-unpartitioned-storage-read"
    FOCUS_WITHOUT_USER_ACTIVATION = "focus-without-user-activation"
    FULLSCREEN = "fullscreen"
    FROBULATE = "frobulate"
    GAMEPAD = "gamepad"
    GEOLOCATION = "geolocation"
    GYROSCOPE = "gyroscope"
    HID = "hid"
    IDENTITY_CREDENTIALS_GET = "identity-credentials-get"
    IDLE_DETECTION = "idle-detection"
    INTEREST_COHORT = "interest-cohort"
    JOIN_AD_INTEREST_GROUP = "join-ad-interest-group"
    KEYBOARD_MAP = "keyboard-map"
    LANGUAGE_DETECTOR = "language-detector"
    LANGUAGE_MODEL = "language-model"
    LOCAL_FONTS = "local-fonts"
    LOCAL_NETWORK_ACCESS = "local-network-access"
    MAGNETOMETER = "magnetometer"
    MEDIA_PLAYBACK_WHILE_NOT_VISIBLE = "media-playback-while-not-visible"
    MICROPHONE = "microphone"
    MIDI = "midi"
    ON_DEVICE_SPEECH_RECOGNITION = "on-device-speech-recognition"
    OTP_CREDENTIALS = "otp-credentials"
    PAYMENT = "payment"
    PICTURE_IN_PICTURE = "picture-in-picture"
    POPINS = "popins"
    PRIVATE_AGGREGATION = "private-aggregation"
    PRIVATE_STATE_TOKEN_ISSUANCE = "private-state-token-issuance"
    PRIVATE_STATE_TOKEN_REDEMPTION = "private-state-token-redemption"
    PUBLICKEY_CREDENTIALS_CREATE = "publickey-credentials-create"
    PUBLICKEY_CREDENTIALS_GET = "publickey-credentials-get"
    RECORD_AD_AUCTION_EVENTS = "record-ad-auction-events"
    REWRITER = "rewriter"
    RUN_AD_AUCTION = "run-ad-auction"
    SCREEN_WAKE_LOCK = "screen-wake-lock"
    SERIAL = "serial"
    SHARED_AUTOFILL = "shared-autofill"
    SHARED_STORAGE = "shared-storage"
    SHARED_STORAGE_SELECT_URL = "shared-storage-select-url"
    SMART_CARD = "smart-card"
    SPEAKER_SELECTION = "speaker-selection"
    STORAGE_ACCESS = "storage-access"
    SUB_APPS = "sub-apps"
    SUMMARIZER = "summarizer"
    SYNC_XHR = "sync-xhr"
    TRANSLATOR = "translator"
    UNLOAD = "unload"
    USB = "usb"
    USB_UNRESTRICTED = "usb-unrestricted"
    VERTICAL_SCROLL = "vertical-scroll"
    WEB_APP_INSTALLATION = "web-app-installation"
    WEB_PRINTING = "web-printing"
    WEB_SHARE = "web-share"
    WINDOW_MANAGEMENT = "window-management"
    WRITER = "writer"
    XR_SPATIAL_TRACKING = "xr-spatial-tracking"



class PermissionsPolicyBlockReason(Enum):
    """Reason for a permissions policy feature to be disabled."""
    HEADER = "Header"
    IFRAMEATTRIBUTE = "IframeAttribute"
    INFENCEDFRAMETREE = "InFencedFrameTree"
    INISOLATEDAPP = "InIsolatedApp"



class PermissionsPolicyBlockLocator(BaseModel):
    frameId: "FrameId"
    blockReason: "Union[PermissionsPolicyBlockReason, str]"



class PermissionsPolicyFeatureState(BaseModel):
    feature: "Union[PermissionsPolicyFeature, str]"
    allowed: "bool"
    locator: "Optional[PermissionsPolicyBlockLocator]" = None



class OriginTrialTokenStatus(Enum):
    """Origin Trial(https://www.chromium.org/blink/origin-trials) support.
Status for an Origin Trial token."""
    SUCCESS = "Success"
    NOTSUPPORTED = "NotSupported"
    INSECURE = "Insecure"
    EXPIRED = "Expired"
    WRONGORIGIN = "WrongOrigin"
    INVALIDSIGNATURE = "InvalidSignature"
    MALFORMED = "Malformed"
    WRONGVERSION = "WrongVersion"
    FEATUREDISABLED = "FeatureDisabled"
    TOKENDISABLED = "TokenDisabled"
    FEATUREDISABLEDFORUSER = "FeatureDisabledForUser"
    UNKNOWNTRIAL = "UnknownTrial"



class OriginTrialStatus(Enum):
    """Status for an Origin Trial."""
    ENABLED = "Enabled"
    VALIDTOKENNOTPROVIDED = "ValidTokenNotProvided"
    OSNOTSUPPORTED = "OSNotSupported"
    TRIALNOTALLOWED = "TrialNotAllowed"



class OriginTrialUsageRestriction(Enum):
    NONE = "None"
    SUBSET = "Subset"



class OriginTrialToken(BaseModel):
    origin: "str"
    matchSubDomains: "bool"
    trialName: "str"
    expiryTime: "TimeSinceEpoch"
    isThirdParty: "bool"
    usageRestriction: "Union[OriginTrialUsageRestriction, str]"



class OriginTrialTokenWithStatus(BaseModel):
    rawTokenText: "str"
    status: "Union[OriginTrialTokenStatus, str]"
    parsedToken: "Optional[OriginTrialToken]" = None



class OriginTrial(BaseModel):
    trialName: "str"
    status: "Union[OriginTrialStatus, str]"
    tokensWithStatus: "List[OriginTrialTokenWithStatus]"



class SecurityOriginDetails(BaseModel):
    """Additional information about the frame document's security origin."""
    isLocalhost: "bool"



class Frame(BaseModel):
    """Information about the Frame on the page."""
    id: "FrameId"
    loaderId: "LoaderId"
    url: "str"
    domainAndRegistry: "str"
    securityOrigin: "str"
    mimeType: "str"
    secureContextType: "Union[SecureContextType, str]"
    crossOriginIsolatedContextType: "Union[CrossOriginIsolatedContextType, str]"
    gatedAPIFeatures: "List[Union[GatedAPIFeatures, str]]"
    parentId: "Optional[FrameId]" = None
    name: "Optional[str]" = None
    urlFragment: "Optional[str]" = None
    securityOriginDetails: "Optional[SecurityOriginDetails]" = None
    unreachableUrl: "Optional[str]" = None
    adFrameStatus: "Optional[AdFrameStatus]" = None



class FrameResource(BaseModel):
    """Information about the Resource on the page."""
    url: "str"
    type: "Union[ResourceType, str]"
    mimeType: "str"
    lastModified: "Optional[TimeSinceEpoch]" = None
    contentSize: "Optional[float]" = None
    failed: "Optional[bool]" = None
    canceled: "Optional[bool]" = None



class FrameResourceTree(BaseModel):
    """Information about the Frame hierarchy along with their cached resources."""
    frame: "Frame"
    resources: "List[FrameResource]"
    childFrames: "Optional[List[FrameResourceTree]]" = None



class FrameTree(BaseModel):
    """Information about the Frame hierarchy."""
    frame: "Frame"
    childFrames: "Optional[List[FrameTree]]" = None



"""Unique script identifier."""
ScriptIdentifier = str



class TransitionType(Enum):
    """Transition type."""
    LINK = "link"
    TYPED = "typed"
    ADDRESS_BAR = "address_bar"
    AUTO_BOOKMARK = "auto_bookmark"
    AUTO_SUBFRAME = "auto_subframe"
    MANUAL_SUBFRAME = "manual_subframe"
    GENERATED = "generated"
    AUTO_TOPLEVEL = "auto_toplevel"
    FORM_SUBMIT = "form_submit"
    RELOAD = "reload"
    KEYWORD = "keyword"
    KEYWORD_GENERATED = "keyword_generated"
    OTHER = "other"



class NavigationEntry(BaseModel):
    """Navigation history entry."""
    id: "int"
    url: "str"
    userTypedURL: "str"
    title: "str"
    transitionType: "Union[TransitionType, str]"



class ScreencastFrameMetadata(BaseModel):
    """Screencast frame metadata."""
    offsetTop: "float"
    pageScaleFactor: "float"
    deviceWidth: "float"
    deviceHeight: "float"
    scrollOffsetX: "float"
    scrollOffsetY: "float"
    timestamp: "Optional[TimeSinceEpoch]" = None



class DialogType(Enum):
    """Javascript dialog type."""
    ALERT = "alert"
    CONFIRM = "confirm"
    PROMPT = "prompt"
    BEFOREUNLOAD = "beforeunload"



class AppManifestError(BaseModel):
    """Error while paring app manifest."""
    message: "str"
    critical: "int"
    line: "int"
    column: "int"



class AppManifestParsedProperties(BaseModel):
    """Parsed app manifest properties."""
    scope: "str"



class LayoutViewport(BaseModel):
    """Layout viewport position and dimensions."""
    pageX: "int"
    pageY: "int"
    clientWidth: "int"
    clientHeight: "int"



class VisualViewport(BaseModel):
    """Visual viewport position, dimensions, and scale."""
    offsetX: "float"
    offsetY: "float"
    pageX: "float"
    pageY: "float"
    clientWidth: "float"
    clientHeight: "float"
    scale: "float"
    zoom: "Optional[float]" = None



class Viewport(BaseModel):
    """Viewport for capturing screenshot."""
    x: "float"
    y: "float"
    width: "float"
    height: "float"
    scale: "float"



class FontFamilies(BaseModel):
    """Generic font families collection."""
    standard: "Optional[str]" = None
    fixed: "Optional[str]" = None
    serif: "Optional[str]" = None
    sansSerif: "Optional[str]" = None
    cursive: "Optional[str]" = None
    fantasy: "Optional[str]" = None
    math: "Optional[str]" = None



class ScriptFontFamilies(BaseModel):
    """Font families collection for a script."""
    script: "str"
    fontFamilies: "FontFamilies"



class FontSizes(BaseModel):
    """Default font sizes."""
    standard: "Optional[int]" = None
    fixed: "Optional[int]" = None



class ClientNavigationReason(Enum):
    ANCHORCLICK = "anchorClick"
    FORMSUBMISSIONGET = "formSubmissionGet"
    FORMSUBMISSIONPOST = "formSubmissionPost"
    HTTPHEADERREFRESH = "httpHeaderRefresh"
    INITIALFRAMENAVIGATION = "initialFrameNavigation"
    METATAGREFRESH = "metaTagRefresh"
    OTHER = "other"
    PAGEBLOCKINTERSTITIAL = "pageBlockInterstitial"
    RELOAD = "reload"
    SCRIPTINITIATED = "scriptInitiated"



class ClientNavigationDisposition(Enum):
    CURRENTTAB = "currentTab"
    NEWTAB = "newTab"
    NEWWINDOW = "newWindow"
    DOWNLOAD = "download"



class InstallabilityErrorArgument(BaseModel):
    name: "str"
    value: "str"



class InstallabilityError(BaseModel):
    """The installability error"""
    errorId: "str"
    errorArguments: "List[InstallabilityErrorArgument]"



class ReferrerPolicy(Enum):
    """The referring-policy used for the navigation."""
    NOREFERRER = "noReferrer"
    NOREFERRERWHENDOWNGRADE = "noReferrerWhenDowngrade"
    ORIGIN = "origin"
    ORIGINWHENCROSSORIGIN = "originWhenCrossOrigin"
    SAMEORIGIN = "sameOrigin"
    STRICTORIGIN = "strictOrigin"
    STRICTORIGINWHENCROSSORIGIN = "strictOriginWhenCrossOrigin"
    UNSAFEURL = "unsafeUrl"



class CompilationCacheParams(BaseModel):
    """Per-script compilation cache parameters for `Page.produceCompilationCache`"""
    url: "str"
    eager: "Optional[bool]" = None



class FileFilter(BaseModel):
    name: "Optional[str]" = None
    accepts: "Optional[List[str]]" = None



class FileHandler(BaseModel):
    action: "str"
    name: "str"
    launchType: "str"
    icons: "Optional[List[ImageResource]]" = None
    accepts: "Optional[List[FileFilter]]" = None



class ImageResource(BaseModel):
    """The image definition used in both icon and screenshot."""
    url: "str"
    sizes: "Optional[str]" = None
    type: "Optional[str]" = None



class LaunchHandler(BaseModel):
    clientMode: "str"



class ProtocolHandler(BaseModel):
    protocol: "str"
    url: "str"



class RelatedApplication(BaseModel):
    url: "str"
    id: "Optional[str]" = None



class ScopeExtension(BaseModel):
    origin: "str"
    hasOriginWildcard: "bool"



class Screenshot(BaseModel):
    image: "ImageResource"
    formFactor: "str"
    label: "Optional[str]" = None



class ShareTarget(BaseModel):
    action: "str"
    method: "str"
    enctype: "str"
    title: "Optional[str]" = None
    text: "Optional[str]" = None
    url: "Optional[str]" = None
    files: "Optional[List[FileFilter]]" = None



class Shortcut(BaseModel):
    name: "str"
    url: "str"



class WebAppManifest(BaseModel):
    backgroundColor: "Optional[str]" = None
    description: "Optional[str]" = None
    dir: "Optional[str]" = None
    display: "Optional[str]" = None
    displayOverrides: "Optional[List[str]]" = None
    fileHandlers: "Optional[List[FileHandler]]" = None
    icons: "Optional[List[ImageResource]]" = None
    id: "Optional[str]" = None
    lang: "Optional[str]" = None
    launchHandler: "Optional[LaunchHandler]" = None
    name: "Optional[str]" = None
    orientation: "Optional[str]" = None
    preferRelatedApplications: "Optional[bool]" = None
    protocolHandlers: "Optional[List[ProtocolHandler]]" = None
    relatedApplications: "Optional[List[RelatedApplication]]" = None
    scope: "Optional[str]" = None
    scopeExtensions: "Optional[List[ScopeExtension]]" = None
    screenshots: "Optional[List[Screenshot]]" = None
    shareTarget: "Optional[ShareTarget]" = None
    shortName: "Optional[str]" = None
    shortcuts: "Optional[List[Shortcut]]" = None
    startUrl: "Optional[str]" = None
    themeColor: "Optional[str]" = None



class NavigationType(Enum):
    """The type of a frameNavigated event."""
    NAVIGATION = "Navigation"
    BACKFORWARDCACHERESTORE = "BackForwardCacheRestore"



class BackForwardCacheNotRestoredReason(Enum):
    """List of not restored reasons for back-forward cache."""
    NOTPRIMARYMAINFRAME = "NotPrimaryMainFrame"
    BACKFORWARDCACHEDISABLED = "BackForwardCacheDisabled"
    RELATEDACTIVECONTENTSEXIST = "RelatedActiveContentsExist"
    HTTPSTATUSNOTOK = "HTTPStatusNotOK"
    SCHEMENOTHTTPORHTTPS = "SchemeNotHTTPOrHTTPS"
    LOADING = "Loading"
    WASGRANTEDMEDIAACCESS = "WasGrantedMediaAccess"
    DISABLEFORRENDERFRAMEHOSTCALLED = "DisableForRenderFrameHostCalled"
    DOMAINNOTALLOWED = "DomainNotAllowed"
    HTTPMETHODNOTGET = "HTTPMethodNotGET"
    SUBFRAMEISNAVIGATING = "SubframeIsNavigating"
    TIMEOUT = "Timeout"
    CACHELIMIT = "CacheLimit"
    JAVASCRIPTEXECUTION = "JavaScriptExecution"
    RENDERERPROCESSKILLED = "RendererProcessKilled"
    RENDERERPROCESSCRASHED = "RendererProcessCrashed"
    SCHEDULERTRACKEDFEATUREUSED = "SchedulerTrackedFeatureUsed"
    CONFLICTINGBROWSINGINSTANCE = "ConflictingBrowsingInstance"
    CACHEFLUSHED = "CacheFlushed"
    SERVICEWORKERVERSIONACTIVATION = "ServiceWorkerVersionActivation"
    SESSIONRESTORED = "SessionRestored"
    SERVICEWORKERPOSTMESSAGE = "ServiceWorkerPostMessage"
    ENTEREDBACKFORWARDCACHEBEFORESERVICEWORKERHOSTADDED = "EnteredBackForwardCacheBeforeServiceWorkerHostAdded"
    RENDERFRAMEHOSTREUSED_SAMESITE = "RenderFrameHostReused_SameSite"
    RENDERFRAMEHOSTREUSED_CROSSSITE = "RenderFrameHostReused_CrossSite"
    SERVICEWORKERCLAIM = "ServiceWorkerClaim"
    IGNOREEVENTANDEVICT = "IgnoreEventAndEvict"
    HAVEINNERCONTENTS = "HaveInnerContents"
    TIMEOUTPUTTINGINCACHE = "TimeoutPuttingInCache"
    BACKFORWARDCACHEDISABLEDBYLOWMEMORY = "BackForwardCacheDisabledByLowMemory"
    BACKFORWARDCACHEDISABLEDBYCOMMANDLINE = "BackForwardCacheDisabledByCommandLine"
    NETWORKREQUESTDATAPIPEDRAINEDASBYTESCONSUMER = "NetworkRequestDatapipeDrainedAsBytesConsumer"
    NETWORKREQUESTREDIRECTED = "NetworkRequestRedirected"
    NETWORKREQUESTTIMEOUT = "NetworkRequestTimeout"
    NETWORKEXCEEDSBUFFERLIMIT = "NetworkExceedsBufferLimit"
    NAVIGATIONCANCELLEDWHILERESTORING = "NavigationCancelledWhileRestoring"
    NOTMOSTRECENTNAVIGATIONENTRY = "NotMostRecentNavigationEntry"
    BACKFORWARDCACHEDISABLEDFORPRERENDER = "BackForwardCacheDisabledForPrerender"
    USERAGENTOVERRIDEDIFFERS = "UserAgentOverrideDiffers"
    FOREGROUNDCACHELIMIT = "ForegroundCacheLimit"
    BROWSINGINSTANCENOTSWAPPED = "BrowsingInstanceNotSwapped"
    BACKFORWARDCACHEDISABLEDFORDELEGATE = "BackForwardCacheDisabledForDelegate"
    UNLOADHANDLEREXISTSINMAINFRAME = "UnloadHandlerExistsInMainFrame"
    UNLOADHANDLEREXISTSINSUBFRAME = "UnloadHandlerExistsInSubFrame"
    SERVICEWORKERUNREGISTRATION = "ServiceWorkerUnregistration"
    CACHECONTROLNOSTORE = "CacheControlNoStore"
    CACHECONTROLNOSTORECOOKIEMODIFIED = "CacheControlNoStoreCookieModified"
    CACHECONTROLNOSTOREHTTPONLYCOOKIEMODIFIED = "CacheControlNoStoreHTTPOnlyCookieModified"
    NORESPONSEHEAD = "NoResponseHead"
    UNKNOWN = "Unknown"
    ACTIVATIONNAVIGATIONSDISALLOWEDFORBUG1234857 = "ActivationNavigationsDisallowedForBug1234857"
    ERRORDOCUMENT = "ErrorDocument"
    FENCEDFRAMESEMBEDDER = "FencedFramesEmbedder"
    COOKIEDISABLED = "CookieDisabled"
    HTTPAUTHREQUIRED = "HTTPAuthRequired"
    COOKIEFLUSHED = "CookieFlushed"
    BROADCASTCHANNELONMESSAGE = "BroadcastChannelOnMessage"
    WEBVIEWSETTINGSCHANGED = "WebViewSettingsChanged"
    WEBVIEWJAVASCRIPTOBJECTCHANGED = "WebViewJavaScriptObjectChanged"
    WEBVIEWMESSAGELISTENERINJECTED = "WebViewMessageListenerInjected"
    WEBVIEWSAFEBROWSINGALLOWLISTCHANGED = "WebViewSafeBrowsingAllowlistChanged"
    WEBVIEWDOCUMENTSTARTJAVASCRIPTCHANGED = "WebViewDocumentStartJavascriptChanged"
    WEBSOCKET = "WebSocket"
    WEBTRANSPORT = "WebTransport"
    WEBRTC = "WebRTC"
    MAINRESOURCEHASCACHECONTROLNOSTORE = "MainResourceHasCacheControlNoStore"
    MAINRESOURCEHASCACHECONTROLNOCACHE = "MainResourceHasCacheControlNoCache"
    SUBRESOURCEHASCACHECONTROLNOSTORE = "SubresourceHasCacheControlNoStore"
    SUBRESOURCEHASCACHECONTROLNOCACHE = "SubresourceHasCacheControlNoCache"
    CONTAINSPLUGINS = "ContainsPlugins"
    DOCUMENTLOADED = "DocumentLoaded"
    OUTSTANDINGNETWORKREQUESTOTHERS = "OutstandingNetworkRequestOthers"
    REQUESTEDMIDIPERMISSION = "RequestedMIDIPermission"
    REQUESTEDAUDIOCAPTUREPERMISSION = "RequestedAudioCapturePermission"
    REQUESTEDVIDEOCAPTUREPERMISSION = "RequestedVideoCapturePermission"
    REQUESTEDBACKFORWARDCACHEBLOCKEDSENSORS = "RequestedBackForwardCacheBlockedSensors"
    REQUESTEDBACKGROUNDWORKPERMISSION = "RequestedBackgroundWorkPermission"
    BROADCASTCHANNEL = "BroadcastChannel"
    WEBXR = "WebXR"
    SHAREDWORKER = "SharedWorker"
    SHAREDWORKERMESSAGE = "SharedWorkerMessage"
    WEBLOCKS = "WebLocks"
    WEBHID = "WebHID"
    WEBSHARE = "WebShare"
    REQUESTEDSTORAGEACCESSGRANT = "RequestedStorageAccessGrant"
    WEBNFC = "WebNfc"
    OUTSTANDINGNETWORKREQUESTFETCH = "OutstandingNetworkRequestFetch"
    OUTSTANDINGNETWORKREQUESTXHR = "OutstandingNetworkRequestXHR"
    APPBANNER = "AppBanner"
    PRINTING = "Printing"
    WEBDATABASE = "WebDatabase"
    PICTUREINPICTURE = "PictureInPicture"
    SPEECHRECOGNIZER = "SpeechRecognizer"
    IDLEMANAGER = "IdleManager"
    PAYMENTMANAGER = "PaymentManager"
    SPEECHSYNTHESIS = "SpeechSynthesis"
    KEYBOARDLOCK = "KeyboardLock"
    WEBOTPSERVICE = "WebOTPService"
    OUTSTANDINGNETWORKREQUESTDIRECTSOCKET = "OutstandingNetworkRequestDirectSocket"
    INJECTEDJAVASCRIPT = "InjectedJavascript"
    INJECTEDSTYLESHEET = "InjectedStyleSheet"
    KEEPALIVEREQUEST = "KeepaliveRequest"
    INDEXEDDBEVENT = "IndexedDBEvent"
    DUMMY = "Dummy"
    JSNETWORKREQUESTRECEIVEDCACHECONTROLNOSTORERESOURCE = "JsNetworkRequestReceivedCacheControlNoStoreResource"
    WEBRTCSTICKY = "WebRTCSticky"
    WEBTRANSPORTSTICKY = "WebTransportSticky"
    WEBSOCKETSTICKY = "WebSocketSticky"
    SMARTCARD = "SmartCard"
    LIVEMEDIASTREAMTRACK = "LiveMediaStreamTrack"
    UNLOADHANDLER = "UnloadHandler"
    PARSERABORTED = "ParserAborted"
    CONTENTSECURITYHANDLER = "ContentSecurityHandler"
    CONTENTWEBAUTHENTICATIONAPI = "ContentWebAuthenticationAPI"
    CONTENTFILECHOOSER = "ContentFileChooser"
    CONTENTSERIAL = "ContentSerial"
    CONTENTFILESYSTEMACCESS = "ContentFileSystemAccess"
    CONTENTMEDIADEVICESDISPATCHERHOST = "ContentMediaDevicesDispatcherHost"
    CONTENTWEBBLUETOOTH = "ContentWebBluetooth"
    CONTENTWEBUSB = "ContentWebUSB"
    CONTENTMEDIASESSIONSERVICE = "ContentMediaSessionService"
    CONTENTSCREENREADER = "ContentScreenReader"
    CONTENTDISCARDED = "ContentDiscarded"
    EMBEDDERPOPUPBLOCKERTABHELPER = "EmbedderPopupBlockerTabHelper"
    EMBEDDERSAFEBROWSINGTRIGGEREDPOPUPBLOCKER = "EmbedderSafeBrowsingTriggeredPopupBlocker"
    EMBEDDERSAFEBROWSINGTHREATDETAILS = "EmbedderSafeBrowsingThreatDetails"
    EMBEDDERAPPBANNERMANAGER = "EmbedderAppBannerManager"
    EMBEDDERDOMDISTILLERVIEWERSOURCE = "EmbedderDomDistillerViewerSource"
    EMBEDDERDOMDISTILLERSELFDELETINGREQUESTDELEGATE = "EmbedderDomDistillerSelfDeletingRequestDelegate"
    EMBEDDEROOMINTERVENTIONTABHELPER = "EmbedderOomInterventionTabHelper"
    EMBEDDEROFFLINEPAGE = "EmbedderOfflinePage"
    EMBEDDERCHROMEPASSWORDMANAGERCLIENTBINDCREDENTIALMANAGER = "EmbedderChromePasswordManagerClientBindCredentialManager"
    EMBEDDERPERMISSIONREQUESTMANAGER = "EmbedderPermissionRequestManager"
    EMBEDDERMODALDIALOG = "EmbedderModalDialog"
    EMBEDDEREXTENSIONS = "EmbedderExtensions"
    EMBEDDEREXTENSIONMESSAGING = "EmbedderExtensionMessaging"
    EMBEDDEREXTENSIONMESSAGINGFOROPENPORT = "EmbedderExtensionMessagingForOpenPort"
    EMBEDDEREXTENSIONSENTMESSAGETOCACHEDFRAME = "EmbedderExtensionSentMessageToCachedFrame"
    REQUESTEDBYWEBVIEWCLIENT = "RequestedByWebViewClient"
    POSTMESSAGEBYWEBVIEWCLIENT = "PostMessageByWebViewClient"
    CACHECONTROLNOSTOREDEVICEBOUNDSESSIONTERMINATED = "CacheControlNoStoreDeviceBoundSessionTerminated"
    CACHELIMITPRUNEDONMODERATEMEMORYPRESSURE = "CacheLimitPrunedOnModerateMemoryPressure"
    CACHELIMITPRUNEDONCRITICALMEMORYPRESSURE = "CacheLimitPrunedOnCriticalMemoryPressure"



class BackForwardCacheNotRestoredReasonType(Enum):
    """Types of not restored reasons for back-forward cache."""
    SUPPORTPENDING = "SupportPending"
    PAGESUPPORTNEEDED = "PageSupportNeeded"
    CIRCUMSTANTIAL = "Circumstantial"



class BackForwardCacheBlockingDetails(BaseModel):
    lineNumber: "int"
    columnNumber: "int"
    url: "Optional[str]" = None
    function: "Optional[str]" = None



class BackForwardCacheNotRestoredExplanation(BaseModel):
    type: "Union[BackForwardCacheNotRestoredReasonType, str]"
    reason: "Union[BackForwardCacheNotRestoredReason, str]"
    context: "Optional[str]" = None
    details: "Optional[List[BackForwardCacheBlockingDetails]]" = None



class BackForwardCacheNotRestoredExplanationTree(BaseModel):
    url: "str"
    explanations: "List[BackForwardCacheNotRestoredExplanation]"
    children: "List[BackForwardCacheNotRestoredExplanationTree]"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..network.types import LoaderId
        from ..network.types import ResourceType
        from ..network.types import TimeSinceEpoch
        from ..runtime.types import ScriptId
        from ..runtime.types import UniqueDebuggerId
        # Rebuild models now that imports are available
        AdFrameStatus.model_rebuild()
        AdScriptId.model_rebuild()
        AdScriptAncestry.model_rebuild()
        PermissionsPolicyBlockLocator.model_rebuild()
        PermissionsPolicyFeatureState.model_rebuild()
        OriginTrialToken.model_rebuild()
        OriginTrialTokenWithStatus.model_rebuild()
        OriginTrial.model_rebuild()
        SecurityOriginDetails.model_rebuild()
        Frame.model_rebuild()
        FrameResource.model_rebuild()
        FrameResourceTree.model_rebuild()
        FrameTree.model_rebuild()
        NavigationEntry.model_rebuild()
        ScreencastFrameMetadata.model_rebuild()
        AppManifestError.model_rebuild()
        AppManifestParsedProperties.model_rebuild()
        LayoutViewport.model_rebuild()
        VisualViewport.model_rebuild()
        Viewport.model_rebuild()
        FontFamilies.model_rebuild()
        ScriptFontFamilies.model_rebuild()
        FontSizes.model_rebuild()
        InstallabilityErrorArgument.model_rebuild()
        InstallabilityError.model_rebuild()
        CompilationCacheParams.model_rebuild()
        FileFilter.model_rebuild()
        FileHandler.model_rebuild()
        ImageResource.model_rebuild()
        LaunchHandler.model_rebuild()
        ProtocolHandler.model_rebuild()
        RelatedApplication.model_rebuild()
        ScopeExtension.model_rebuild()
        Screenshot.model_rebuild()
        ShareTarget.model_rebuild()
        Shortcut.model_rebuild()
        WebAppManifest.model_rebuild()
        BackForwardCacheBlockingDetails.model_rebuild()
        BackForwardCacheNotRestoredExplanation.model_rebuild()
        BackForwardCacheNotRestoredExplanationTree.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
