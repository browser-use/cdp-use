# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Page Domain Events"""

from pydantic import BaseModel
from typing import List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..network.types import LoaderId
    from ..network.types import MonotonicTime
    from ..runtime.types import StackTrace
    from .types import BackForwardCacheNotRestoredExplanation
    from .types import BackForwardCacheNotRestoredExplanationTree
    from .types import ClientNavigationDisposition
    from .types import ClientNavigationReason
    from .types import DialogType
    from .types import Frame
    from .types import FrameId
    from .types import NavigationType
    from .types import ScreencastFrameMetadata

class DomContentEventFiredEvent(BaseModel):
    timestamp: "MonotonicTime"



class FileChooserOpenedEvent(BaseModel):
    """Emitted only when `page.interceptFileChooser` is enabled."""
    frameId: "FrameId"
    mode: "str"
    backendNodeId: "Optional[BackendNodeId]" = None



class FrameAttachedEvent(BaseModel):
    """Fired when frame has been attached to its parent."""
    frameId: "FrameId"
    parentFrameId: "FrameId"
    stack: "Optional[StackTrace]" = None



class FrameClearedScheduledNavigationEvent(BaseModel):
    """Fired when frame no longer has a scheduled navigation."""
    frameId: "FrameId"



class FrameDetachedEvent(BaseModel):
    """Fired when frame has been detached from its parent."""
    frameId: "FrameId"
    reason: "str"



class FrameSubtreeWillBeDetachedEvent(BaseModel):
    """Fired before frame subtree is detached. Emitted before any frame of the
subtree is actually detached."""
    frameId: "FrameId"



class FrameNavigatedEvent(BaseModel):
    """Fired once navigation of the frame has completed. Frame is now associated with the new loader."""
    frame: "Frame"
    type: "Union[NavigationType, str]"



class DocumentOpenedEvent(BaseModel):
    """Fired when opening document to write to."""
    frame: "Frame"



class FrameResizedEvent(BaseModel):
    pass



class FrameStartedNavigatingEvent(BaseModel):
    """Fired when a navigation starts. This event is fired for both
renderer-initiated and browser-initiated navigations. For renderer-initiated
navigations, the event is fired after `frameRequestedNavigation`.
Navigation may still be cancelled after the event is issued. Multiple events
can be fired for a single navigation, for example, when a same-document
navigation becomes a cross-document navigation (such as in the case of a
frameset)."""
    frameId: "FrameId"
    url: "str"
    loaderId: "LoaderId"
    navigationType: "str"



class FrameRequestedNavigationEvent(BaseModel):
    """Fired when a renderer-initiated navigation is requested.
Navigation may still be cancelled after the event is issued."""
    frameId: "FrameId"
    reason: "Union[ClientNavigationReason, str]"
    url: "str"
    disposition: "Union[ClientNavigationDisposition, str]"



class FrameScheduledNavigationEvent(BaseModel):
    """Fired when frame schedules a potential navigation."""
    frameId: "FrameId"
    delay: "float"
    reason: "Union[ClientNavigationReason, str]"
    url: "str"



class FrameStartedLoadingEvent(BaseModel):
    """Fired when frame has started loading."""
    frameId: "FrameId"



class FrameStoppedLoadingEvent(BaseModel):
    """Fired when frame has stopped loading."""
    frameId: "FrameId"



class DownloadWillBeginEvent(BaseModel):
    """Fired when page is about to start a download.
Deprecated. Use Browser.downloadWillBegin instead."""
    frameId: "FrameId"
    guid: "str"
    url: "str"
    suggestedFilename: "str"



class DownloadProgressEvent(BaseModel):
    """Fired when download makes progress. Last call has |done| == true.
Deprecated. Use Browser.downloadProgress instead."""
    guid: "str"
    totalBytes: "float"
    receivedBytes: "float"
    state: "str"



class InterstitialHiddenEvent(BaseModel):
    """Fired when interstitial page was hidden"""
    pass



class InterstitialShownEvent(BaseModel):
    """Fired when interstitial page was shown"""
    pass



class JavascriptDialogClosedEvent(BaseModel):
    """Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
closed."""
    frameId: "FrameId"
    result: "bool"
    userInput: "str"



class JavascriptDialogOpeningEvent(BaseModel):
    """Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
open."""
    url: "str"
    frameId: "FrameId"
    message: "str"
    type: "Union[DialogType, str]"
    hasBrowserHandler: "bool"
    defaultPrompt: "Optional[str]" = None



class LifecycleEventEvent(BaseModel):
    """Fired for lifecycle events (navigation, load, paint, etc) in the current
target (including local frames)."""
    frameId: "FrameId"
    loaderId: "LoaderId"
    name: "str"
    timestamp: "MonotonicTime"



class BackForwardCacheNotUsedEvent(BaseModel):
    """Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do
not assume any ordering with the Page.frameNavigated event. This event is fired only for
main-frame history navigation where the document changes (non-same-document navigations),
when bfcache navigation fails."""
    loaderId: "LoaderId"
    frameId: "FrameId"
    notRestoredExplanations: "List[BackForwardCacheNotRestoredExplanation]"
    notRestoredExplanationsTree: "Optional[BackForwardCacheNotRestoredExplanationTree]" = None



class LoadEventFiredEvent(BaseModel):
    timestamp: "MonotonicTime"



class NavigatedWithinDocumentEvent(BaseModel):
    """Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation."""
    frameId: "FrameId"
    url: "str"
    navigationType: "str"



class ScreencastFrameEvent(BaseModel):
    """Compressed image data requested by the `startScreencast`."""
    data: "str"
    metadata: "ScreencastFrameMetadata"
    sessionId: "int"



class ScreencastVisibilityChangedEvent(BaseModel):
    """Fired when the page with currently enabled screencast was shown or hidden `."""
    visible: "bool"



class WindowOpenEvent(BaseModel):
    """Fired when a new window is going to be opened, via window.open(), link click, form submission,
etc."""
    url: "str"
    windowName: "str"
    windowFeatures: "List[str]"
    userGesture: "bool"



class CompilationCacheProducedEvent(BaseModel):
    """Issued for every compilation cache generated. Is only available
if Page.setGenerateCompilationCache is enabled."""
    url: "str"
    data: "str"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..network.types import LoaderId
        from ..network.types import MonotonicTime
        from ..runtime.types import StackTrace
        from .types import BackForwardCacheNotRestoredExplanation
        from .types import BackForwardCacheNotRestoredExplanationTree
        from .types import ClientNavigationDisposition
        from .types import ClientNavigationReason
        from .types import DialogType
        from .types import Frame
        from .types import FrameId
        from .types import NavigationType
        from .types import ScreencastFrameMetadata
        # Rebuild models now that imports are available
        DomContentEventFiredEvent.model_rebuild()
        FileChooserOpenedEvent.model_rebuild()
        FrameAttachedEvent.model_rebuild()
        FrameClearedScheduledNavigationEvent.model_rebuild()
        FrameDetachedEvent.model_rebuild()
        FrameSubtreeWillBeDetachedEvent.model_rebuild()
        FrameNavigatedEvent.model_rebuild()
        DocumentOpenedEvent.model_rebuild()
        FrameResizedEvent.model_rebuild()
        FrameStartedNavigatingEvent.model_rebuild()
        FrameRequestedNavigationEvent.model_rebuild()
        FrameScheduledNavigationEvent.model_rebuild()
        FrameStartedLoadingEvent.model_rebuild()
        FrameStoppedLoadingEvent.model_rebuild()
        DownloadWillBeginEvent.model_rebuild()
        DownloadProgressEvent.model_rebuild()
        InterstitialHiddenEvent.model_rebuild()
        InterstitialShownEvent.model_rebuild()
        JavascriptDialogClosedEvent.model_rebuild()
        JavascriptDialogOpeningEvent.model_rebuild()
        LifecycleEventEvent.model_rebuild()
        BackForwardCacheNotUsedEvent.model_rebuild()
        LoadEventFiredEvent.model_rebuild()
        NavigatedWithinDocumentEvent.model_rebuild()
        ScreencastFrameEvent.model_rebuild()
        ScreencastVisibilityChangedEvent.model_rebuild()
        WindowOpenEvent.model_rebuild()
        CompilationCacheProducedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
