# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Page Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..debugger.types import SearchMatch
    from ..dom.types import Rect
    from ..emulation.types import ScreenOrientation
    from ..io.types import StreamHandle
    from ..network.types import LoaderId
    from ..runtime.types import ExecutionContextId
    from .types import AdScriptAncestry
    from .types import AppManifestError
    from .types import AppManifestParsedProperties
    from .types import CompilationCacheParams
    from .types import FontFamilies
    from .types import FontSizes
    from .types import FrameId
    from .types import FrameResourceTree
    from .types import FrameTree
    from .types import InstallabilityError
    from .types import LayoutViewport
    from .types import NavigationEntry
    from .types import OriginTrial
    from .types import PermissionsPolicyFeatureState
    from .types import ReferrerPolicy
    from .types import ScriptFontFamilies
    from .types import ScriptIdentifier
    from .types import TransitionType
    from .types import Viewport
    from .types import VisualViewport
    from .types import WebAppManifest

class AddScriptToEvaluateOnLoadParameters(TypedDict):
    scriptSource: "str"


class AddScriptToEvaluateOnLoadReturns(BaseModel):
    identifier: "ScriptIdentifier"



class AddScriptToEvaluateOnNewDocumentParameters(TypedDict):
    source: "str"
    worldName: "NotRequired[str]"
    includeCommandLineAPI: "NotRequired[bool]"
    runImmediately: "NotRequired[bool]"


class AddScriptToEvaluateOnNewDocumentReturns(BaseModel):
    identifier: "ScriptIdentifier"



class CaptureScreenshotParameters(TypedDict, total=False):
    format: "str"
    quality: "int"
    clip: "Viewport"
    fromSurface: "bool"
    captureBeyondViewport: "bool"
    optimizeForSpeed: "bool"


class CaptureScreenshotReturns(BaseModel):
    data: "str"



class CaptureSnapshotParameters(TypedDict, total=False):
    format: "str"


class CaptureSnapshotReturns(BaseModel):
    data: "str"



class CreateIsolatedWorldParameters(TypedDict):
    frameId: "FrameId"
    worldName: "NotRequired[str]"
    grantUniveralAccess: "NotRequired[bool]"


class CreateIsolatedWorldReturns(BaseModel):
    executionContextId: "ExecutionContextId"



class DeleteCookieParameters(TypedDict):
    cookieName: "str"
    url: "str"





class EnableParameters(TypedDict, total=False):
    enableFileChooserOpenedEvent: "bool"





class GetAppManifestParameters(TypedDict, total=False):
    manifestId: "str"


class GetAppManifestReturns(BaseModel):
    url: "str"
    errors: "List[AppManifestError]"
    manifest: "WebAppManifest"
    data: "Optional[str]" = None
    parsed: "Optional[AppManifestParsedProperties]" = None



class GetInstallabilityErrorsReturns(BaseModel):
    installabilityErrors: "List[InstallabilityError]"



class GetManifestIconsReturns(BaseModel):
    primaryIcon: "Optional[str]" = None



class GetAppIdReturns(BaseModel):
    appId: "Optional[str]" = None
    recommendedId: "Optional[str]" = None



class GetAdScriptAncestryParameters(TypedDict):
    frameId: "FrameId"


class GetAdScriptAncestryReturns(BaseModel):
    adScriptAncestry: "Optional[AdScriptAncestry]" = None



class GetFrameTreeReturns(BaseModel):
    frameTree: "FrameTree"



class GetLayoutMetricsReturns(BaseModel):
    layoutViewport: "LayoutViewport"
    visualViewport: "VisualViewport"
    contentSize: "Rect"
    cssLayoutViewport: "LayoutViewport"
    cssVisualViewport: "VisualViewport"
    cssContentSize: "Rect"



class GetNavigationHistoryReturns(BaseModel):
    currentIndex: "int"
    entries: "List[NavigationEntry]"



class GetResourceContentParameters(TypedDict):
    frameId: "FrameId"
    url: "str"


class GetResourceContentReturns(BaseModel):
    content: "str"
    base64Encoded: "bool"



class GetResourceTreeReturns(BaseModel):
    frameTree: "FrameResourceTree"



class HandleJavaScriptDialogParameters(TypedDict):
    accept: "bool"
    promptText: "NotRequired[str]"





class NavigateParameters(TypedDict):
    url: "str"
    referrer: "NotRequired[str]"
    transitionType: "NotRequired[Union[TransitionType, str]]"
    frameId: "NotRequired[FrameId]"
    referrerPolicy: "NotRequired[Union[ReferrerPolicy, str]]"


class NavigateReturns(BaseModel):
    frameId: "FrameId"
    loaderId: "Optional[LoaderId]" = None
    errorText: "Optional[str]" = None



class NavigateToHistoryEntryParameters(TypedDict):
    entryId: "int"





class PrintToPDFParameters(TypedDict, total=False):
    landscape: "bool"
    displayHeaderFooter: "bool"
    printBackground: "bool"
    scale: "float"
    paperWidth: "float"
    paperHeight: "float"
    marginTop: "float"
    marginBottom: "float"
    marginLeft: "float"
    marginRight: "float"
    pageRanges: "str"
    headerTemplate: "str"
    footerTemplate: "str"
    preferCSSPageSize: "bool"
    transferMode: "str"
    generateTaggedPDF: "bool"
    generateDocumentOutline: "bool"


class PrintToPDFReturns(BaseModel):
    data: "str"
    stream: "Optional[StreamHandle]" = None



class ReloadParameters(TypedDict, total=False):
    ignoreCache: "bool"
    scriptToEvaluateOnLoad: "str"
    loaderId: "LoaderId"





class RemoveScriptToEvaluateOnLoadParameters(TypedDict):
    identifier: "ScriptIdentifier"





class RemoveScriptToEvaluateOnNewDocumentParameters(TypedDict):
    identifier: "ScriptIdentifier"





class ScreencastFrameAckParameters(TypedDict):
    sessionId: "int"





class SearchInResourceParameters(TypedDict):
    frameId: "FrameId"
    url: "str"
    query: "str"
    caseSensitive: "NotRequired[bool]"
    isRegex: "NotRequired[bool]"


class SearchInResourceReturns(BaseModel):
    result: "List[SearchMatch]"



class SetAdBlockingEnabledParameters(TypedDict):
    enabled: "bool"





class SetBypassCSPParameters(TypedDict):
    enabled: "bool"





class GetPermissionsPolicyStateParameters(TypedDict):
    frameId: "FrameId"


class GetPermissionsPolicyStateReturns(BaseModel):
    states: "List[PermissionsPolicyFeatureState]"



class GetOriginTrialsParameters(TypedDict):
    frameId: "FrameId"


class GetOriginTrialsReturns(BaseModel):
    originTrials: "List[OriginTrial]"



class SetDeviceMetricsOverrideParameters(TypedDict):
    width: "int"
    height: "int"
    deviceScaleFactor: "float"
    mobile: "bool"
    scale: "NotRequired[float]"
    screenWidth: "NotRequired[int]"
    screenHeight: "NotRequired[int]"
    positionX: "NotRequired[int]"
    positionY: "NotRequired[int]"
    dontSetVisibleSize: "NotRequired[bool]"
    screenOrientation: "NotRequired[ScreenOrientation]"
    viewport: "NotRequired[Viewport]"





class SetDeviceOrientationOverrideParameters(TypedDict):
    alpha: "float"
    beta: "float"
    gamma: "float"





class SetFontFamiliesParameters(TypedDict):
    fontFamilies: "FontFamilies"
    forScripts: "NotRequired[List[ScriptFontFamilies]]"





class SetFontSizesParameters(TypedDict):
    fontSizes: "FontSizes"





class SetDocumentContentParameters(TypedDict):
    frameId: "FrameId"
    html: "str"





class SetDownloadBehaviorParameters(TypedDict):
    behavior: "str"
    downloadPath: "NotRequired[str]"





class SetGeolocationOverrideParameters(TypedDict, total=False):
    latitude: "float"
    longitude: "float"
    accuracy: "float"





class SetLifecycleEventsEnabledParameters(TypedDict):
    enabled: "bool"





class SetTouchEmulationEnabledParameters(TypedDict):
    enabled: "bool"
    configuration: "NotRequired[str]"





class StartScreencastParameters(TypedDict, total=False):
    format: "str"
    quality: "int"
    maxWidth: "int"
    maxHeight: "int"
    everyNthFrame: "int"





class SetWebLifecycleStateParameters(TypedDict):
    state: "str"





class ProduceCompilationCacheParameters(TypedDict):
    scripts: "List[CompilationCacheParams]"





class AddCompilationCacheParameters(TypedDict):
    url: "str"
    data: "str"





class SetSPCTransactionModeParameters(TypedDict):
    mode: "str"





class SetRPHRegistrationModeParameters(TypedDict):
    mode: "str"





class GenerateTestReportParameters(TypedDict):
    message: "str"
    group: "NotRequired[str]"





class SetInterceptFileChooserDialogParameters(TypedDict):
    enabled: "bool"
    cancel: "NotRequired[bool]"





class SetPrerenderingAllowedParameters(TypedDict):
    isAllowed: "bool"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..debugger.types import SearchMatch
        from ..dom.types import Rect
        from ..emulation.types import ScreenOrientation
        from ..io.types import StreamHandle
        from ..network.types import LoaderId
        from ..runtime.types import ExecutionContextId
        from .types import AdScriptAncestry
        from .types import AppManifestError
        from .types import AppManifestParsedProperties
        from .types import CompilationCacheParams
        from .types import FontFamilies
        from .types import FontSizes
        from .types import FrameId
        from .types import FrameResourceTree
        from .types import FrameTree
        from .types import InstallabilityError
        from .types import LayoutViewport
        from .types import NavigationEntry
        from .types import OriginTrial
        from .types import PermissionsPolicyFeatureState
        from .types import ReferrerPolicy
        from .types import ScriptFontFamilies
        from .types import ScriptIdentifier
        from .types import TransitionType
        from .types import Viewport
        from .types import VisualViewport
        from .types import WebAppManifest
        # Rebuild models now that imports are available
        AddScriptToEvaluateOnLoadReturns.model_rebuild()
        AddScriptToEvaluateOnNewDocumentReturns.model_rebuild()
        CaptureScreenshotReturns.model_rebuild()
        CaptureSnapshotReturns.model_rebuild()
        CreateIsolatedWorldReturns.model_rebuild()
        GetAppManifestReturns.model_rebuild()
        GetInstallabilityErrorsReturns.model_rebuild()
        GetManifestIconsReturns.model_rebuild()
        GetAppIdReturns.model_rebuild()
        GetAdScriptAncestryReturns.model_rebuild()
        GetFrameTreeReturns.model_rebuild()
        GetLayoutMetricsReturns.model_rebuild()
        GetNavigationHistoryReturns.model_rebuild()
        GetResourceContentReturns.model_rebuild()
        GetResourceTreeReturns.model_rebuild()
        NavigateReturns.model_rebuild()
        PrintToPDFReturns.model_rebuild()
        SearchInResourceReturns.model_rebuild()
        GetPermissionsPolicyStateReturns.model_rebuild()
        GetOriginTrialsReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
