# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOMSnapshot Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import ComputedStyle
    from .types import DOMNode
    from .types import DocumentSnapshot
    from .types import LayoutTreeNode

class GetSnapshotParameters(TypedDict):
    computedStyleWhitelist: "List[str]"
    """Whitelist of computed styles to return."""
    includeEventListeners: "Optional[bool]"
    """Whether or not to retrieve details of DOM listeners (default false)."""
    includePaintOrder: "Optional[bool]"
    """Whether to determine and include the paint order index of LayoutTreeNodes (default false)."""
    includeUserAgentShadowTree: "Optional[bool]"
    """Whether to include UA shadow tree in the snapshot (default false)."""


class GetSnapshotReturns(BaseModel):
    domNodes: "List[DOMNode]"
    layoutTreeNodes: "List[LayoutTreeNode]"
    computedStyles: "List[ComputedStyle]"



class CaptureSnapshotParameters(TypedDict):
    computedStyles: "List[str]"
    """Whitelist of computed styles to return."""
    includePaintOrder: "Optional[bool]"
    """Whether to include layout object paint orders into the snapshot."""
    includeDOMRects: "Optional[bool]"
    """Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot"""
    includeBlendedBackgroundColors: "Optional[bool]"
    """Whether to include blended background colors in the snapshot (default: false).
Blended background color is achieved by blending background colors of all elements
that overlap with the current element."""
    includeTextColorOpacities: "Optional[bool]"
    """Whether to include text color opacity in the snapshot (default: false).
An element might have the opacity property set that affects the text color of the element.
The final text color opacity is computed based on the opacity of all overlapping elements."""


class CaptureSnapshotReturns(BaseModel):
    documents: "List[DocumentSnapshot]"
    strings: "List[str]"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import ComputedStyle
        from .types import DOMNode
        from .types import DocumentSnapshot
        from .types import LayoutTreeNode
        # Rebuild models now that imports are available
        GetSnapshotReturns.model_rebuild()
        CaptureSnapshotReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
