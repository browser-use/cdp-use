# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOMSnapshot Domain Types"""

from pydantic import BaseModel
from typing import List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..dom.types import PseudoType
    from ..dom.types import Rect
    from ..dom.types import ShadowRootType
    from ..domdebugger.types import EventListener
    from ..page.types import FrameId

class DOMNode(BaseModel):
    """A Node in the DOM tree."""
    nodeType: "int"
    nodeName: "str"
    nodeValue: "str"
    backendNodeId: "BackendNodeId"
    textValue: "Optional[str]" = None
    inputValue: "Optional[str]" = None
    inputChecked: "Optional[bool]" = None
    optionSelected: "Optional[bool]" = None
    childNodeIndexes: "Optional[List[int]]" = None
    attributes: "Optional[List[NameValue]]" = None
    pseudoElementIndexes: "Optional[List[int]]" = None
    layoutNodeIndex: "Optional[int]" = None
    documentURL: "Optional[str]" = None
    baseURL: "Optional[str]" = None
    contentLanguage: "Optional[str]" = None
    documentEncoding: "Optional[str]" = None
    publicId: "Optional[str]" = None
    systemId: "Optional[str]" = None
    frameId: "Optional[FrameId]" = None
    contentDocumentIndex: "Optional[int]" = None
    pseudoType: "Optional[Union[PseudoType, str]]" = None
    shadowRootType: "Optional[Union[ShadowRootType, str]]" = None
    isClickable: "Optional[bool]" = None
    eventListeners: "Optional[List[EventListener]]" = None
    currentSourceURL: "Optional[str]" = None
    originURL: "Optional[str]" = None
    scrollOffsetX: "Optional[float]" = None
    scrollOffsetY: "Optional[float]" = None



class InlineTextBox(BaseModel):
    """Details of post layout rendered text positions. The exact layout should not be regarded as
stable and may change between versions."""
    boundingBox: "Rect"
    startCharacterIndex: "int"
    numCharacters: "int"



class LayoutTreeNode(BaseModel):
    """Details of an element in the DOM tree with a LayoutObject."""
    domNodeIndex: "int"
    boundingBox: "Rect"
    layoutText: "Optional[str]" = None
    inlineTextNodes: "Optional[List[InlineTextBox]]" = None
    styleIndex: "Optional[int]" = None
    paintOrder: "Optional[int]" = None
    isStackingContext: "Optional[bool]" = None



class ComputedStyle(BaseModel):
    """A subset of the full ComputedStyle as defined by the request whitelist."""
    properties: "List[NameValue]"



class NameValue(BaseModel):
    """A name/value pair."""
    name: "str"
    value: "str"



"""Index of the string in the strings table."""
StringIndex = int



"""Index of the string in the strings table."""
ArrayOfStrings = List[StringIndex]



class RareStringData(BaseModel):
    """Data that is only present on rare nodes."""
    index: "List[int]"
    value: "List[StringIndex]"



class RareBooleanData(BaseModel):
    index: "List[int]"



class RareIntegerData(BaseModel):
    index: "List[int]"
    value: "List[int]"



Rectangle = List[float]



class DocumentSnapshot(BaseModel):
    """Document snapshot."""
    documentURL: "StringIndex"
    title: "StringIndex"
    baseURL: "StringIndex"
    contentLanguage: "StringIndex"
    encodingName: "StringIndex"
    publicId: "StringIndex"
    systemId: "StringIndex"
    frameId: "StringIndex"
    nodes: "NodeTreeSnapshot"
    layout: "LayoutTreeSnapshot"
    textBoxes: "TextBoxSnapshot"
    scrollOffsetX: "Optional[float]" = None
    scrollOffsetY: "Optional[float]" = None
    contentWidth: "Optional[float]" = None
    contentHeight: "Optional[float]" = None



class NodeTreeSnapshot(BaseModel):
    """Table containing nodes."""
    parentIndex: "Optional[List[int]]" = None
    nodeType: "Optional[List[int]]" = None
    shadowRootType: "Optional[RareStringData]" = None
    nodeName: "Optional[List[StringIndex]]" = None
    nodeValue: "Optional[List[StringIndex]]" = None
    backendNodeId: "Optional[List[BackendNodeId]]" = None
    attributes: "Optional[List[ArrayOfStrings]]" = None
    textValue: "Optional[RareStringData]" = None
    inputValue: "Optional[RareStringData]" = None
    inputChecked: "Optional[RareBooleanData]" = None
    optionSelected: "Optional[RareBooleanData]" = None
    contentDocumentIndex: "Optional[RareIntegerData]" = None
    pseudoType: "Optional[RareStringData]" = None
    pseudoIdentifier: "Optional[RareStringData]" = None
    isClickable: "Optional[RareBooleanData]" = None
    currentSourceURL: "Optional[RareStringData]" = None
    originURL: "Optional[RareStringData]" = None



class LayoutTreeSnapshot(BaseModel):
    """Table of details of an element in the DOM tree with a LayoutObject."""
    nodeIndex: "List[int]"
    styles: "List[ArrayOfStrings]"
    bounds: "List[Rectangle]"
    text: "List[StringIndex]"
    stackingContexts: "RareBooleanData"
    paintOrders: "Optional[List[int]]" = None
    offsetRects: "Optional[List[Rectangle]]" = None
    scrollRects: "Optional[List[Rectangle]]" = None
    clientRects: "Optional[List[Rectangle]]" = None
    blendedBackgroundColors: "Optional[List[StringIndex]]" = None
    textColorOpacities: "Optional[List[float]]" = None



class TextBoxSnapshot(BaseModel):
    """Table of details of the post layout rendered text positions. The exact layout should not be regarded as
stable and may change between versions."""
    layoutIndex: "List[int]"
    bounds: "List[Rectangle]"
    start: "List[int]"
    length: "List[int]"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..dom.types import PseudoType
        from ..dom.types import Rect
        from ..dom.types import ShadowRootType
        from ..domdebugger.types import EventListener
        from ..page.types import FrameId
        # Rebuild models now that imports are available
        DOMNode.model_rebuild()
        InlineTextBox.model_rebuild()
        LayoutTreeNode.model_rebuild()
        ComputedStyle.model_rebuild()
        NameValue.model_rebuild()
        RareStringData.model_rebuild()
        RareBooleanData.model_rebuild()
        RareIntegerData.model_rebuild()
        DocumentSnapshot.model_rebuild()
        NodeTreeSnapshot.model_rebuild()
        LayoutTreeSnapshot.model_rebuild()
        TextBoxSnapshot.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
