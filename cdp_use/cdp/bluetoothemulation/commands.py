# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP BluetoothEmulation Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import CentralState
    from .types import CharacteristicOperationType
    from .types import CharacteristicProperties
    from .types import DescriptorOperationType
    from .types import GATTOperationType
    from .types import ManufacturerData
    from .types import ScanEntry

class EnableParameters(TypedDict):
    state: "CentralState"
    """State of the simulated central."""
    leSupported: "bool"
    """If the simulated central supports low-energy."""





class SetSimulatedCentralStateParameters(TypedDict):
    state: "CentralState"
    """State of the simulated central."""





class SimulatePreconnectedPeripheralParameters(TypedDict):
    address: "str"
    name: "str"
    manufacturerData: "List[ManufacturerData]"
    knownServiceUuids: "List[str]"





class SimulateAdvertisementParameters(TypedDict):
    entry: "ScanEntry"





class SimulateGATTOperationResponseParameters(TypedDict):
    address: "str"
    type: "GATTOperationType"
    code: "int"





class SimulateCharacteristicOperationResponseParameters(TypedDict):
    characteristicId: "str"
    type: "CharacteristicOperationType"
    code: "int"
    data: "Optional[str]"





class SimulateDescriptorOperationResponseParameters(TypedDict):
    descriptorId: "str"
    type: "DescriptorOperationType"
    code: "int"
    data: "Optional[str]"





class AddServiceParameters(TypedDict):
    address: "str"
    serviceUuid: "str"


class AddServiceReturns(BaseModel):
    serviceId: "str"



class RemoveServiceParameters(TypedDict):
    serviceId: "str"





class AddCharacteristicParameters(TypedDict):
    serviceId: "str"
    characteristicUuid: "str"
    properties: "CharacteristicProperties"


class AddCharacteristicReturns(BaseModel):
    characteristicId: "str"



class RemoveCharacteristicParameters(TypedDict):
    characteristicId: "str"





class AddDescriptorParameters(TypedDict):
    characteristicId: "str"
    descriptorUuid: "str"


class AddDescriptorReturns(BaseModel):
    descriptorId: "str"



class RemoveDescriptorParameters(TypedDict):
    descriptorId: "str"





class SimulateGATTDisconnectionParameters(TypedDict):
    address: "str"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import CentralState
        from .types import CharacteristicOperationType
        from .types import CharacteristicProperties
        from .types import DescriptorOperationType
        from .types import GATTOperationType
        from .types import ManufacturerData
        from .types import ScanEntry
        # Rebuild models now that imports are available
        AddServiceReturns.model_rebuild()
        AddCharacteristicReturns.model_rebuild()
        AddDescriptorReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
