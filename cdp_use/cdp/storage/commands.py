# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Storage Domain Commands"""

from pydantic import BaseModel
from typing import Any, Dict, List
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..browser.types import BrowserContextID
    from ..network.types import Cookie
    from ..network.types import CookieParam
    from ..page.types import FrameId
    from .types import RelatedWebsiteSet
    from .types import SerializedStorageKey
    from .types import SharedStorageEntry
    from .types import SharedStorageMetadata
    from .types import StorageBucket
    from .types import TrustTokens
    from .types import UsageForType

class GetStorageKeyForFrameParameters(TypedDict):
    frameId: "FrameId"


class GetStorageKeyForFrameReturns(BaseModel):
    storageKey: "SerializedStorageKey"



class ClearDataForOriginParameters(TypedDict):
    origin: "str"
    storageTypes: "str"





class ClearDataForStorageKeyParameters(TypedDict):
    storageKey: "str"
    storageTypes: "str"





class GetCookiesParameters(TypedDict, total=False):
    browserContextId: "BrowserContextID"


class GetCookiesReturns(BaseModel):
    cookies: "List[Cookie]"



class SetCookiesParameters(TypedDict):
    cookies: "List[CookieParam]"
    browserContextId: "NotRequired[BrowserContextID]"





class ClearCookiesParameters(TypedDict, total=False):
    browserContextId: "BrowserContextID"





class GetUsageAndQuotaParameters(TypedDict):
    origin: "str"


class GetUsageAndQuotaReturns(BaseModel):
    usage: "float"
    quota: "float"
    overrideActive: "bool"
    usageBreakdown: "List[UsageForType]"



class OverrideQuotaForOriginParameters(TypedDict):
    origin: "str"
    quotaSize: "NotRequired[float]"





class TrackCacheStorageForOriginParameters(TypedDict):
    origin: "str"





class TrackCacheStorageForStorageKeyParameters(TypedDict):
    storageKey: "str"





class TrackIndexedDBForOriginParameters(TypedDict):
    origin: "str"





class TrackIndexedDBForStorageKeyParameters(TypedDict):
    storageKey: "str"





class UntrackCacheStorageForOriginParameters(TypedDict):
    origin: "str"





class UntrackCacheStorageForStorageKeyParameters(TypedDict):
    storageKey: "str"





class UntrackIndexedDBForOriginParameters(TypedDict):
    origin: "str"





class UntrackIndexedDBForStorageKeyParameters(TypedDict):
    storageKey: "str"





class GetTrustTokensReturns(BaseModel):
    tokens: "List[TrustTokens]"



class ClearTrustTokensParameters(TypedDict):
    issuerOrigin: "str"


class ClearTrustTokensReturns(BaseModel):
    didDeleteTokens: "bool"



class GetInterestGroupDetailsParameters(TypedDict):
    ownerOrigin: "str"
    name: "str"


class GetInterestGroupDetailsReturns(BaseModel):
    details: "Dict[str, Any]"



class SetInterestGroupTrackingParameters(TypedDict):
    enable: "bool"





class SetInterestGroupAuctionTrackingParameters(TypedDict):
    enable: "bool"





class GetSharedStorageMetadataParameters(TypedDict):
    ownerOrigin: "str"


class GetSharedStorageMetadataReturns(BaseModel):
    metadata: "SharedStorageMetadata"



class GetSharedStorageEntriesParameters(TypedDict):
    ownerOrigin: "str"


class GetSharedStorageEntriesReturns(BaseModel):
    entries: "List[SharedStorageEntry]"



class SetSharedStorageEntryParameters(TypedDict):
    ownerOrigin: "str"
    key: "str"
    value: "str"
    ignoreIfPresent: "NotRequired[bool]"





class DeleteSharedStorageEntryParameters(TypedDict):
    ownerOrigin: "str"
    key: "str"





class ClearSharedStorageEntriesParameters(TypedDict):
    ownerOrigin: "str"





class ResetSharedStorageBudgetParameters(TypedDict):
    ownerOrigin: "str"





class SetSharedStorageTrackingParameters(TypedDict):
    enable: "bool"





class SetStorageBucketTrackingParameters(TypedDict):
    storageKey: "str"
    enable: "bool"





class DeleteStorageBucketParameters(TypedDict):
    bucket: "StorageBucket"





class RunBounceTrackingMitigationsReturns(BaseModel):
    deletedSites: "List[str]"



class SetAttributionReportingLocalTestingModeParameters(TypedDict):
    enabled: "bool"





class SetAttributionReportingTrackingParameters(TypedDict):
    enable: "bool"





class SendPendingAttributionReportsReturns(BaseModel):
    numSent: "int"



class GetRelatedWebsiteSetsReturns(BaseModel):
    sets: "List[RelatedWebsiteSet]"



class GetAffectedUrlsForThirdPartyCookieMetadataParameters(TypedDict):
    firstPartyUrl: "str"
    thirdPartyUrls: "List[str]"


class GetAffectedUrlsForThirdPartyCookieMetadataReturns(BaseModel):
    matchedUrls: "List[str]"



class SetProtectedAudienceKAnonymityParameters(TypedDict):
    owner: "str"
    name: "str"
    hashes: "List[str]"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..browser.types import BrowserContextID
        from ..network.types import Cookie
        from ..network.types import CookieParam
        from ..page.types import FrameId
        from .types import RelatedWebsiteSet
        from .types import SerializedStorageKey
        from .types import SharedStorageEntry
        from .types import SharedStorageMetadata
        from .types import StorageBucket
        from .types import TrustTokens
        from .types import UsageForType
        # Rebuild models now that imports are available
        GetStorageKeyForFrameReturns.model_rebuild()
        GetCookiesReturns.model_rebuild()
        GetUsageAndQuotaReturns.model_rebuild()
        GetTrustTokensReturns.model_rebuild()
        ClearTrustTokensReturns.model_rebuild()
        GetInterestGroupDetailsReturns.model_rebuild()
        GetSharedStorageMetadataReturns.model_rebuild()
        GetSharedStorageEntriesReturns.model_rebuild()
        RunBounceTrackingMitigationsReturns.model_rebuild()
        SendPendingAttributionReportsReturns.model_rebuild()
        GetRelatedWebsiteSetsReturns.model_rebuild()
        GetAffectedUrlsForThirdPartyCookieMetadataReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
