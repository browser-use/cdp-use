# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Storage Domain Events"""

from pydantic import BaseModel
from typing import Any, Dict, List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import RequestId
    from ..network.types import TimeSinceEpoch
    from ..page.types import FrameId
    from ..target.types import TargetID
    from .types import AttributionReportingAggregatableResult
    from .types import AttributionReportingEventLevelResult
    from .types import AttributionReportingReportResult
    from .types import AttributionReportingSourceRegistration
    from .types import AttributionReportingSourceRegistrationResult
    from .types import AttributionReportingTriggerRegistration
    from .types import InterestGroupAccessType
    from .types import InterestGroupAuctionEventType
    from .types import InterestGroupAuctionFetchType
    from .types import InterestGroupAuctionId
    from .types import SharedStorageAccessMethod
    from .types import SharedStorageAccessParams
    from .types import SharedStorageAccessScope
    from .types import StorageBucketInfo

class CacheStorageContentUpdatedEvent(BaseModel):
    """A cache's contents have been modified."""
    origin: "str"
    storageKey: "str"
    bucketId: "str"
    cacheName: "str"



class CacheStorageListUpdatedEvent(BaseModel):
    """A cache has been added/deleted."""
    origin: "str"
    storageKey: "str"
    bucketId: "str"



class IndexedDBContentUpdatedEvent(BaseModel):
    """The origin's IndexedDB object store has been modified."""
    origin: "str"
    storageKey: "str"
    bucketId: "str"
    databaseName: "str"
    objectStoreName: "str"



class IndexedDBListUpdatedEvent(BaseModel):
    """The origin's IndexedDB database list has been modified."""
    origin: "str"
    storageKey: "str"
    bucketId: "str"



class InterestGroupAccessedEvent(BaseModel):
    """One of the interest groups was accessed. Note that these events are global
to all targets sharing an interest group store."""
    accessTime: "TimeSinceEpoch"
    type: "Union[InterestGroupAccessType, str]"
    ownerOrigin: "str"
    name: "str"
    componentSellerOrigin: "Optional[str]" = None
    bid: "Optional[float]" = None
    bidCurrency: "Optional[str]" = None
    uniqueAuctionId: "Optional[InterestGroupAuctionId]" = None



class InterestGroupAuctionEventOccurredEvent(BaseModel):
    """An auction involving interest groups is taking place. These events are
target-specific."""
    eventTime: "TimeSinceEpoch"
    type: "Union[InterestGroupAuctionEventType, str]"
    uniqueAuctionId: "InterestGroupAuctionId"
    parentAuctionId: "Optional[InterestGroupAuctionId]" = None
    auctionConfig: "Optional[Dict[str, Any]]" = None



class InterestGroupAuctionNetworkRequestCreatedEvent(BaseModel):
    """Specifies which auctions a particular network fetch may be related to, and
in what role. Note that it is not ordered with respect to
Network.requestWillBeSent (but will happen before loadingFinished
loadingFailed)."""
    type: "Union[InterestGroupAuctionFetchType, str]"
    requestId: "RequestId"
    auctions: "List[InterestGroupAuctionId]"



class SharedStorageAccessedEvent(BaseModel):
    """Shared storage was accessed by the associated page.
The following parameters are included in all events."""
    accessTime: "TimeSinceEpoch"
    scope: "Union[SharedStorageAccessScope, str]"
    method: "Union[SharedStorageAccessMethod, str]"
    mainFrameId: "FrameId"
    ownerOrigin: "str"
    ownerSite: "str"
    params: "SharedStorageAccessParams"



class SharedStorageWorkletOperationExecutionFinishedEvent(BaseModel):
    """A shared storage run or selectURL operation finished its execution.
The following parameters are included in all events."""
    finishedTime: "TimeSinceEpoch"
    executionTime: "int"
    method: "Union[SharedStorageAccessMethod, str]"
    operationId: "str"
    workletTargetId: "TargetID"
    mainFrameId: "FrameId"
    ownerOrigin: "str"



class StorageBucketCreatedOrUpdatedEvent(BaseModel):
    bucketInfo: "StorageBucketInfo"



class StorageBucketDeletedEvent(BaseModel):
    bucketId: "str"



class AttributionReportingSourceRegisteredEvent(BaseModel):
    registration: "AttributionReportingSourceRegistration"
    result: "Union[AttributionReportingSourceRegistrationResult, str]"



class AttributionReportingTriggerRegisteredEvent(BaseModel):
    registration: "AttributionReportingTriggerRegistration"
    eventLevel: "Union[AttributionReportingEventLevelResult, str]"
    aggregatable: "Union[AttributionReportingAggregatableResult, str]"



class AttributionReportingReportSentEvent(BaseModel):
    url: "str"
    body: "Dict[str, Any]"
    result: "Union[AttributionReportingReportResult, str]"
    netError: "Optional[int]" = None
    netErrorName: "Optional[str]" = None
    httpStatusCode: "Optional[int]" = None



class AttributionReportingVerboseDebugReportSentEvent(BaseModel):
    url: "str"
    body: "Optional[List[Dict[str, Any]]]" = None
    netError: "Optional[int]" = None
    netErrorName: "Optional[str]" = None
    httpStatusCode: "Optional[int]" = None


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..network.types import RequestId
        from ..network.types import TimeSinceEpoch
        from ..page.types import FrameId
        from ..target.types import TargetID
        from .types import AttributionReportingAggregatableResult
        from .types import AttributionReportingEventLevelResult
        from .types import AttributionReportingReportResult
        from .types import AttributionReportingSourceRegistration
        from .types import AttributionReportingSourceRegistrationResult
        from .types import AttributionReportingTriggerRegistration
        from .types import InterestGroupAccessType
        from .types import InterestGroupAuctionEventType
        from .types import InterestGroupAuctionFetchType
        from .types import InterestGroupAuctionId
        from .types import SharedStorageAccessMethod
        from .types import SharedStorageAccessParams
        from .types import SharedStorageAccessScope
        from .types import StorageBucketInfo
        # Rebuild models now that imports are available
        CacheStorageContentUpdatedEvent.model_rebuild()
        CacheStorageListUpdatedEvent.model_rebuild()
        IndexedDBContentUpdatedEvent.model_rebuild()
        IndexedDBListUpdatedEvent.model_rebuild()
        InterestGroupAccessedEvent.model_rebuild()
        InterestGroupAuctionEventOccurredEvent.model_rebuild()
        InterestGroupAuctionNetworkRequestCreatedEvent.model_rebuild()
        SharedStorageAccessedEvent.model_rebuild()
        SharedStorageWorkletOperationExecutionFinishedEvent.model_rebuild()
        StorageBucketCreatedOrUpdatedEvent.model_rebuild()
        StorageBucketDeletedEvent.model_rebuild()
        AttributionReportingSourceRegisteredEvent.model_rebuild()
        AttributionReportingTriggerRegisteredEvent.model_rebuild()
        AttributionReportingReportSentEvent.model_rebuild()
        AttributionReportingVerboseDebugReportSentEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
