# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Tracing Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

class MemoryDumpConfig(BaseModel):
    """Configuration for memory dump. Used only when \"memory-infra\" category is enabled."""
    pass



class TraceConfig(BaseModel):
    recordMode: "Optional[str]" = None
    traceBufferSizeInKb: "Optional[float]" = None
    enableSampling: "Optional[bool]" = None
    enableSystrace: "Optional[bool]" = None
    enableArgumentFilter: "Optional[bool]" = None
    includedCategories: "Optional[List[str]]" = None
    excludedCategories: "Optional[List[str]]" = None
    syntheticDelays: "Optional[List[str]]" = None
    memoryDumpConfig: "Optional[MemoryDumpConfig]" = None



class StreamFormat(Enum):
    """Data format of a trace. Can be either the legacy JSON format or the
protocol buffer format. Note that the JSON format will be deprecated soon."""
    JSON = "json"
    PROTO = "proto"



class StreamCompression(Enum):
    """Compression type to use for traces returned via streams."""
    NONE = "none"
    GZIP = "gzip"



class MemoryDumpLevelOfDetail(Enum):
    """Details exposed when memory request explicitly declared.
Keep consistent with memory_dump_request_args.h and
memory_instrumentation.mojom"""
    BACKGROUND = "background"
    LIGHT = "light"
    DETAILED = "detailed"



class TracingBackend(Enum):
    """Backend type to use for tracing. `chrome` uses the Chrome-integrated
tracing service and is supported on all platforms. `system` is only
supported on Chrome OS and uses the Perfetto system tracing service.
`auto` chooses `system` when the perfettoConfig provided to Tracing.start
specifies at least one non-Chrome data source; otherwise uses `chrome`."""
    AUTO = "auto"
    CHROME = "chrome"
    SYSTEM = "system"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        # Rebuild models now that imports are available
        MemoryDumpConfig.model_rebuild()
        TraceConfig.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
