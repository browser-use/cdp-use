# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOM Domain Events"""

from pydantic import BaseModel
from typing import List

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import NodeId
    from .types import BackendNode
    from .types import Node
    from .types import NodeId

class AttributeModifiedEvent(BaseModel):
    """Fired when `Element`'s attribute is modified."""
    nodeId: "NodeId"
    name: "str"
    value: "str"



class AttributeRemovedEvent(BaseModel):
    """Fired when `Element`'s attribute is removed."""
    nodeId: "NodeId"
    name: "str"



class CharacterDataModifiedEvent(BaseModel):
    """Mirrors `DOMCharacterDataModified` event."""
    nodeId: "NodeId"
    characterData: "str"



class ChildNodeCountUpdatedEvent(BaseModel):
    """Fired when `Container`'s child node count has changed."""
    nodeId: "NodeId"
    childNodeCount: "int"



class ChildNodeInsertedEvent(BaseModel):
    """Mirrors `DOMNodeInserted` event."""
    parentNodeId: "NodeId"
    previousNodeId: "NodeId"
    node: "Node"



class ChildNodeRemovedEvent(BaseModel):
    """Mirrors `DOMNodeRemoved` event."""
    parentNodeId: "NodeId"
    nodeId: "NodeId"



class DistributedNodesUpdatedEvent(BaseModel):
    """Called when distribution is changed."""
    insertionPointId: "NodeId"
    distributedNodes: "List[BackendNode]"



class DocumentUpdatedEvent(BaseModel):
    """Fired when `Document` has been totally updated. Node ids are no longer valid."""
    pass



class InlineStyleInvalidatedEvent(BaseModel):
    """Fired when `Element`'s inline style is modified via a CSS property modification."""
    nodeIds: "List[NodeId]"



class PseudoElementAddedEvent(BaseModel):
    """Called when a pseudo element is added to an element."""
    parentId: "NodeId"
    pseudoElement: "Node"



class TopLayerElementsUpdatedEvent(BaseModel):
    """Called when top layer elements are changed."""
    pass



class ScrollableFlagUpdatedEvent(BaseModel):
    """Fired when a node's scrollability state changes."""
    nodeId: "NodeId"
    isScrollable: "bool"



class PseudoElementRemovedEvent(BaseModel):
    """Called when a pseudo element is removed from an element."""
    parentId: "NodeId"
    pseudoElementId: "NodeId"



class SetChildNodesEvent(BaseModel):
    """Fired when backend wants to provide client with the missing DOM structure. This happens upon
most of the calls requesting node ids."""
    parentId: "NodeId"
    nodes: "List[Node]"



class ShadowRootPoppedEvent(BaseModel):
    """Called when shadow root is popped from the element."""
    hostId: "NodeId"
    rootId: "NodeId"



class ShadowRootPushedEvent(BaseModel):
    """Called when shadow root is pushed into the element."""
    hostId: "NodeId"
    root: "Node"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import NodeId
        from .types import BackendNode
        from .types import Node
        from .types import NodeId
        # Rebuild models now that imports are available
        AttributeModifiedEvent.model_rebuild()
        AttributeRemovedEvent.model_rebuild()
        CharacterDataModifiedEvent.model_rebuild()
        ChildNodeCountUpdatedEvent.model_rebuild()
        ChildNodeInsertedEvent.model_rebuild()
        ChildNodeRemovedEvent.model_rebuild()
        DistributedNodesUpdatedEvent.model_rebuild()
        DocumentUpdatedEvent.model_rebuild()
        InlineStyleInvalidatedEvent.model_rebuild()
        PseudoElementAddedEvent.model_rebuild()
        TopLayerElementsUpdatedEvent.model_rebuild()
        ScrollableFlagUpdatedEvent.model_rebuild()
        PseudoElementRemovedEvent.model_rebuild()
        SetChildNodesEvent.model_rebuild()
        ShadowRootPoppedEvent.model_rebuild()
        ShadowRootPushedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
