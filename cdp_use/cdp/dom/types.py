# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOM Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Any, List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..page.types import FrameId

"""Unique DOM node identifier."""
NodeId = int



"""Unique DOM node identifier used to reference a node that may not have been pushed to the
front-end."""
BackendNodeId = int



class BackendNode(BaseModel):
    """Backend node with a friendly name."""
    nodeType: "int"
    nodeName: "str"
    backendNodeId: "BackendNodeId"



class PseudoType(Enum):
    """Pseudo element type."""
    FIRST_LINE = "first-line"
    FIRST_LETTER = "first-letter"
    CHECKMARK = "checkmark"
    BEFORE = "before"
    AFTER = "after"
    PICKER_ICON = "picker-icon"
    MARKER = "marker"
    BACKDROP = "backdrop"
    COLUMN = "column"
    SELECTION = "selection"
    SEARCH_TEXT = "search-text"
    TARGET_TEXT = "target-text"
    SPELLING_ERROR = "spelling-error"
    GRAMMAR_ERROR = "grammar-error"
    HIGHLIGHT = "highlight"
    FIRST_LINE_INHERITED = "first-line-inherited"
    SCROLL_MARKER = "scroll-marker"
    SCROLL_MARKER_GROUP = "scroll-marker-group"
    SCROLL_BUTTON = "scroll-button"
    SCROLLBAR = "scrollbar"
    SCROLLBAR_THUMB = "scrollbar-thumb"
    SCROLLBAR_BUTTON = "scrollbar-button"
    SCROLLBAR_TRACK = "scrollbar-track"
    SCROLLBAR_TRACK_PIECE = "scrollbar-track-piece"
    SCROLLBAR_CORNER = "scrollbar-corner"
    RESIZER = "resizer"
    INPUT_LIST_BUTTON = "input-list-button"
    VIEW_TRANSITION = "view-transition"
    VIEW_TRANSITION_GROUP = "view-transition-group"
    VIEW_TRANSITION_IMAGE_PAIR = "view-transition-image-pair"
    VIEW_TRANSITION_GROUP_CHILDREN = "view-transition-group-children"
    VIEW_TRANSITION_OLD = "view-transition-old"
    VIEW_TRANSITION_NEW = "view-transition-new"
    PLACEHOLDER = "placeholder"
    FILE_SELECTOR_BUTTON = "file-selector-button"
    DETAILS_CONTENT = "details-content"
    PICKER = "picker"
    PERMISSION_ICON = "permission-icon"



class ShadowRootType(Enum):
    """Shadow root type."""
    USER_AGENT = "user-agent"
    OPEN = "open"
    CLOSED = "closed"



class CompatibilityMode(Enum):
    """Document compatibility mode."""
    QUIRKSMODE = "QuirksMode"
    LIMITEDQUIRKSMODE = "LimitedQuirksMode"
    NOQUIRKSMODE = "NoQuirksMode"



class PhysicalAxes(Enum):
    """ContainerSelector physical axes"""
    HORIZONTAL = "Horizontal"
    VERTICAL = "Vertical"
    BOTH = "Both"



class LogicalAxes(Enum):
    """ContainerSelector logical axes"""
    INLINE = "Inline"
    BLOCK = "Block"
    BOTH = "Both"



class ScrollOrientation(Enum):
    """Physical scroll orientation"""
    HORIZONTAL = "horizontal"
    VERTICAL = "vertical"



class Node(BaseModel):
    """DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
DOMNode is a base node mirror type."""
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    nodeType: "int"
    nodeName: "str"
    localName: "str"
    nodeValue: "str"
    parentId: "Optional[NodeId]" = None
    childNodeCount: "Optional[int]" = None
    children: "Optional[List[Node]]" = None
    attributes: "Optional[List[str]]" = None
    documentURL: "Optional[str]" = None
    baseURL: "Optional[str]" = None
    publicId: "Optional[str]" = None
    systemId: "Optional[str]" = None
    internalSubset: "Optional[str]" = None
    xmlVersion: "Optional[str]" = None
    name: "Optional[str]" = None
    value: "Optional[str]" = None
    pseudoType: "Optional[PseudoType]" = None
    pseudoIdentifier: "Optional[str]" = None
    shadowRootType: "Optional[ShadowRootType]" = None
    frameId: "Optional[FrameId]" = None
    contentDocument: "Optional[Node]" = None
    shadowRoots: "Optional[List[Node]]" = None
    templateContent: "Optional[Node]" = None
    pseudoElements: "Optional[List[Node]]" = None
    importedDocument: "Optional[Node]" = None
    distributedNodes: "Optional[List[BackendNode]]" = None
    isSVG: "Optional[bool]" = None
    compatibilityMode: "Optional[CompatibilityMode]" = None
    assignedSlot: "Optional[BackendNode]" = None
    isScrollable: "Optional[bool]" = None



class DetachedElementInfo(BaseModel):
    """A structure to hold the top-level node of a detached tree and an array of its retained descendants."""
    treeNode: "Node"
    retainedNodeIds: "List[NodeId]"



class RGBA(BaseModel):
    """A structure holding an RGBA color."""
    r: "int"
    g: "int"
    b: "int"
    a: "Optional[float]" = None



"""An array of quad vertices, x immediately followed by y for each point, points clock-wise."""
Quad = List[float]



class BoxModel(BaseModel):
    """Box model."""
    content: "Quad"
    padding: "Quad"
    border: "Quad"
    margin: "Quad"
    width: "int"
    height: "int"
    shapeOutside: "Optional[ShapeOutsideInfo]" = None



class ShapeOutsideInfo(BaseModel):
    """CSS Shape Outside details."""
    bounds: "Quad"
    shape: "List[Any]"
    marginShape: "List[Any]"



class Rect(BaseModel):
    """Rectangle."""
    x: "float"
    y: "float"
    width: "float"
    height: "float"



class CSSComputedStyleProperty(BaseModel):
    name: "str"
    value: "str"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..page.types import FrameId
        # Rebuild models now that imports are available
        BackendNode.model_rebuild()
        Node.model_rebuild()
        DetachedElementInfo.model_rebuild()
        RGBA.model_rebuild()
        BoxModel.model_rebuild()
        ShapeOutsideInfo.model_rebuild()
        Rect.model_rebuild()
        CSSComputedStyleProperty.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
