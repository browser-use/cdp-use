# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOM Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..page.types import FrameId
    from ..runtime.types import ExecutionContextId
    from ..runtime.types import RemoteObject
    from ..runtime.types import RemoteObjectId
    from ..runtime.types import StackTrace
    from .types import BackendNodeId
    from .types import BoxModel
    from .types import CSSComputedStyleProperty
    from .types import DetachedElementInfo
    from .types import LogicalAxes
    from .types import Node
    from .types import NodeId
    from .types import PhysicalAxes
    from .types import Quad
    from .types import Rect

class CollectClassNamesFromSubtreeParameters(TypedDict):
    nodeId: "NodeId"


class CollectClassNamesFromSubtreeReturns(BaseModel):
    classNames: "List[str]"



class CopyToParameters(TypedDict):
    nodeId: "NodeId"
    targetNodeId: "NodeId"
    insertBeforeNodeId: "NotRequired[NodeId]"


class CopyToReturns(BaseModel):
    nodeId: "NodeId"



class DescribeNodeParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"
    depth: "int"
    pierce: "bool"


class DescribeNodeReturns(BaseModel):
    node: "Node"



class ScrollIntoViewIfNeededParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"
    rect: "Rect"





class DiscardSearchResultsParameters(TypedDict):
    searchId: "str"





class EnableParameters(TypedDict, total=False):
    includeWhitespace: "str"





class FocusParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"





class GetAttributesParameters(TypedDict):
    nodeId: "NodeId"


class GetAttributesReturns(BaseModel):
    attributes: "List[str]"



class GetBoxModelParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"


class GetBoxModelReturns(BaseModel):
    model: "BoxModel"



class GetContentQuadsParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"


class GetContentQuadsReturns(BaseModel):
    quads: "List[Quad]"



class GetDocumentParameters(TypedDict, total=False):
    depth: "int"
    pierce: "bool"


class GetDocumentReturns(BaseModel):
    root: "Node"



class GetFlattenedDocumentParameters(TypedDict, total=False):
    depth: "int"
    pierce: "bool"


class GetFlattenedDocumentReturns(BaseModel):
    nodes: "List[Node]"



class GetNodesForSubtreeByStyleParameters(TypedDict):
    nodeId: "NodeId"
    computedStyles: "List[CSSComputedStyleProperty]"
    pierce: "NotRequired[bool]"


class GetNodesForSubtreeByStyleReturns(BaseModel):
    nodeIds: "List[NodeId]"



class GetNodeForLocationParameters(TypedDict):
    x: "int"
    y: "int"
    includeUserAgentShadowDOM: "NotRequired[bool]"
    ignorePointerEventsNone: "NotRequired[bool]"


class GetNodeForLocationReturns(BaseModel):
    backendNodeId: "BackendNodeId"
    frameId: "FrameId"
    nodeId: "Optional[NodeId]" = None



class GetOuterHTMLParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectId: "RemoteObjectId"
    includeShadowDOM: "bool"


class GetOuterHTMLReturns(BaseModel):
    outerHTML: "str"



class GetRelayoutBoundaryParameters(TypedDict):
    nodeId: "NodeId"


class GetRelayoutBoundaryReturns(BaseModel):
    nodeId: "NodeId"



class GetSearchResultsParameters(TypedDict):
    searchId: "str"
    fromIndex: "int"
    toIndex: "int"


class GetSearchResultsReturns(BaseModel):
    nodeIds: "List[NodeId]"



class MoveToParameters(TypedDict):
    nodeId: "NodeId"
    targetNodeId: "NodeId"
    insertBeforeNodeId: "NotRequired[NodeId]"


class MoveToReturns(BaseModel):
    nodeId: "NodeId"



class PerformSearchParameters(TypedDict):
    query: "str"
    includeUserAgentShadowDOM: "NotRequired[bool]"


class PerformSearchReturns(BaseModel):
    searchId: "str"
    resultCount: "int"



class PushNodeByPathToFrontendParameters(TypedDict):
    path: "str"


class PushNodeByPathToFrontendReturns(BaseModel):
    nodeId: "NodeId"



class PushNodesByBackendIdsToFrontendParameters(TypedDict):
    backendNodeIds: "List[BackendNodeId]"


class PushNodesByBackendIdsToFrontendReturns(BaseModel):
    nodeIds: "List[NodeId]"



class QuerySelectorParameters(TypedDict):
    nodeId: "NodeId"
    selector: "str"


class QuerySelectorReturns(BaseModel):
    nodeId: "NodeId"



class QuerySelectorAllParameters(TypedDict):
    nodeId: "NodeId"
    selector: "str"


class QuerySelectorAllReturns(BaseModel):
    nodeIds: "List[NodeId]"



class GetTopLayerElementsReturns(BaseModel):
    nodeIds: "List[NodeId]"



class GetElementByRelationParameters(TypedDict):
    nodeId: "NodeId"
    relation: "str"


class GetElementByRelationReturns(BaseModel):
    nodeId: "NodeId"



class RemoveAttributeParameters(TypedDict):
    nodeId: "NodeId"
    name: "str"





class RemoveNodeParameters(TypedDict):
    nodeId: "NodeId"





class RequestChildNodesParameters(TypedDict):
    nodeId: "NodeId"
    depth: "NotRequired[int]"
    pierce: "NotRequired[bool]"





class RequestNodeParameters(TypedDict):
    objectId: "RemoteObjectId"


class RequestNodeReturns(BaseModel):
    nodeId: "NodeId"



class ResolveNodeParameters(TypedDict, total=False):
    nodeId: "NodeId"
    backendNodeId: "BackendNodeId"
    objectGroup: "str"
    executionContextId: "ExecutionContextId"


class ResolveNodeReturns(BaseModel):
    object: "RemoteObject"



class SetAttributeValueParameters(TypedDict):
    nodeId: "NodeId"
    name: "str"
    value: "str"





class SetAttributesAsTextParameters(TypedDict):
    nodeId: "NodeId"
    text: "str"
    name: "NotRequired[str]"





class SetFileInputFilesParameters(TypedDict):
    files: "List[str]"
    nodeId: "NotRequired[NodeId]"
    backendNodeId: "NotRequired[BackendNodeId]"
    objectId: "NotRequired[RemoteObjectId]"





class SetNodeStackTracesEnabledParameters(TypedDict):
    enable: "bool"





class GetNodeStackTracesParameters(TypedDict):
    nodeId: "NodeId"


class GetNodeStackTracesReturns(BaseModel):
    creation: "Optional[StackTrace]" = None



class GetFileInfoParameters(TypedDict):
    objectId: "RemoteObjectId"


class GetFileInfoReturns(BaseModel):
    path: "str"



class GetDetachedDomNodesReturns(BaseModel):
    detachedNodes: "List[DetachedElementInfo]"



class SetInspectedNodeParameters(TypedDict):
    nodeId: "NodeId"





class SetNodeNameParameters(TypedDict):
    nodeId: "NodeId"
    name: "str"


class SetNodeNameReturns(BaseModel):
    nodeId: "NodeId"



class SetNodeValueParameters(TypedDict):
    nodeId: "NodeId"
    value: "str"





class SetOuterHTMLParameters(TypedDict):
    nodeId: "NodeId"
    outerHTML: "str"





class GetFrameOwnerParameters(TypedDict):
    frameId: "FrameId"


class GetFrameOwnerReturns(BaseModel):
    backendNodeId: "BackendNodeId"
    nodeId: "Optional[NodeId]" = None



class GetContainerForNodeParameters(TypedDict):
    nodeId: "NodeId"
    containerName: "NotRequired[str]"
    physicalAxes: "NotRequired[Union[PhysicalAxes, str]]"
    logicalAxes: "NotRequired[Union[LogicalAxes, str]]"
    queriesScrollState: "NotRequired[bool]"


class GetContainerForNodeReturns(BaseModel):
    nodeId: "Optional[NodeId]" = None



class GetQueryingDescendantsForContainerParameters(TypedDict):
    nodeId: "NodeId"


class GetQueryingDescendantsForContainerReturns(BaseModel):
    nodeIds: "List[NodeId]"



class GetAnchorElementParameters(TypedDict):
    nodeId: "NodeId"
    anchorSpecifier: "NotRequired[str]"


class GetAnchorElementReturns(BaseModel):
    nodeId: "NodeId"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..page.types import FrameId
        from ..runtime.types import ExecutionContextId
        from ..runtime.types import RemoteObject
        from ..runtime.types import RemoteObjectId
        from ..runtime.types import StackTrace
        from .types import BackendNodeId
        from .types import BoxModel
        from .types import CSSComputedStyleProperty
        from .types import DetachedElementInfo
        from .types import LogicalAxes
        from .types import Node
        from .types import NodeId
        from .types import PhysicalAxes
        from .types import Quad
        from .types import Rect
        # Rebuild models now that imports are available
        CollectClassNamesFromSubtreeReturns.model_rebuild()
        CopyToReturns.model_rebuild()
        DescribeNodeReturns.model_rebuild()
        GetAttributesReturns.model_rebuild()
        GetBoxModelReturns.model_rebuild()
        GetContentQuadsReturns.model_rebuild()
        GetDocumentReturns.model_rebuild()
        GetFlattenedDocumentReturns.model_rebuild()
        GetNodesForSubtreeByStyleReturns.model_rebuild()
        GetNodeForLocationReturns.model_rebuild()
        GetOuterHTMLReturns.model_rebuild()
        GetRelayoutBoundaryReturns.model_rebuild()
        GetSearchResultsReturns.model_rebuild()
        MoveToReturns.model_rebuild()
        PerformSearchReturns.model_rebuild()
        PushNodeByPathToFrontendReturns.model_rebuild()
        PushNodesByBackendIdsToFrontendReturns.model_rebuild()
        QuerySelectorReturns.model_rebuild()
        QuerySelectorAllReturns.model_rebuild()
        GetTopLayerElementsReturns.model_rebuild()
        GetElementByRelationReturns.model_rebuild()
        RequestNodeReturns.model_rebuild()
        ResolveNodeReturns.model_rebuild()
        GetNodeStackTracesReturns.model_rebuild()
        GetFileInfoReturns.model_rebuild()
        GetDetachedDomNodesReturns.model_rebuild()
        SetNodeNameReturns.model_rebuild()
        GetFrameOwnerReturns.model_rebuild()
        GetContainerForNodeReturns.model_rebuild()
        GetQueryingDescendantsForContainerReturns.model_rebuild()
        GetAnchorElementReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
