# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP IndexedDB Domain Types"""

from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..runtime.types import RemoteObject

class DatabaseWithObjectStores(BaseModel):
    """Database with an array of object stores."""
    name: "str"
    version: "float"
    objectStores: "List[ObjectStore]"



class ObjectStore(BaseModel):
    """Object store."""
    name: "str"
    keyPath: "KeyPath"
    autoIncrement: "bool"
    indexes: "List[ObjectStoreIndex]"



class ObjectStoreIndex(BaseModel):
    """Object store index."""
    name: "str"
    keyPath: "KeyPath"
    unique: "bool"
    multiEntry: "bool"



class Key(BaseModel):
    """Key."""
    type: "str"
    number: "Optional[float]" = None
    string: "Optional[str]" = None
    date: "Optional[float]" = None
    array: "Optional[List[Key]]" = None



class KeyRange(BaseModel):
    """Key range."""
    lowerOpen: "bool"
    upperOpen: "bool"
    lower: "Optional[Key]" = None
    upper: "Optional[Key]" = None



class DataEntry(BaseModel):
    """Data entry."""
    key: "RemoteObject"
    primaryKey: "RemoteObject"
    value: "RemoteObject"



class KeyPath(BaseModel):
    """Key path."""
    type: "str"
    string: "Optional[str]" = None
    array: "Optional[List[str]]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..runtime.types import RemoteObject
        # Rebuild models now that imports are available
        DatabaseWithObjectStores.model_rebuild()
        ObjectStore.model_rebuild()
        ObjectStoreIndex.model_rebuild()
        Key.model_rebuild()
        KeyRange.model_rebuild()
        DataEntry.model_rebuild()
        KeyPath.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
