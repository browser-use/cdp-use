# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP IndexedDB Domain Commands"""

from pydantic import BaseModel
from typing import List
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..storage.types import StorageBucket
    from .types import DataEntry
    from .types import DatabaseWithObjectStores
    from .types import KeyRange

class ClearObjectStoreParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"
    objectStoreName: "str"





class DeleteDatabaseParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"





class DeleteObjectStoreEntriesParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"
    objectStoreName: "str"
    keyRange: "KeyRange"





class RequestDataParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"
    objectStoreName: "str"
    indexName: "str"
    skipCount: "int"
    pageSize: "int"
    keyRange: "NotRequired[KeyRange]"


class RequestDataReturns(BaseModel):
    objectStoreDataEntries: "List[DataEntry]"
    hasMore: "bool"



class GetMetadataParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"
    objectStoreName: "str"


class GetMetadataReturns(BaseModel):
    entriesCount: "float"
    keyGeneratorValue: "float"



class RequestDatabaseParameters(TypedDict):
    securityOrigin: "NotRequired[str]"
    storageKey: "NotRequired[str]"
    storageBucket: "NotRequired[StorageBucket]"
    databaseName: "str"


class RequestDatabaseReturns(BaseModel):
    databaseWithObjectStores: "DatabaseWithObjectStores"



class RequestDatabaseNamesParameters(TypedDict, total=False):
    securityOrigin: "str"
    storageKey: "str"
    storageBucket: "StorageBucket"


class RequestDatabaseNamesReturns(BaseModel):
    databaseNames: "List[str]"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..storage.types import StorageBucket
        from .types import DataEntry
        from .types import DatabaseWithObjectStores
        from .types import KeyRange
        # Rebuild models now that imports are available
        RequestDataReturns.model_rebuild()
        GetMetadataReturns.model_rebuild()
        RequestDatabaseReturns.model_rebuild()
        RequestDatabaseNamesReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
