# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP IndexedDB Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..storage.types import StorageBucket
    from .types import DataEntry
    from .types import DatabaseWithObjectStores
    from .types import KeyRange

class ClearObjectStoreParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    """Database name."""
    objectStoreName: "str"
    """Object store name."""





class DeleteDatabaseParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    """Database name."""





class DeleteObjectStoreEntriesParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    objectStoreName: "str"
    keyRange: "KeyRange"
    """Range of entry keys to delete"""





class RequestDataParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    """Database name."""
    objectStoreName: "str"
    """Object store name."""
    indexName: "str"
    """Index name, empty string for object store data requests."""
    skipCount: "int"
    """Number of records to skip."""
    pageSize: "int"
    """Number of records to fetch."""
    keyRange: "Optional[KeyRange]"
    """Key range."""


class RequestDataReturns(BaseModel):
    objectStoreDataEntries: "List[DataEntry]"
    hasMore: "bool"



class GetMetadataParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    """Database name."""
    objectStoreName: "str"
    """Object store name."""


class GetMetadataReturns(BaseModel):
    entriesCount: "float"
    keyGeneratorValue: "float"



class RequestDatabaseParameters(TypedDict):
    securityOrigin: "Optional[str]"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "Optional[str]"
    """Storage key."""
    storageBucket: "Optional[StorageBucket]"
    """Storage bucket. If not specified, it uses the default bucket."""
    databaseName: "str"
    """Database name."""


class RequestDatabaseReturns(BaseModel):
    databaseWithObjectStores: "DatabaseWithObjectStores"



class RequestDatabaseNamesParameters(TypedDict, total=False):
    securityOrigin: "str"
    """At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
Security origin."""
    storageKey: "str"
    """Storage key."""
    storageBucket: "StorageBucket"
    """Storage bucket. If not specified, it uses the default bucket."""


class RequestDatabaseNamesReturns(BaseModel):
    databaseNames: "List[str]"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..storage.types import StorageBucket
        from .types import DataEntry
        from .types import DatabaseWithObjectStores
        from .types import KeyRange
        # Rebuild models now that imports are available
        RequestDataReturns.model_rebuild()
        GetMetadataReturns.model_rebuild()
        RequestDatabaseReturns.model_rebuild()
        RequestDatabaseNamesReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
