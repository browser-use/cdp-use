# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Security Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import TimeSinceEpoch

"""An internal certificate ID value."""
CertificateId = int



class MixedContentType(Enum):
    """A description of mixed content (HTTP resources on HTTPS pages), as defined by
https://www.w3.org/TR/mixed-content/#categories"""
    BLOCKABLE = "blockable"
    OPTIONALLY_BLOCKABLE = "optionally-blockable"
    NONE = "none"



class SecurityState(Enum):
    """The security level of a page or resource."""
    UNKNOWN = "unknown"
    NEUTRAL = "neutral"
    INSECURE = "insecure"
    SECURE = "secure"
    INFO = "info"
    INSECURE_BROKEN = "insecure-broken"



class CertificateSecurityState(BaseModel):
    """Details about the security state of the page certificate."""
    protocol: "str"
    keyExchange: "str"
    cipher: "str"
    certificate: "List[str]"
    subjectName: "str"
    issuer: "str"
    validFrom: "TimeSinceEpoch"
    validTo: "TimeSinceEpoch"
    certificateHasWeakSignature: "bool"
    certificateHasSha1Signature: "bool"
    modernSSL: "bool"
    obsoleteSslProtocol: "bool"
    obsoleteSslKeyExchange: "bool"
    obsoleteSslCipher: "bool"
    obsoleteSslSignature: "bool"
    keyExchangeGroup: "Optional[str]" = None
    mac: "Optional[str]" = None
    certificateNetworkError: "Optional[str]" = None



class SafetyTipStatus(Enum):
    BADREPUTATION = "badReputation"
    LOOKALIKE = "lookalike"



class SafetyTipInfo(BaseModel):
    safetyTipStatus: "SafetyTipStatus"
    safeUrl: "Optional[str]" = None



class VisibleSecurityState(BaseModel):
    """Security state information about the page."""
    securityState: "SecurityState"
    securityStateIssueIds: "List[str]"
    certificateSecurityState: "Optional[CertificateSecurityState]" = None
    safetyTipInfo: "Optional[SafetyTipInfo]" = None



class SecurityStateExplanation(BaseModel):
    """An explanation of an factor contributing to the security state."""
    securityState: "SecurityState"
    title: "str"
    summary: "str"
    description: "str"
    mixedContentType: "MixedContentType"
    certificate: "List[str]"
    recommendations: "Optional[List[str]]" = None



class InsecureContentStatus(BaseModel):
    """Information about insecure content on the page."""
    ranMixedContent: "bool"
    displayedMixedContent: "bool"
    containedMixedForm: "bool"
    ranContentWithCertErrors: "bool"
    displayedContentWithCertErrors: "bool"
    ranInsecureContentStyle: "SecurityState"
    displayedInsecureContentStyle: "SecurityState"



class CertificateErrorAction(Enum):
    """The action to take when a certificate error occurs. continue will continue processing the
request and cancel will cancel the request."""
    CONTINUE = "continue"
    CANCEL = "cancel"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..network.types import TimeSinceEpoch
        # Rebuild models now that imports are available
        CertificateSecurityState.model_rebuild()
        SafetyTipInfo.model_rebuild()
        VisibleSecurityState.model_rebuild()
        SecurityStateExplanation.model_rebuild()
        InsecureContentStatus.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
