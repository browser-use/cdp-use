# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CacheStorage Domain Commands"""

from pydantic import BaseModel
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..storage.types import StorageBucket
    from .types import Cache
    from .types import CacheId
    from .types import CachedResponse
    from .types import DataEntry
    from .types import Header

class DeleteCacheParameters(TypedDict):
    cacheId: "CacheId"
    """Id of cache for deletion."""





class DeleteEntryParameters(TypedDict):
    cacheId: "CacheId"
    """Id of cache where the entry will be deleted."""
    request: "str"
    """URL spec of the request."""





class RequestCacheNamesParameters(TypedDict, total=False):
    securityOrigin: "str"
    """At least and at most one of securityOrigin, storageKey, storageBucket must be specified.
Security origin."""
    storageKey: "str"
    """Storage key."""
    storageBucket: "StorageBucket"
    """Storage bucket. If not specified, it uses the default bucket."""


class RequestCacheNamesReturns(BaseModel):
    caches: "List[Cache]"



class RequestCachedResponseParameters(TypedDict):
    cacheId: "CacheId"
    """Id of cache that contains the entry."""
    requestURL: "str"
    """URL spec of the request."""
    requestHeaders: "List[Header]"
    """headers of the request."""


class RequestCachedResponseReturns(BaseModel):
    response: "CachedResponse"



class RequestEntriesParameters(TypedDict):
    cacheId: "CacheId"
    """ID of cache to get entries from."""
    skipCount: "Optional[int]"
    """Number of records to skip."""
    pageSize: "Optional[int]"
    """Number of records to fetch."""
    pathFilter: "Optional[str]"
    """If present, only return the entries containing this substring in the path"""


class RequestEntriesReturns(BaseModel):
    cacheDataEntries: "List[DataEntry]"
    returnCount: "float"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..storage.types import StorageBucket
        from .types import Cache
        from .types import CacheId
        from .types import CachedResponse
        from .types import DataEntry
        from .types import Header
        # Rebuild models now that imports are available
        RequestCacheNamesReturns.model_rebuild()
        RequestCachedResponseReturns.model_rebuild()
        RequestEntriesReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
