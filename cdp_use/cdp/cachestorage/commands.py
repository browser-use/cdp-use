# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CacheStorage Domain Commands"""

from pydantic import BaseModel
from typing import List
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..storage.types import StorageBucket
    from .types import Cache
    from .types import CacheId
    from .types import CachedResponse
    from .types import DataEntry
    from .types import Header

class DeleteCacheParameters(TypedDict):
    cacheId: "CacheId"





class DeleteEntryParameters(TypedDict):
    cacheId: "CacheId"
    request: "str"





class RequestCacheNamesParameters(TypedDict, total=False):
    securityOrigin: "str"
    storageKey: "str"
    storageBucket: "StorageBucket"


class RequestCacheNamesReturns(BaseModel):
    caches: "List[Cache]"



class RequestCachedResponseParameters(TypedDict):
    cacheId: "CacheId"
    requestURL: "str"
    requestHeaders: "List[Header]"


class RequestCachedResponseReturns(BaseModel):
    response: "CachedResponse"



class RequestEntriesParameters(TypedDict):
    cacheId: "CacheId"
    skipCount: "NotRequired[int]"
    pageSize: "NotRequired[int]"
    pathFilter: "NotRequired[str]"


class RequestEntriesReturns(BaseModel):
    cacheDataEntries: "List[DataEntry]"
    returnCount: "float"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..storage.types import StorageBucket
        from .types import Cache
        from .types import CacheId
        from .types import CachedResponse
        from .types import DataEntry
        from .types import Header
        # Rebuild models now that imports are available
        RequestCacheNamesReturns.model_rebuild()
        RequestCachedResponseReturns.model_rebuild()
        RequestEntriesReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
