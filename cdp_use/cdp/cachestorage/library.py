# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP CacheStorage Domain Library"""

from typing import Any, Dict, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ...client import CDPClient
    from .commands import DeleteCacheParameters
    from .commands import DeleteEntryParameters
    from .commands import RequestCacheNamesParameters
    from .commands import RequestCacheNamesReturns
    from .commands import RequestCachedResponseParameters
    from .commands import RequestCachedResponseReturns
    from .commands import RequestEntriesParameters
    from .commands import RequestEntriesReturns

class CacheStorageClient:
    """Client for CacheStorage domain commands."""

    def __init__(self, client: 'CDPClient'):
        self._client = client

    async def deleteCache(
        self,
        params: "DeleteCacheParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Deletes a cache."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CacheStorage.deleteCache",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def deleteEntry(
        self,
        params: "DeleteEntryParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Deletes a cache entry."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CacheStorage.deleteEntry",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def requestCacheNames(
        self,
        params: Optional["RequestCacheNamesParameters"] = None,
        session_id: Optional[str] = None,
    ) -> "RequestCacheNamesReturns":
        """Requests cache names."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CacheStorage.requestCacheNames",
            params=params,
            session_id=session_id,
        )
        from .commands import RequestCacheNamesReturns as _RequestCacheNamesReturns
        return _RequestCacheNamesReturns.model_validate(raw_result)

    async def requestCachedResponse(
        self,
        params: "RequestCachedResponseParameters",
        session_id: Optional[str] = None,
    ) -> "RequestCachedResponseReturns":
        """Fetches cache entry."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CacheStorage.requestCachedResponse",
            params=params,
            session_id=session_id,
        )
        from .commands import RequestCachedResponseReturns as _RequestCachedResponseReturns
        return _RequestCachedResponseReturns.model_validate(raw_result)

    async def requestEntries(
        self,
        params: "RequestEntriesParameters",
        session_id: Optional[str] = None,
    ) -> "RequestEntriesReturns":
        """Requests data from cache."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="CacheStorage.requestEntries",
            params=params,
            session_id=session_id,
        )
        from .commands import RequestEntriesReturns as _RequestEntriesReturns
        return _RequestEntriesReturns.model_validate(raw_result)


