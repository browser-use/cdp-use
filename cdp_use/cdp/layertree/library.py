# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP LayerTree Domain Library"""

from typing import Any, Dict, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ...client import CDPClient
    from .commands import CompositingReasonsParameters
    from .commands import CompositingReasonsReturns
    from .commands import LoadSnapshotParameters
    from .commands import LoadSnapshotReturns
    from .commands import MakeSnapshotParameters
    from .commands import MakeSnapshotReturns
    from .commands import ProfileSnapshotParameters
    from .commands import ProfileSnapshotReturns
    from .commands import ReleaseSnapshotParameters
    from .commands import ReplaySnapshotParameters
    from .commands import ReplaySnapshotReturns
    from .commands import SnapshotCommandLogParameters
    from .commands import SnapshotCommandLogReturns

class LayerTreeClient:
    """Client for LayerTree domain commands."""

    def __init__(self, client: 'CDPClient'):
        self._client = client

    async def compositingReasons(
        self,
        params: "CompositingReasonsParameters",
        session_id: Optional[str] = None,
    ) -> "CompositingReasonsReturns":
        """Provides the reasons why the given layer was composited."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.compositingReasons",
            params=params,
            session_id=session_id,
        )
        from .commands import CompositingReasonsReturns as _CompositingReasonsReturns
        return _CompositingReasonsReturns.model_validate(raw_result)

    async def disable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Disables compositing tree inspection."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.disable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def enable(
        self,
        params: None = None,
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Enables compositing tree inspection."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.enable",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def loadSnapshot(
        self,
        params: "LoadSnapshotParameters",
        session_id: Optional[str] = None,
    ) -> "LoadSnapshotReturns":
        """Returns the snapshot identifier."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.loadSnapshot",
            params=params,
            session_id=session_id,
        )
        from .commands import LoadSnapshotReturns as _LoadSnapshotReturns
        return _LoadSnapshotReturns.model_validate(raw_result)

    async def makeSnapshot(
        self,
        params: "MakeSnapshotParameters",
        session_id: Optional[str] = None,
    ) -> "MakeSnapshotReturns":
        """Returns the layer snapshot identifier."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.makeSnapshot",
            params=params,
            session_id=session_id,
        )
        from .commands import MakeSnapshotReturns as _MakeSnapshotReturns
        return _MakeSnapshotReturns.model_validate(raw_result)

    async def profileSnapshot(
        self,
        params: "ProfileSnapshotParameters",
        session_id: Optional[str] = None,
    ) -> "ProfileSnapshotReturns":
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.profileSnapshot",
            params=params,
            session_id=session_id,
        )
        from .commands import ProfileSnapshotReturns as _ProfileSnapshotReturns
        return _ProfileSnapshotReturns.model_validate(raw_result)

    async def releaseSnapshot(
        self,
        params: "ReleaseSnapshotParameters",
        session_id: Optional[str] = None,
    ) -> "Dict[str, Any]":
        """Releases layer snapshot captured by the back-end."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.releaseSnapshot",
            params=params,
            session_id=session_id,
        )
        return raw_result

    async def replaySnapshot(
        self,
        params: "ReplaySnapshotParameters",
        session_id: Optional[str] = None,
    ) -> "ReplaySnapshotReturns":
        """Replays the layer snapshot and returns the resulting bitmap."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.replaySnapshot",
            params=params,
            session_id=session_id,
        )
        from .commands import ReplaySnapshotReturns as _ReplaySnapshotReturns
        return _ReplaySnapshotReturns.model_validate(raw_result)

    async def snapshotCommandLog(
        self,
        params: "SnapshotCommandLogParameters",
        session_id: Optional[str] = None,
    ) -> "SnapshotCommandLogReturns":
        """Replays the layer snapshot and returns canvas log."""
        raw_result: Dict[str, Any] = await self._client.send_raw(
            method="LayerTree.snapshotCommandLog",
            params=params,
            session_id=session_id,
        )
        from .commands import SnapshotCommandLogReturns as _SnapshotCommandLogReturns
        return _SnapshotCommandLogReturns.model_validate(raw_result)


