# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP WebAuthn Domain Commands"""

from pydantic import BaseModel
from typing import List
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import AuthenticatorId
    from .types import Credential
    from .types import VirtualAuthenticatorOptions

class EnableParameters(TypedDict, total=False):
    enableUI: "bool"





class AddVirtualAuthenticatorParameters(TypedDict):
    options: "VirtualAuthenticatorOptions"


class AddVirtualAuthenticatorReturns(BaseModel):
    authenticatorId: "AuthenticatorId"



class SetResponseOverrideBitsParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    isBogusSignature: "NotRequired[bool]"
    isBadUV: "NotRequired[bool]"
    isBadUP: "NotRequired[bool]"





class RemoveVirtualAuthenticatorParameters(TypedDict):
    authenticatorId: "AuthenticatorId"





class AddCredentialParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    credential: "Credential"





class GetCredentialParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    credentialId: "str"


class GetCredentialReturns(BaseModel):
    credential: "Credential"



class GetCredentialsParameters(TypedDict):
    authenticatorId: "AuthenticatorId"


class GetCredentialsReturns(BaseModel):
    credentials: "List[Credential]"



class RemoveCredentialParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    credentialId: "str"





class ClearCredentialsParameters(TypedDict):
    authenticatorId: "AuthenticatorId"





class SetUserVerifiedParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    isUserVerified: "bool"





class SetAutomaticPresenceSimulationParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    enabled: "bool"





class SetCredentialPropertiesParameters(TypedDict):
    authenticatorId: "AuthenticatorId"
    credentialId: "str"
    backupEligibility: "NotRequired[bool]"
    backupState: "NotRequired[bool]"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import AuthenticatorId
        from .types import Credential
        from .types import VirtualAuthenticatorOptions
        # Rebuild models now that imports are available
        AddVirtualAuthenticatorReturns.model_rebuild()
        GetCredentialReturns.model_rebuild()
        GetCredentialsReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
