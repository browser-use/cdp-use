# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Audits Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..dom.types import BackendNodeId
    from ..network.types import ClientSecurityState
    from ..network.types import CorsErrorStatus
    from ..network.types import IPAddressSpace
    from ..network.types import LoaderId
    from ..network.types import RequestId
    from ..page.types import FrameId
    from ..runtime.types import ScriptId

class AffectedCookie(BaseModel):
    """Information about a cookie that is affected by an inspector issue."""
    name: "str"
    path: "str"
    domain: "str"



class AffectedRequest(BaseModel):
    """Information about a request that is affected by an inspector issue."""
    url: "str"
    requestId: "Optional[RequestId]" = None



class AffectedFrame(BaseModel):
    """Information about the frame affected by an inspector issue."""
    frameId: "FrameId"



class CookieExclusionReason(Enum):
    EXCLUDESAMESITEUNSPECIFIEDTREATEDASLAX = "ExcludeSameSiteUnspecifiedTreatedAsLax"
    EXCLUDESAMESITENONEINSECURE = "ExcludeSameSiteNoneInsecure"
    EXCLUDESAMESITELAX = "ExcludeSameSiteLax"
    EXCLUDESAMESITESTRICT = "ExcludeSameSiteStrict"
    EXCLUDEINVALIDSAMEPARTY = "ExcludeInvalidSameParty"
    EXCLUDESAMEPARTYCROSSPARTYCONTEXT = "ExcludeSamePartyCrossPartyContext"
    EXCLUDEDOMAINNONASCII = "ExcludeDomainNonASCII"
    EXCLUDETHIRDPARTYCOOKIEBLOCKEDINFIRSTPARTYSET = "ExcludeThirdPartyCookieBlockedInFirstPartySet"
    EXCLUDETHIRDPARTYPHASEOUT = "ExcludeThirdPartyPhaseout"
    EXCLUDEPORTMISMATCH = "ExcludePortMismatch"
    EXCLUDESCHEMEMISMATCH = "ExcludeSchemeMismatch"



class CookieWarningReason(Enum):
    WARNSAMESITEUNSPECIFIEDCROSSSITECONTEXT = "WarnSameSiteUnspecifiedCrossSiteContext"
    WARNSAMESITENONEINSECURE = "WarnSameSiteNoneInsecure"
    WARNSAMESITEUNSPECIFIEDLAXALLOWUNSAFE = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
    WARNSAMESITESTRICTLAXDOWNGRADESTRICT = "WarnSameSiteStrictLaxDowngradeStrict"
    WARNSAMESITESTRICTCROSSDOWNGRADESTRICT = "WarnSameSiteStrictCrossDowngradeStrict"
    WARNSAMESITESTRICTCROSSDOWNGRADELAX = "WarnSameSiteStrictCrossDowngradeLax"
    WARNSAMESITELAXCROSSDOWNGRADESTRICT = "WarnSameSiteLaxCrossDowngradeStrict"
    WARNSAMESITELAXCROSSDOWNGRADELAX = "WarnSameSiteLaxCrossDowngradeLax"
    WARNATTRIBUTEVALUEEXCEEDSMAXSIZE = "WarnAttributeValueExceedsMaxSize"
    WARNDOMAINNONASCII = "WarnDomainNonASCII"
    WARNTHIRDPARTYPHASEOUT = "WarnThirdPartyPhaseout"
    WARNCROSSSITEREDIRECTDOWNGRADECHANGESINCLUSION = "WarnCrossSiteRedirectDowngradeChangesInclusion"
    WARNDEPRECATIONTRIALMETADATA = "WarnDeprecationTrialMetadata"
    WARNTHIRDPARTYCOOKIEHEURISTIC = "WarnThirdPartyCookieHeuristic"



class CookieOperation(Enum):
    SETCOOKIE = "SetCookie"
    READCOOKIE = "ReadCookie"



class InsightType(Enum):
    """Represents the category of insight that a cookie issue falls under."""
    GITHUBRESOURCE = "GitHubResource"
    GRACEPERIOD = "GracePeriod"
    HEURISTICS = "Heuristics"



class CookieIssueInsight(BaseModel):
    """Information about the suggested solution to a cookie issue."""
    type: "InsightType"
    tableEntryUrl: "Optional[str]" = None



class CookieIssueDetails(BaseModel):
    """This information is currently necessary, as the front-end has a difficult
time finding a specific cookie. With this, we can convey specific error
information without the cookie."""
    cookieWarningReasons: "List[CookieWarningReason]"
    cookieExclusionReasons: "List[CookieExclusionReason]"
    operation: "CookieOperation"
    cookie: "Optional[AffectedCookie]" = None
    rawCookieLine: "Optional[str]" = None
    siteForCookies: "Optional[str]" = None
    cookieUrl: "Optional[str]" = None
    request: "Optional[AffectedRequest]" = None
    insight: "Optional[CookieIssueInsight]" = None



class MixedContentResolutionStatus(Enum):
    MIXEDCONTENTBLOCKED = "MixedContentBlocked"
    MIXEDCONTENTAUTOMATICALLYUPGRADED = "MixedContentAutomaticallyUpgraded"
    MIXEDCONTENTWARNING = "MixedContentWarning"



class MixedContentResourceType(Enum):
    ATTRIBUTIONSRC = "AttributionSrc"
    AUDIO = "Audio"
    BEACON = "Beacon"
    CSPREPORT = "CSPReport"
    DOWNLOAD = "Download"
    EVENTSOURCE = "EventSource"
    FAVICON = "Favicon"
    FONT = "Font"
    FORM = "Form"
    FRAME = "Frame"
    IMAGE = "Image"
    IMPORT = "Import"
    JSON = "JSON"
    MANIFEST = "Manifest"
    PING = "Ping"
    PLUGINDATA = "PluginData"
    PLUGINRESOURCE = "PluginResource"
    PREFETCH = "Prefetch"
    RESOURCE = "Resource"
    SCRIPT = "Script"
    SERVICEWORKER = "ServiceWorker"
    SHAREDWORKER = "SharedWorker"
    SPECULATIONRULES = "SpeculationRules"
    STYLESHEET = "Stylesheet"
    TRACK = "Track"
    VIDEO = "Video"
    WORKER = "Worker"
    XMLHTTPREQUEST = "XMLHttpRequest"
    XSLT = "XSLT"



class MixedContentIssueDetails(BaseModel):
    resolutionStatus: "MixedContentResolutionStatus"
    insecureURL: "str"
    mainResourceURL: "str"
    resourceType: "Optional[MixedContentResourceType]" = None
    request: "Optional[AffectedRequest]" = None
    frame: "Optional[AffectedFrame]" = None



class BlockedByResponseReason(Enum):
    """Enum indicating the reason a response has been blocked. These reasons are
refinements of the net error BLOCKED_BY_RESPONSE."""
    COEPFRAMERESOURCENEEDSCOEPHEADER = "CoepFrameResourceNeedsCoepHeader"
    COOPSANDBOXEDIFRAMECANNOTNAVIGATETOCOOPPAGE = "CoopSandboxedIFrameCannotNavigateToCoopPage"
    CORPNOTSAMEORIGIN = "CorpNotSameOrigin"
    CORPNOTSAMEORIGINAFTERDEFAULTEDTOSAMEORIGINBYCOEP = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
    CORPNOTSAMEORIGINAFTERDEFAULTEDTOSAMEORIGINBYDIP = "CorpNotSameOriginAfterDefaultedToSameOriginByDip"
    CORPNOTSAMEORIGINAFTERDEFAULTEDTOSAMEORIGINBYCOEPANDDIP = "CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip"
    CORPNOTSAMESITE = "CorpNotSameSite"
    SRIMESSAGESIGNATUREMISMATCH = "SRIMessageSignatureMismatch"



class BlockedByResponseIssueDetails(BaseModel):
    """Details for a request that has been blocked with the BLOCKED_BY_RESPONSE
code. Currently only used for COEP/COOP, but may be extended to include
some CSP errors in the future."""
    request: "AffectedRequest"
    reason: "BlockedByResponseReason"
    parentFrame: "Optional[AffectedFrame]" = None
    blockedFrame: "Optional[AffectedFrame]" = None



class HeavyAdResolutionStatus(Enum):
    HEAVYADBLOCKED = "HeavyAdBlocked"
    HEAVYADWARNING = "HeavyAdWarning"



class HeavyAdReason(Enum):
    NETWORKTOTALLIMIT = "NetworkTotalLimit"
    CPUTOTALLIMIT = "CpuTotalLimit"
    CPUPEAKLIMIT = "CpuPeakLimit"



class HeavyAdIssueDetails(BaseModel):
    resolution: "HeavyAdResolutionStatus"
    reason: "HeavyAdReason"
    frame: "AffectedFrame"



class ContentSecurityPolicyViolationType(Enum):
    KINLINEVIOLATION = "kInlineViolation"
    KEVALVIOLATION = "kEvalViolation"
    KURLVIOLATION = "kURLViolation"
    KSRIVIOLATION = "kSRIViolation"
    KTRUSTEDTYPESSINKVIOLATION = "kTrustedTypesSinkViolation"
    KTRUSTEDTYPESPOLICYVIOLATION = "kTrustedTypesPolicyViolation"
    KWASMEVALVIOLATION = "kWasmEvalViolation"



class SourceCodeLocation(BaseModel):
    url: "str"
    lineNumber: "int"
    columnNumber: "int"
    scriptId: "Optional[ScriptId]" = None



class ContentSecurityPolicyIssueDetails(BaseModel):
    violatedDirective: "str"
    isReportOnly: "bool"
    contentSecurityPolicyViolationType: "ContentSecurityPolicyViolationType"
    blockedURL: "Optional[str]" = None
    frameAncestor: "Optional[AffectedFrame]" = None
    sourceCodeLocation: "Optional[SourceCodeLocation]" = None
    violatingNodeId: "Optional[BackendNodeId]" = None



class SharedArrayBufferIssueType(Enum):
    TRANSFERISSUE = "TransferIssue"
    CREATIONISSUE = "CreationIssue"



class SharedArrayBufferIssueDetails(BaseModel):
    """Details for a issue arising from an SAB being instantiated in, or
transferred to a context that is not cross-origin isolated."""
    sourceCodeLocation: "SourceCodeLocation"
    isWarning: "bool"
    type: "SharedArrayBufferIssueType"



class LowTextContrastIssueDetails(BaseModel):
    violatingNodeId: "BackendNodeId"
    violatingNodeSelector: "str"
    contrastRatio: "float"
    thresholdAA: "float"
    thresholdAAA: "float"
    fontSize: "str"
    fontWeight: "str"



class CorsIssueDetails(BaseModel):
    """Details for a CORS related issue, e.g. a warning or error related to
CORS RFC1918 enforcement."""
    corsErrorStatus: "CorsErrorStatus"
    isWarning: "bool"
    request: "AffectedRequest"
    location: "Optional[SourceCodeLocation]" = None
    initiatorOrigin: "Optional[str]" = None
    resourceIPAddressSpace: "Optional[IPAddressSpace]" = None
    clientSecurityState: "Optional[ClientSecurityState]" = None



class AttributionReportingIssueType(Enum):
    PERMISSIONPOLICYDISABLED = "PermissionPolicyDisabled"
    UNTRUSTWORTHYREPORTINGORIGIN = "UntrustworthyReportingOrigin"
    INSECURECONTEXT = "InsecureContext"
    INVALIDHEADER = "InvalidHeader"
    INVALIDREGISTERTRIGGERHEADER = "InvalidRegisterTriggerHeader"
    SOURCEANDTRIGGERHEADERS = "SourceAndTriggerHeaders"
    SOURCEIGNORED = "SourceIgnored"
    TRIGGERIGNORED = "TriggerIgnored"
    OSSOURCEIGNORED = "OsSourceIgnored"
    OSTRIGGERIGNORED = "OsTriggerIgnored"
    INVALIDREGISTEROSSOURCEHEADER = "InvalidRegisterOsSourceHeader"
    INVALIDREGISTEROSTRIGGERHEADER = "InvalidRegisterOsTriggerHeader"
    WEBANDOSHEADERS = "WebAndOsHeaders"
    NOWEBOROSSUPPORT = "NoWebOrOsSupport"
    NAVIGATIONREGISTRATIONWITHOUTTRANSIENTUSERACTIVATION = "NavigationRegistrationWithoutTransientUserActivation"
    INVALIDINFOHEADER = "InvalidInfoHeader"
    NOREGISTERSOURCEHEADER = "NoRegisterSourceHeader"
    NOREGISTERTRIGGERHEADER = "NoRegisterTriggerHeader"
    NOREGISTEROSSOURCEHEADER = "NoRegisterOsSourceHeader"
    NOREGISTEROSTRIGGERHEADER = "NoRegisterOsTriggerHeader"
    NAVIGATIONREGISTRATIONUNIQUESCOPEALREADYSET = "NavigationRegistrationUniqueScopeAlreadySet"



class SharedDictionaryError(Enum):
    USEERRORCROSSORIGINNOCORSREQUEST = "UseErrorCrossOriginNoCorsRequest"
    USEERRORDICTIONARYLOADFAILURE = "UseErrorDictionaryLoadFailure"
    USEERRORMATCHINGDICTIONARYNOTUSED = "UseErrorMatchingDictionaryNotUsed"
    USEERRORUNEXPECTEDCONTENTDICTIONARYHEADER = "UseErrorUnexpectedContentDictionaryHeader"
    WRITEERRORCOSSORIGINNOCORSREQUEST = "WriteErrorCossOriginNoCorsRequest"
    WRITEERRORDISALLOWEDBYSETTINGS = "WriteErrorDisallowedBySettings"
    WRITEERROREXPIREDRESPONSE = "WriteErrorExpiredResponse"
    WRITEERRORFEATUREDISABLED = "WriteErrorFeatureDisabled"
    WRITEERRORINSUFFICIENTRESOURCES = "WriteErrorInsufficientResources"
    WRITEERRORINVALIDMATCHFIELD = "WriteErrorInvalidMatchField"
    WRITEERRORINVALIDSTRUCTUREDHEADER = "WriteErrorInvalidStructuredHeader"
    WRITEERRORNAVIGATIONREQUEST = "WriteErrorNavigationRequest"
    WRITEERRORNOMATCHFIELD = "WriteErrorNoMatchField"
    WRITEERRORNONLISTMATCHDESTFIELD = "WriteErrorNonListMatchDestField"
    WRITEERRORNONSECURECONTEXT = "WriteErrorNonSecureContext"
    WRITEERRORNONSTRINGIDFIELD = "WriteErrorNonStringIdField"
    WRITEERRORNONSTRINGINMATCHDESTLIST = "WriteErrorNonStringInMatchDestList"
    WRITEERRORNONSTRINGMATCHFIELD = "WriteErrorNonStringMatchField"
    WRITEERRORNONTOKENTYPEFIELD = "WriteErrorNonTokenTypeField"
    WRITEERRORREQUESTABORTED = "WriteErrorRequestAborted"
    WRITEERRORSHUTTINGDOWN = "WriteErrorShuttingDown"
    WRITEERRORTOOLONGIDFIELD = "WriteErrorTooLongIdField"
    WRITEERRORUNSUPPORTEDTYPE = "WriteErrorUnsupportedType"



class SRIMessageSignatureError(Enum):
    MISSINGSIGNATUREHEADER = "MissingSignatureHeader"
    MISSINGSIGNATUREINPUTHEADER = "MissingSignatureInputHeader"
    INVALIDSIGNATUREHEADER = "InvalidSignatureHeader"
    INVALIDSIGNATUREINPUTHEADER = "InvalidSignatureInputHeader"
    SIGNATUREHEADERVALUEISNOTBYTESEQUENCE = "SignatureHeaderValueIsNotByteSequence"
    SIGNATUREHEADERVALUEISPARAMETERIZED = "SignatureHeaderValueIsParameterized"
    SIGNATUREHEADERVALUEISINCORRECTLENGTH = "SignatureHeaderValueIsIncorrectLength"
    SIGNATUREINPUTHEADERMISSINGLABEL = "SignatureInputHeaderMissingLabel"
    SIGNATUREINPUTHEADERVALUENOTINNERLIST = "SignatureInputHeaderValueNotInnerList"
    SIGNATUREINPUTHEADERVALUEMISSINGCOMPONENTS = "SignatureInputHeaderValueMissingComponents"
    SIGNATUREINPUTHEADERINVALIDCOMPONENTTYPE = "SignatureInputHeaderInvalidComponentType"
    SIGNATUREINPUTHEADERINVALIDCOMPONENTNAME = "SignatureInputHeaderInvalidComponentName"
    SIGNATUREINPUTHEADERINVALIDHEADERCOMPONENTPARAMETER = "SignatureInputHeaderInvalidHeaderComponentParameter"
    SIGNATUREINPUTHEADERINVALIDDERIVEDCOMPONENTPARAMETER = "SignatureInputHeaderInvalidDerivedComponentParameter"
    SIGNATUREINPUTHEADERKEYIDLENGTH = "SignatureInputHeaderKeyIdLength"
    SIGNATUREINPUTHEADERINVALIDPARAMETER = "SignatureInputHeaderInvalidParameter"
    SIGNATUREINPUTHEADERMISSINGREQUIREDPARAMETERS = "SignatureInputHeaderMissingRequiredParameters"
    VALIDATIONFAILEDSIGNATUREEXPIRED = "ValidationFailedSignatureExpired"
    VALIDATIONFAILEDINVALIDLENGTH = "ValidationFailedInvalidLength"
    VALIDATIONFAILEDSIGNATUREMISMATCH = "ValidationFailedSignatureMismatch"
    VALIDATIONFAILEDINTEGRITYMISMATCH = "ValidationFailedIntegrityMismatch"



class AttributionReportingIssueDetails(BaseModel):
    """Details for issues around \"Attribution Reporting API\" usage.
Explainer: https://github.com/WICG/attribution-reporting-api"""
    violationType: "AttributionReportingIssueType"
    request: "Optional[AffectedRequest]" = None
    violatingNodeId: "Optional[BackendNodeId]" = None
    invalidParameter: "Optional[str]" = None



class QuirksModeIssueDetails(BaseModel):
    """Details for issues about documents in Quirks Mode
or Limited Quirks Mode that affects page layouting."""
    isLimitedQuirksMode: "bool"
    documentNodeId: "BackendNodeId"
    url: "str"
    frameId: "FrameId"
    loaderId: "LoaderId"



class NavigatorUserAgentIssueDetails(BaseModel):
    url: "str"
    location: "Optional[SourceCodeLocation]" = None



class SharedDictionaryIssueDetails(BaseModel):
    sharedDictionaryError: "SharedDictionaryError"
    request: "AffectedRequest"



class SRIMessageSignatureIssueDetails(BaseModel):
    error: "SRIMessageSignatureError"
    signatureBase: "str"
    integrityAssertions: "List[str]"
    request: "AffectedRequest"



class GenericIssueErrorType(Enum):
    FORMLABELFORNAMEERROR = "FormLabelForNameError"
    FORMDUPLICATEIDFORINPUTERROR = "FormDuplicateIdForInputError"
    FORMINPUTWITHNOLABELERROR = "FormInputWithNoLabelError"
    FORMAUTOCOMPLETEATTRIBUTEEMPTYERROR = "FormAutocompleteAttributeEmptyError"
    FORMEMPTYIDANDNAMEATTRIBUTESFORINPUTERROR = "FormEmptyIdAndNameAttributesForInputError"
    FORMARIALABELLEDBYTONONEXISTINGID = "FormAriaLabelledByToNonExistingId"
    FORMINPUTASSIGNEDAUTOCOMPLETEVALUETOIDORNAMEATTRIBUTEERROR = "FormInputAssignedAutocompleteValueToIdOrNameAttributeError"
    FORMLABELHASNEITHERFORNORNESTEDINPUT = "FormLabelHasNeitherForNorNestedInput"
    FORMLABELFORMATCHESNONEXISTINGIDERROR = "FormLabelForMatchesNonExistingIdError"
    FORMINPUTHASWRONGBUTWELLINTENDEDAUTOCOMPLETEVALUEERROR = "FormInputHasWrongButWellIntendedAutocompleteValueError"
    RESPONSEWASBLOCKEDBYORB = "ResponseWasBlockedByORB"



class GenericIssueDetails(BaseModel):
    """Depending on the concrete errorType, different properties are set."""
    errorType: "GenericIssueErrorType"
    frameId: "Optional[FrameId]" = None
    violatingNodeId: "Optional[BackendNodeId]" = None
    violatingNodeAttribute: "Optional[str]" = None
    request: "Optional[AffectedRequest]" = None



class DeprecationIssueDetails(BaseModel):
    """This issue tracks information needed to print a deprecation message.
https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md"""
    sourceCodeLocation: "SourceCodeLocation"
    type: "str"
    affectedFrame: "Optional[AffectedFrame]" = None



class BounceTrackingIssueDetails(BaseModel):
    """This issue warns about sites in the redirect chain of a finished navigation
that may be flagged as trackers and have their state cleared if they don't
receive a user interaction. Note that in this context 'site' means eTLD+1.
For example, if the URL `https://example.test:80/bounce` was in the
redirect chain, the site reported would be `example.test`."""
    trackingSites: "List[str]"



class CookieDeprecationMetadataIssueDetails(BaseModel):
    """This issue warns about third-party sites that are accessing cookies on the
current page, and have been permitted due to having a global metadata grant.
Note that in this context 'site' means eTLD+1. For example, if the URL
`https://example.test:80/web_page` was accessing cookies, the site reported
would be `example.test`."""
    allowedSites: "List[str]"
    optOutPercentage: "float"
    isOptOutTopLevel: "bool"
    operation: "CookieOperation"



class ClientHintIssueReason(Enum):
    METATAGALLOWLISTINVALIDORIGIN = "MetaTagAllowListInvalidOrigin"
    METATAGMODIFIEDHTML = "MetaTagModifiedHTML"



class FederatedAuthRequestIssueDetails(BaseModel):
    federatedAuthRequestIssueReason: "FederatedAuthRequestIssueReason"



class FederatedAuthRequestIssueReason(Enum):
    """Represents the failure reason when a federated authentication reason fails.
Should be updated alongside RequestIdTokenStatus in
third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
all cases except for success."""
    SHOULDEMBARGO = "ShouldEmbargo"
    TOOMANYREQUESTS = "TooManyRequests"
    WELLKNOWNHTTPNOTFOUND = "WellKnownHttpNotFound"
    WELLKNOWNNORESPONSE = "WellKnownNoResponse"
    WELLKNOWNINVALIDRESPONSE = "WellKnownInvalidResponse"
    WELLKNOWNLISTEMPTY = "WellKnownListEmpty"
    WELLKNOWNINVALIDCONTENTTYPE = "WellKnownInvalidContentType"
    CONFIGNOTINWELLKNOWN = "ConfigNotInWellKnown"
    WELLKNOWNTOOBIG = "WellKnownTooBig"
    CONFIGHTTPNOTFOUND = "ConfigHttpNotFound"
    CONFIGNORESPONSE = "ConfigNoResponse"
    CONFIGINVALIDRESPONSE = "ConfigInvalidResponse"
    CONFIGINVALIDCONTENTTYPE = "ConfigInvalidContentType"
    CLIENTMETADATAHTTPNOTFOUND = "ClientMetadataHttpNotFound"
    CLIENTMETADATANORESPONSE = "ClientMetadataNoResponse"
    CLIENTMETADATAINVALIDRESPONSE = "ClientMetadataInvalidResponse"
    CLIENTMETADATAINVALIDCONTENTTYPE = "ClientMetadataInvalidContentType"
    IDPNOTPOTENTIALLYTRUSTWORTHY = "IdpNotPotentiallyTrustworthy"
    DISABLEDINSETTINGS = "DisabledInSettings"
    DISABLEDINFLAGS = "DisabledInFlags"
    ERRORFETCHINGSIGNIN = "ErrorFetchingSignin"
    INVALIDSIGNINRESPONSE = "InvalidSigninResponse"
    ACCOUNTSHTTPNOTFOUND = "AccountsHttpNotFound"
    ACCOUNTSNORESPONSE = "AccountsNoResponse"
    ACCOUNTSINVALIDRESPONSE = "AccountsInvalidResponse"
    ACCOUNTSLISTEMPTY = "AccountsListEmpty"
    ACCOUNTSINVALIDCONTENTTYPE = "AccountsInvalidContentType"
    IDTOKENHTTPNOTFOUND = "IdTokenHttpNotFound"
    IDTOKENNORESPONSE = "IdTokenNoResponse"
    IDTOKENINVALIDRESPONSE = "IdTokenInvalidResponse"
    IDTOKENIDPERRORRESPONSE = "IdTokenIdpErrorResponse"
    IDTOKENCROSSSITEIDPERRORRESPONSE = "IdTokenCrossSiteIdpErrorResponse"
    IDTOKENINVALIDREQUEST = "IdTokenInvalidRequest"
    IDTOKENINVALIDCONTENTTYPE = "IdTokenInvalidContentType"
    ERRORIDTOKEN = "ErrorIdToken"
    CANCELED = "Canceled"
    RPPAGENOTVISIBLE = "RpPageNotVisible"
    SILENTMEDIATIONFAILURE = "SilentMediationFailure"
    THIRDPARTYCOOKIESBLOCKED = "ThirdPartyCookiesBlocked"
    NOTSIGNEDINWITHIDP = "NotSignedInWithIdp"
    MISSINGTRANSIENTUSERACTIVATION = "MissingTransientUserActivation"
    REPLACEDBYACTIVEMODE = "ReplacedByActiveMode"
    INVALIDFIELDSSPECIFIED = "InvalidFieldsSpecified"
    RELYINGPARTYORIGINISOPAQUE = "RelyingPartyOriginIsOpaque"
    TYPENOTMATCHING = "TypeNotMatching"
    UIDISMISSEDNOEMBARGO = "UiDismissedNoEmbargo"
    CORSERROR = "CorsError"
    SUPPRESSEDBYSEGMENTATIONPLATFORM = "SuppressedBySegmentationPlatform"



class FederatedAuthUserInfoRequestIssueDetails(BaseModel):
    federatedAuthUserInfoRequestIssueReason: "FederatedAuthUserInfoRequestIssueReason"



class FederatedAuthUserInfoRequestIssueReason(Enum):
    """Represents the failure reason when a getUserInfo() call fails.
Should be updated alongside FederatedAuthUserInfoRequestResult in
third_party/blink/public/mojom/devtools/inspector_issue.mojom."""
    NOTSAMEORIGIN = "NotSameOrigin"
    NOTIFRAME = "NotIframe"
    NOTPOTENTIALLYTRUSTWORTHY = "NotPotentiallyTrustworthy"
    NOAPIPERMISSION = "NoApiPermission"
    NOTSIGNEDINWITHIDP = "NotSignedInWithIdp"
    NOACCOUNTSHARINGPERMISSION = "NoAccountSharingPermission"
    INVALIDCONFIGORWELLKNOWN = "InvalidConfigOrWellKnown"
    INVALIDACCOUNTSRESPONSE = "InvalidAccountsResponse"
    NORETURNINGUSERFROMFETCHEDACCOUNTS = "NoReturningUserFromFetchedAccounts"



class ClientHintIssueDetails(BaseModel):
    """This issue tracks client hints related issues. It's used to deprecate old
features, encourage the use of new ones, and provide general guidance."""
    sourceCodeLocation: "SourceCodeLocation"
    clientHintIssueReason: "ClientHintIssueReason"



class FailedRequestInfo(BaseModel):
    url: "str"
    failureMessage: "str"
    requestId: "Optional[RequestId]" = None



class PartitioningBlobURLInfo(Enum):
    BLOCKEDCROSSPARTITIONFETCHING = "BlockedCrossPartitionFetching"
    ENFORCENOOPENERFORNAVIGATION = "EnforceNoopenerForNavigation"



class PartitioningBlobURLIssueDetails(BaseModel):
    url: "str"
    partitioningBlobURLInfo: "PartitioningBlobURLInfo"



class ElementAccessibilityIssueReason(Enum):
    DISALLOWEDSELECTCHILD = "DisallowedSelectChild"
    DISALLOWEDOPTGROUPCHILD = "DisallowedOptGroupChild"
    NONPHRASINGCONTENTOPTIONCHILD = "NonPhrasingContentOptionChild"
    INTERACTIVECONTENTOPTIONCHILD = "InteractiveContentOptionChild"
    INTERACTIVECONTENTLEGENDCHILD = "InteractiveContentLegendChild"
    INTERACTIVECONTENTSUMMARYDESCENDANT = "InteractiveContentSummaryDescendant"



class ElementAccessibilityIssueDetails(BaseModel):
    """This issue warns about errors in the select or summary element content model."""
    nodeId: "BackendNodeId"
    elementAccessibilityIssueReason: "ElementAccessibilityIssueReason"
    hasDisallowedAttributes: "bool"



class StyleSheetLoadingIssueReason(Enum):
    LATEIMPORTRULE = "LateImportRule"
    REQUESTFAILED = "RequestFailed"



class StylesheetLoadingIssueDetails(BaseModel):
    """This issue warns when a referenced stylesheet couldn't be loaded."""
    sourceCodeLocation: "SourceCodeLocation"
    styleSheetLoadingIssueReason: "StyleSheetLoadingIssueReason"
    failedRequestInfo: "Optional[FailedRequestInfo]" = None



class PropertyRuleIssueReason(Enum):
    INVALIDSYNTAX = "InvalidSyntax"
    INVALIDINITIALVALUE = "InvalidInitialValue"
    INVALIDINHERITS = "InvalidInherits"
    INVALIDNAME = "InvalidName"



class PropertyRuleIssueDetails(BaseModel):
    """This issue warns about errors in property rules that lead to property
registrations being ignored."""
    sourceCodeLocation: "SourceCodeLocation"
    propertyRuleIssueReason: "PropertyRuleIssueReason"
    propertyValue: "Optional[str]" = None



class UserReidentificationIssueType(Enum):
    BLOCKEDFRAMENAVIGATION = "BlockedFrameNavigation"
    BLOCKEDSUBRESOURCE = "BlockedSubresource"



class UserReidentificationIssueDetails(BaseModel):
    """This issue warns about uses of APIs that may be considered misuse to
re-identify users."""
    type: "UserReidentificationIssueType"
    request: "Optional[AffectedRequest]" = None



class InspectorIssueCode(Enum):
    """A unique identifier for the type of issue. Each type may use one of the
optional fields in InspectorIssueDetails to convey more specific
information about the kind of issue."""
    COOKIEISSUE = "CookieIssue"
    MIXEDCONTENTISSUE = "MixedContentIssue"
    BLOCKEDBYRESPONSEISSUE = "BlockedByResponseIssue"
    HEAVYADISSUE = "HeavyAdIssue"
    CONTENTSECURITYPOLICYISSUE = "ContentSecurityPolicyIssue"
    SHAREDARRAYBUFFERISSUE = "SharedArrayBufferIssue"
    LOWTEXTCONTRASTISSUE = "LowTextContrastIssue"
    CORSISSUE = "CorsIssue"
    ATTRIBUTIONREPORTINGISSUE = "AttributionReportingIssue"
    QUIRKSMODEISSUE = "QuirksModeIssue"
    PARTITIONINGBLOBURLISSUE = "PartitioningBlobURLIssue"
    NAVIGATORUSERAGENTISSUE = "NavigatorUserAgentIssue"
    GENERICISSUE = "GenericIssue"
    DEPRECATIONISSUE = "DeprecationIssue"
    CLIENTHINTISSUE = "ClientHintIssue"
    FEDERATEDAUTHREQUESTISSUE = "FederatedAuthRequestIssue"
    BOUNCETRACKINGISSUE = "BounceTrackingIssue"
    COOKIEDEPRECATIONMETADATAISSUE = "CookieDeprecationMetadataIssue"
    STYLESHEETLOADINGISSUE = "StylesheetLoadingIssue"
    FEDERATEDAUTHUSERINFOREQUESTISSUE = "FederatedAuthUserInfoRequestIssue"
    PROPERTYRULEISSUE = "PropertyRuleIssue"
    SHAREDDICTIONARYISSUE = "SharedDictionaryIssue"
    ELEMENTACCESSIBILITYISSUE = "ElementAccessibilityIssue"
    SRIMESSAGESIGNATUREISSUE = "SRIMessageSignatureIssue"
    USERREIDENTIFICATIONISSUE = "UserReidentificationIssue"



class InspectorIssueDetails(BaseModel):
    """This struct holds a list of optional fields with additional information
specific to the kind of issue. When adding a new issue code, please also
add a new optional field to this type."""
    cookieIssueDetails: "Optional[CookieIssueDetails]" = None
    mixedContentIssueDetails: "Optional[MixedContentIssueDetails]" = None
    blockedByResponseIssueDetails: "Optional[BlockedByResponseIssueDetails]" = None
    heavyAdIssueDetails: "Optional[HeavyAdIssueDetails]" = None
    contentSecurityPolicyIssueDetails: "Optional[ContentSecurityPolicyIssueDetails]" = None
    sharedArrayBufferIssueDetails: "Optional[SharedArrayBufferIssueDetails]" = None
    lowTextContrastIssueDetails: "Optional[LowTextContrastIssueDetails]" = None
    corsIssueDetails: "Optional[CorsIssueDetails]" = None
    attributionReportingIssueDetails: "Optional[AttributionReportingIssueDetails]" = None
    quirksModeIssueDetails: "Optional[QuirksModeIssueDetails]" = None
    partitioningBlobURLIssueDetails: "Optional[PartitioningBlobURLIssueDetails]" = None
    navigatorUserAgentIssueDetails: "Optional[NavigatorUserAgentIssueDetails]" = None
    genericIssueDetails: "Optional[GenericIssueDetails]" = None
    deprecationIssueDetails: "Optional[DeprecationIssueDetails]" = None
    clientHintIssueDetails: "Optional[ClientHintIssueDetails]" = None
    federatedAuthRequestIssueDetails: "Optional[FederatedAuthRequestIssueDetails]" = None
    bounceTrackingIssueDetails: "Optional[BounceTrackingIssueDetails]" = None
    cookieDeprecationMetadataIssueDetails: "Optional[CookieDeprecationMetadataIssueDetails]" = None
    stylesheetLoadingIssueDetails: "Optional[StylesheetLoadingIssueDetails]" = None
    propertyRuleIssueDetails: "Optional[PropertyRuleIssueDetails]" = None
    federatedAuthUserInfoRequestIssueDetails: "Optional[FederatedAuthUserInfoRequestIssueDetails]" = None
    sharedDictionaryIssueDetails: "Optional[SharedDictionaryIssueDetails]" = None
    elementAccessibilityIssueDetails: "Optional[ElementAccessibilityIssueDetails]" = None
    sriMessageSignatureIssueDetails: "Optional[SRIMessageSignatureIssueDetails]" = None
    userReidentificationIssueDetails: "Optional[UserReidentificationIssueDetails]" = None



"""A unique id for a DevTools inspector issue. Allows other entities (e.g.
exceptions, CDP message, console messages, etc.) to reference an issue."""
IssueId = str



class InspectorIssue(BaseModel):
    """An inspector issue reported from the back-end."""
    code: "InspectorIssueCode"
    details: "InspectorIssueDetails"
    issueId: "Optional[IssueId]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..dom.types import BackendNodeId
        from ..network.types import ClientSecurityState
        from ..network.types import CorsErrorStatus
        from ..network.types import IPAddressSpace
        from ..network.types import LoaderId
        from ..network.types import RequestId
        from ..page.types import FrameId
        from ..runtime.types import ScriptId
        # Rebuild models now that imports are available
        AffectedCookie.model_rebuild()
        AffectedRequest.model_rebuild()
        AffectedFrame.model_rebuild()
        CookieIssueInsight.model_rebuild()
        CookieIssueDetails.model_rebuild()
        MixedContentIssueDetails.model_rebuild()
        BlockedByResponseIssueDetails.model_rebuild()
        HeavyAdIssueDetails.model_rebuild()
        SourceCodeLocation.model_rebuild()
        ContentSecurityPolicyIssueDetails.model_rebuild()
        SharedArrayBufferIssueDetails.model_rebuild()
        LowTextContrastIssueDetails.model_rebuild()
        CorsIssueDetails.model_rebuild()
        AttributionReportingIssueDetails.model_rebuild()
        QuirksModeIssueDetails.model_rebuild()
        NavigatorUserAgentIssueDetails.model_rebuild()
        SharedDictionaryIssueDetails.model_rebuild()
        SRIMessageSignatureIssueDetails.model_rebuild()
        GenericIssueDetails.model_rebuild()
        DeprecationIssueDetails.model_rebuild()
        BounceTrackingIssueDetails.model_rebuild()
        CookieDeprecationMetadataIssueDetails.model_rebuild()
        FederatedAuthRequestIssueDetails.model_rebuild()
        FederatedAuthUserInfoRequestIssueDetails.model_rebuild()
        ClientHintIssueDetails.model_rebuild()
        FailedRequestInfo.model_rebuild()
        PartitioningBlobURLIssueDetails.model_rebuild()
        ElementAccessibilityIssueDetails.model_rebuild()
        StylesheetLoadingIssueDetails.model_rebuild()
        PropertyRuleIssueDetails.model_rebuild()
        UserReidentificationIssueDetails.model_rebuild()
        InspectorIssueDetails.model_rebuild()
        InspectorIssue.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
