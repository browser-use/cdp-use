# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Debugger Domain Events"""

from pydantic import BaseModel
from typing import Any, Dict, List, Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..debugger.types import DebugSymbols
    from ..debugger.types import ScriptLanguage
    from ..runtime.types import ExecutionContextId
    from ..runtime.types import ScriptId
    from ..runtime.types import StackTrace
    from ..runtime.types import StackTraceId
    from .types import BreakpointId
    from .types import CallFrame
    from .types import Location
    from .types import ResolvedBreakpoint

class BreakpointResolvedEvent(BaseModel):
    """Fired when breakpoint is resolved to an actual script and location.
Deprecated in favor of `resolvedBreakpoints` in the `scriptParsed` event."""
    breakpointId: "BreakpointId"
    location: "Location"



class PausedEvent(BaseModel):
    """Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."""
    callFrames: "List[CallFrame]"
    reason: "str"
    data: "Optional[Dict[str, Any]]" = None
    hitBreakpoints: "Optional[List[str]]" = None
    asyncStackTrace: "Optional[StackTrace]" = None
    asyncStackTraceId: "Optional[StackTraceId]" = None
    asyncCallStackTraceId: "Optional[StackTraceId]" = None



class ResumedEvent(BaseModel):
    """Fired when the virtual machine resumed execution."""
    pass



class ScriptFailedToParseEvent(BaseModel):
    """Fired when virtual machine fails to parse the script."""
    scriptId: "ScriptId"
    url: "str"
    startLine: "int"
    startColumn: "int"
    endLine: "int"
    endColumn: "int"
    executionContextId: "ExecutionContextId"
    hash: "str"
    buildId: "str"
    executionContextAuxData: "Optional[Dict[str, Any]]" = None
    sourceMapURL: "Optional[str]" = None
    hasSourceURL: "Optional[bool]" = None
    isModule: "Optional[bool]" = None
    length: "Optional[int]" = None
    stackTrace: "Optional[StackTrace]" = None
    codeOffset: "Optional[int]" = None
    scriptLanguage: "Optional[Union[ScriptLanguage, str]]" = None
    embedderName: "Optional[str]" = None



class ScriptParsedEvent(BaseModel):
    """Fired when virtual machine parses script. This event is also fired for all known and uncollected
scripts upon enabling debugger."""
    scriptId: "ScriptId"
    url: "str"
    startLine: "int"
    startColumn: "int"
    endLine: "int"
    endColumn: "int"
    executionContextId: "ExecutionContextId"
    hash: "str"
    buildId: "str"
    executionContextAuxData: "Optional[Dict[str, Any]]" = None
    isLiveEdit: "Optional[bool]" = None
    sourceMapURL: "Optional[str]" = None
    hasSourceURL: "Optional[bool]" = None
    isModule: "Optional[bool]" = None
    length: "Optional[int]" = None
    stackTrace: "Optional[StackTrace]" = None
    codeOffset: "Optional[int]" = None
    scriptLanguage: "Optional[Union[ScriptLanguage, str]]" = None
    debugSymbols: "Optional[List[DebugSymbols]]" = None
    embedderName: "Optional[str]" = None
    resolvedBreakpoints: "Optional[List[ResolvedBreakpoint]]" = None


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..debugger.types import DebugSymbols
        from ..debugger.types import ScriptLanguage
        from ..runtime.types import ExecutionContextId
        from ..runtime.types import ScriptId
        from ..runtime.types import StackTrace
        from ..runtime.types import StackTraceId
        from .types import BreakpointId
        from .types import CallFrame
        from .types import Location
        from .types import ResolvedBreakpoint
        # Rebuild models now that imports are available
        BreakpointResolvedEvent.model_rebuild()
        PausedEvent.model_rebuild()
        ResumedEvent.model_rebuild()
        ScriptFailedToParseEvent.model_rebuild()
        ScriptParsedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
