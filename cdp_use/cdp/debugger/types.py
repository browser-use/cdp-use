# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Debugger Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..runtime.types import RemoteObject
    from ..runtime.types import ScriptId

"""Breakpoint identifier."""
BreakpointId = str



"""Call frame identifier."""
CallFrameId = str



class Location(BaseModel):
    """Location in the source code."""
    scriptId: "ScriptId"
    lineNumber: "int"
    columnNumber: "Optional[int]" = None



class ScriptPosition(BaseModel):
    """Location in the source code."""
    lineNumber: "int"
    columnNumber: "int"



class LocationRange(BaseModel):
    """Location range within one script."""
    scriptId: "ScriptId"
    start: "ScriptPosition"
    end: "ScriptPosition"



class CallFrame(BaseModel):
    """JavaScript call frame. Array of call frames form the call stack."""
    callFrameId: "CallFrameId"
    functionName: "str"
    location: "Location"
    url: "str"
    scopeChain: "List[Scope]"
    this: "RemoteObject"
    functionLocation: "Optional[Location]" = None
    returnValue: "Optional[RemoteObject]" = None
    canBeRestarted: "Optional[bool]" = None



class Scope(BaseModel):
    """Scope description."""
    type: "str"
    object: "RemoteObject"
    name: "Optional[str]" = None
    startLocation: "Optional[Location]" = None
    endLocation: "Optional[Location]" = None



class SearchMatch(BaseModel):
    """Search match for resource."""
    lineNumber: "float"
    lineContent: "str"



class BreakLocation(BaseModel):
    scriptId: "ScriptId"
    lineNumber: "int"
    columnNumber: "Optional[int]" = None
    type: "Optional[str]" = None



class WasmDisassemblyChunk(BaseModel):
    lines: "List[str]"
    bytecodeOffsets: "List[int]"



class ScriptLanguage(Enum):
    """Enum of possible script languages."""
    JAVASCRIPT = "JavaScript"
    WEBASSEMBLY = "WebAssembly"



class DebugSymbols(BaseModel):
    """Debug symbols available for a wasm script."""
    type: "str"
    externalURL: "Optional[str]" = None



class ResolvedBreakpoint(BaseModel):
    breakpointId: "BreakpointId"
    location: "Location"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..runtime.types import RemoteObject
        from ..runtime.types import ScriptId
        # Rebuild models now that imports are available
        Location.model_rebuild()
        ScriptPosition.model_rebuild()
        LocationRange.model_rebuild()
        CallFrame.model_rebuild()
        Scope.model_rebuild()
        SearchMatch.model_rebuild()
        BreakLocation.model_rebuild()
        WasmDisassemblyChunk.model_rebuild()
        DebugSymbols.model_rebuild()
        ResolvedBreakpoint.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
