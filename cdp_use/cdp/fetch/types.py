# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Fetch Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import Optional, Union

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import ResourceType

"""Unique request identifier.
Note that this does not identify individual HTTP requests that are part of
a network request."""
RequestId = str



class RequestStage(Enum):
    """Stages of the request to handle. Request will intercept before the request is
sent. Response will intercept after the response is received (but before response
body is received)."""
    REQUEST = "Request"
    RESPONSE = "Response"



class RequestPattern(BaseModel):
    urlPattern: "Optional[str]" = None
    resourceType: "Optional[Union[ResourceType, str]]" = None
    requestStage: "Optional[Union[RequestStage, str]]" = None



class HeaderEntry(BaseModel):
    """Response HTTP header entry"""
    name: "str"
    value: "str"



class AuthChallenge(BaseModel):
    """Authorization challenge for HTTP status code 401 or 407."""
    origin: "str"
    scheme: "str"
    realm: "str"
    source: "Optional[str]" = None



class AuthChallengeResponse(BaseModel):
    """Response to an AuthChallenge."""
    response: "str"
    username: "Optional[str]" = None
    password: "Optional[str]" = None


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..network.types import ResourceType
        # Rebuild models now that imports are available
        RequestPattern.model_rebuild()
        HeaderEntry.model_rebuild()
        AuthChallenge.model_rebuild()
        AuthChallengeResponse.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
