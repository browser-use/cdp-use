# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Fetch Domain Commands"""

from pydantic import BaseModel
from typing import List, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..io.types import StreamHandle
    from ..network.types import ErrorReason
    from .types import AuthChallengeResponse
    from .types import HeaderEntry
    from .types import RequestId
    from .types import RequestPattern

class EnableParameters(TypedDict, total=False):
    patterns: "List[RequestPattern]"
    handleAuthRequests: "bool"





class FailRequestParameters(TypedDict):
    requestId: "RequestId"
    errorReason: "Union[ErrorReason, str]"





class FulfillRequestParameters(TypedDict):
    requestId: "RequestId"
    responseCode: "int"
    responseHeaders: "NotRequired[List[HeaderEntry]]"
    binaryResponseHeaders: "NotRequired[str]"
    body: "NotRequired[str]"
    responsePhrase: "NotRequired[str]"





class ContinueRequestParameters(TypedDict):
    requestId: "RequestId"
    url: "NotRequired[str]"
    method: "NotRequired[str]"
    postData: "NotRequired[str]"
    headers: "NotRequired[List[HeaderEntry]]"
    interceptResponse: "NotRequired[bool]"





class ContinueWithAuthParameters(TypedDict):
    requestId: "RequestId"
    authChallengeResponse: "AuthChallengeResponse"





class ContinueResponseParameters(TypedDict):
    requestId: "RequestId"
    responseCode: "NotRequired[int]"
    responsePhrase: "NotRequired[str]"
    responseHeaders: "NotRequired[List[HeaderEntry]]"
    binaryResponseHeaders: "NotRequired[str]"





class GetResponseBodyParameters(TypedDict):
    requestId: "RequestId"


class GetResponseBodyReturns(BaseModel):
    body: "str"
    base64Encoded: "bool"



class TakeResponseBodyAsStreamParameters(TypedDict):
    requestId: "RequestId"


class TakeResponseBodyAsStreamReturns(BaseModel):
    stream: "StreamHandle"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..io.types import StreamHandle
        from ..network.types import ErrorReason
        from .types import AuthChallengeResponse
        from .types import HeaderEntry
        from .types import RequestId
        from .types import RequestPattern
        # Rebuild models now that imports are available
        GetResponseBodyReturns.model_rebuild()
        TakeResponseBodyAsStreamReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
