# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Fetch Domain Events"""

from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import ErrorReason
    from ..network.types import Request
    from ..network.types import RequestId
    from ..network.types import ResourceType
    from ..page.types import FrameId
    from .types import AuthChallenge
    from .types import HeaderEntry
    from .types import RequestId

class RequestPausedEvent(BaseModel):
    """Issued when the domain is enabled and the request URL matches the
specified filter. The request is paused until the client responds
with one of continueRequest, failRequest or fulfillRequest.
The stage of the request can be determined by presence of responseErrorReason
and responseStatusCode -- the request is at the response stage if either
of these fields is present and in the request stage otherwise.
Redirect responses and subsequent requests are reported similarly to regular
responses and requests. Redirect responses may be distinguished by the value
of `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with
presence of the `location` header. Requests resulting from a redirect will
have `redirectedRequestId` field set."""
    requestId: "RequestId"
    request: "Request"
    frameId: "FrameId"
    resourceType: "ResourceType"
    responseErrorReason: "Optional[ErrorReason]" = None
    responseStatusCode: "Optional[int]" = None
    responseStatusText: "Optional[str]" = None
    responseHeaders: "Optional[List[HeaderEntry]]" = None
    networkId: "Optional[RequestId]" = None
    redirectedRequestId: "Optional[RequestId]" = None



class AuthRequiredEvent(BaseModel):
    """Issued when the domain is enabled with handleAuthRequests set to true.
The request is paused until client responds with continueWithAuth."""
    requestId: "RequestId"
    request: "Request"
    frameId: "FrameId"
    resourceType: "ResourceType"
    authChallenge: "AuthChallenge"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..network.types import ErrorReason
        from ..network.types import Request
        from ..network.types import RequestId
        from ..network.types import ResourceType
        from ..page.types import FrameId
        from .types import AuthChallenge
        from .types import HeaderEntry
        from .types import RequestId
        # Rebuild models now that imports are available
        RequestPausedEvent.model_rebuild()
        AuthRequiredEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
