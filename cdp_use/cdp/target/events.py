# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Target Domain Events"""

from pydantic import BaseModel
from typing import Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import SessionID
    from .types import TargetID
    from .types import TargetInfo

class AttachedToTargetEvent(BaseModel):
    """Issued when attached to target because of auto-attach or `attachToTarget` command."""
    sessionId: "SessionID"
    targetInfo: "TargetInfo"
    waitingForDebugger: "bool"



class DetachedFromTargetEvent(BaseModel):
    """Issued when detached from target for any reason (including `detachFromTarget` command). Can be
issued multiple times per target if multiple sessions have been attached to it."""
    sessionId: "SessionID"
    targetId: "Optional[TargetID]" = None



class ReceivedMessageFromTargetEvent(BaseModel):
    """Notifies about a new protocol message received from the session (as reported in
`attachedToTarget` event)."""
    sessionId: "SessionID"
    message: "str"
    targetId: "Optional[TargetID]" = None



class TargetCreatedEvent(BaseModel):
    """Issued when a possible inspection target is created."""
    targetInfo: "TargetInfo"



class TargetDestroyedEvent(BaseModel):
    """Issued when a target is destroyed."""
    targetId: "TargetID"



class TargetCrashedEvent(BaseModel):
    """Issued when a target has crashed."""
    targetId: "TargetID"
    status: "str"
    errorCode: "int"



class TargetInfoChangedEvent(BaseModel):
    """Issued when some information about a target has changed. This only happens between
`targetCreated` and `targetDestroyed`."""
    targetInfo: "TargetInfo"


# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from .types import SessionID
        from .types import TargetID
        from .types import TargetInfo
        # Rebuild models now that imports are available
        AttachedToTargetEvent.model_rebuild()
        DetachedFromTargetEvent.model_rebuild()
        ReceivedMessageFromTargetEvent.model_rebuild()
        TargetCreatedEvent.model_rebuild()
        TargetDestroyedEvent.model_rebuild()
        TargetCrashedEvent.model_rebuild()
        TargetInfoChangedEvent.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
