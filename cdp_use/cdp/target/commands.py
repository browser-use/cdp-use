# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Target Domain Commands"""

from pydantic import BaseModel
from typing import List, Union
from typing_extensions import TypedDict, NotRequired

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..browser.types import BrowserContextID
    from .types import RemoteLocation
    from .types import SessionID
    from .types import TargetFilter
    from .types import TargetID
    from .types import TargetInfo
    from .types import WindowState

class ActivateTargetParameters(TypedDict):
    targetId: "TargetID"





class AttachToTargetParameters(TypedDict):
    targetId: "TargetID"
    flatten: "NotRequired[bool]"


class AttachToTargetReturns(BaseModel):
    sessionId: "SessionID"



class AttachToBrowserTargetReturns(BaseModel):
    sessionId: "SessionID"



class CloseTargetParameters(TypedDict):
    targetId: "TargetID"


class CloseTargetReturns(BaseModel):
    success: "bool"



class ExposeDevToolsProtocolParameters(TypedDict):
    targetId: "TargetID"
    bindingName: "NotRequired[str]"
    inheritPermissions: "NotRequired[bool]"





class CreateBrowserContextParameters(TypedDict, total=False):
    disposeOnDetach: "bool"
    proxyServer: "str"
    proxyBypassList: "str"
    originsWithUniversalNetworkAccess: "List[str]"


class CreateBrowserContextReturns(BaseModel):
    browserContextId: "BrowserContextID"



class GetBrowserContextsReturns(BaseModel):
    browserContextIds: "List[BrowserContextID]"



class CreateTargetParameters(TypedDict):
    url: "str"
    left: "NotRequired[int]"
    top: "NotRequired[int]"
    width: "NotRequired[int]"
    height: "NotRequired[int]"
    windowState: "NotRequired[Union[WindowState, str]]"
    browserContextId: "NotRequired[BrowserContextID]"
    enableBeginFrameControl: "NotRequired[bool]"
    newWindow: "NotRequired[bool]"
    background: "NotRequired[bool]"
    forTab: "NotRequired[bool]"
    hidden: "NotRequired[bool]"


class CreateTargetReturns(BaseModel):
    targetId: "TargetID"



class DetachFromTargetParameters(TypedDict, total=False):
    sessionId: "SessionID"
    targetId: "TargetID"





class DisposeBrowserContextParameters(TypedDict):
    browserContextId: "BrowserContextID"





class GetTargetInfoParameters(TypedDict, total=False):
    targetId: "TargetID"


class GetTargetInfoReturns(BaseModel):
    targetInfo: "TargetInfo"



class GetTargetsParameters(TypedDict, total=False):
    filter: "TargetFilter"


class GetTargetsReturns(BaseModel):
    targetInfos: "List[TargetInfo]"



class SendMessageToTargetParameters(TypedDict):
    message: "str"
    sessionId: "NotRequired[SessionID]"
    targetId: "NotRequired[TargetID]"





class SetAutoAttachParameters(TypedDict):
    autoAttach: "bool"
    waitForDebuggerOnStart: "bool"
    flatten: "NotRequired[bool]"
    filter: "NotRequired[TargetFilter]"





class AutoAttachRelatedParameters(TypedDict):
    targetId: "TargetID"
    waitForDebuggerOnStart: "bool"
    filter: "NotRequired[TargetFilter]"





class SetDiscoverTargetsParameters(TypedDict):
    discover: "bool"
    filter: "NotRequired[TargetFilter]"





class SetRemoteLocationsParameters(TypedDict):
    locations: "List[RemoteLocation]"




# Rebuild Pydantic models to resolve forward references
def _rebuild_models_when_ready():
    try:
        from ..browser.types import BrowserContextID
        from .types import RemoteLocation
        from .types import SessionID
        from .types import TargetFilter
        from .types import TargetID
        from .types import TargetInfo
        from .types import WindowState
        # Rebuild models now that imports are available
        AttachToTargetReturns.model_rebuild()
        AttachToBrowserTargetReturns.model_rebuild()
        CloseTargetReturns.model_rebuild()
        CreateBrowserContextReturns.model_rebuild()
        GetBrowserContextsReturns.model_rebuild()
        CreateTargetReturns.model_rebuild()
        GetTargetInfoReturns.model_rebuild()
        GetTargetsReturns.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
