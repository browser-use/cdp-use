# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Target Domain Types"""

from enum import Enum
from pydantic import BaseModel
from typing import List, Optional

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..browser.types import BrowserContextID
    from ..page.types import FrameId

TargetID = str



"""Unique identifier of attached debugging session."""
SessionID = str



class TargetInfo(BaseModel):
    targetId: "TargetID"
    type: "str"
    title: "str"
    url: "str"
    attached: "bool"
    canAccessOpener: "bool"
    openerId: "Optional[TargetID]" = None
    openerFrameId: "Optional[FrameId]" = None
    browserContextId: "Optional[BrowserContextID]" = None
    subtype: "Optional[str]" = None



class FilterEntry(BaseModel):
    """A filter used by target query/discovery/auto-attach operations."""
    exclude: "Optional[bool]" = None
    type: "Optional[str]" = None



"""The entries in TargetFilter are matched sequentially against targets and
the first entry that matches determines if the target is included or not,
depending on the value of `exclude` field in the entry.
If filter is not specified, the one assumed is
[{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]
(i.e. include everything but `browser` and `tab`)."""
TargetFilter = List[FilterEntry]



class RemoteLocation(BaseModel):
    host: "str"
    port: "int"



class WindowState(Enum):
    """The state of the target window."""
    NORMAL = "normal"
    MINIMIZED = "minimized"
    MAXIMIZED = "maximized"
    FULLSCREEN = "fullscreen"


# Rebuild Pydantic models to resolve forward references
# Import dependencies for model rebuilding
def _rebuild_models_when_ready():
    try:
        from ..browser.types import BrowserContextID
        from ..page.types import FrameId
        # Rebuild models now that imports are available
        TargetInfo.model_rebuild()
        FilterEntry.model_rebuild()
        RemoteLocation.model_rebuild()
    except ImportError:
        pass  # Will be rebuilt later

_rebuild_models_when_ready()
